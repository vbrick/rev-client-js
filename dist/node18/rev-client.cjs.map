{"version":3,"sources":["../../src/index-node-native.ts","../../src/utils/file-utils.ts","../../src/utils/is-utils.ts","../../src/utils/multipart-utils.ts","../../src/interop/polyfills.ts","../../src/utils/rate-limit.ts","../../src/utils/rate-limit-queues.ts","../../src/utils/index.ts","../../src/rev-error.ts","../../src/utils/paged-request.ts","../../src/utils/request-utils.ts","../../src/api/admin.ts","../../src/utils/parse-csv.ts","../../src/api/audit-request.ts","../../src/api/audit.ts","../../src/utils/merge-headers.ts","../../src/api/oauth.ts","../../src/api/auth.ts","../../src/api/category.ts","../../src/api/channel.ts","../../src/api/device.ts","../../src/api/group.ts","../../src/api/playlist-details-request.ts","../../src/api/playlist.ts","../../src/api/recording.ts","../../src/api/upload.ts","../../src/api/user.ts","../../src/api/video-download.ts","../../src/api/video-external-access.ts","../../src/api/video-report-request.ts","../../src/api/video.ts","../../src/api/webcast-report-request.ts","../../src/api/webcast.ts","../../src/api/zones.ts","../../src/api/environment.ts","../../src/rev-session.ts","../../src/rev-client.ts","../../src/index.ts","../../src/interop/node-polyfills.ts","../../src/interop/node-multipart-utils.ts"],"sourcesContent":["export * from './index';\r\nexport type * from './index';\r\n\r\nimport { setPolyfills } from './interop/polyfills';\r\nimport nodePolyfillsCallback from './interop/node-polyfills';\r\n\r\nsetPolyfills(nodePolyfillsCallback);\r\n","\r\nexport const mimeTypes = {\r\n    '.7z': 'application/x-7z-compressed',\r\n    '.asf': 'video/x-ms-asf',\r\n    '.avi': 'video/x-msvideo',\r\n    '.csv': 'text/csv',\r\n    '.doc': 'application/msword',\r\n    '.docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\r\n    '.f4v': 'video/x-f4v',\r\n    '.flv': 'video/x-flv',\r\n    '.gif': 'image/gif',\r\n    '.jpg': 'image/jpeg',\r\n    '.m4a': 'audio/mp4',\r\n    '.m4v': 'video/x-m4v',\r\n    '.mkv': 'video/x-matroska',\r\n    '.mov': 'video/quicktime',\r\n    '.mp3': 'audio/mpeg',\r\n    '.mp4': 'video/mp4',\r\n    '.mpg': 'video/mpeg',\r\n    '.pdf': 'application/pdf',\r\n    '.png': 'image/png',\r\n    '.ppt': 'application/vnd.ms-powerpoint',\r\n    '.pptx': 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\r\n    '.rar': 'application/x-rar-compressed',\r\n    '.srt': 'application/x-subrip',\r\n    '.svg': 'image/svg+xml',\r\n    '.swf': 'application/x-shockwave-flash',\r\n    '.ts': 'video/mp2t',\r\n    '.txt': 'text/plain',\r\n    '.wmv': 'video/x-ms-wmv',\r\n    '.xls': 'application/vnd.ms-excel',\r\n    '.xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\r\n    '.zip': 'application/zip',\r\n    '.mks': 'video/x-matroska',\r\n    '.mts': 'model/vnd.mts',\r\n    '.vtt': 'text/vtt',\r\n    '.wma': 'audio/x-ms-wma'\r\n};\r\n\r\nexport function getMimeForExtension(extension: string = '', defaultType = 'video/mp4') {\r\n    extension = extension.toLowerCase();\r\n    if (extension && (extension in mimeTypes)) {\r\n        return mimeTypes[extension as keyof typeof mimeTypes];\r\n    }\r\n    return defaultType;\r\n}\r\n\r\nexport function getExtensionForMime(contentType: string, defaultExtension = '.mp4') {\r\n    const match = contentType && Object.entries(mimeTypes)\r\n        .find(([ext, mime]) => contentType.startsWith((mime)));\r\n    return match\r\n        ? match[0]\r\n        : defaultExtension;\r\n\r\n}\r\n\r\nexport function sanitizeUploadOptions(filename = 'upload', contentType = '', defaultContentType?: string) {\r\n    // sanitize content type\r\n    if (contentType === 'application/octet-stream') {\r\n        contentType = '';\r\n    }\r\n    if (/charset/.test(contentType)) {\r\n        contentType = contentType.replace(/;?.*charset.*$/, '');\r\n    }\r\n    let [name, ext] = filename.split(/(?=\\.[^\\.\\\\\\/]+$)/);\r\n    ext ||= getExtensionForMime(contentType || defaultContentType || '');\r\n\r\n    filename = `${name}${ext}`;\r\n\r\n    // extra check for transcription filetype\r\n    if (!contentType || ['.vtt', '.srt'].includes(ext)) {\r\n        contentType = getMimeForExtension(ext, defaultContentType);\r\n    }\r\n\r\n    return { filename, contentType };\r\n}\r\n\r\n","const { toString: _toString } = Object.prototype;\r\n\r\nexport function isPlainObject<T = { [key: string]: any; } | any[]>(val: unknown): val is T {\r\n    if (_toString.call(val) !== '[object Object]') {\r\n        return false;\r\n    }\r\n    const prototype = Object.getPrototypeOf(val);\r\n    return prototype === null || prototype === Object.getPrototypeOf({ });\r\n}\r\n\r\nexport function isBlobLike(val: unknown): val is Blob | File {\r\n    return typeof (val as Blob)?.stream === 'function';\r\n}\r\n\r\nexport function isReadable<T = any>(val: unknown): val is AsyncIterable<T> {\r\n    return typeof (val as AsyncIterable<T>)[Symbol.asyncIterator] === 'function';\r\n}\r\n\r\nexport function titleCase(val: string) {\r\n    return `${val[0]}${val.slice(1)}`;\r\n}\r\n\r\n// exclude 0 / false from falsy check\r\nexport function isBlank(val: any) {\r\n    return val == undefined || val === '';\r\n}\r\n","import polyfills from '../interop/polyfills';\r\nimport type { RevClient } from '../rev-client';\r\nimport { RevError } from '../rev-error';\r\nimport type { Rev } from '../types/index';\r\nimport { sanitizeUploadOptions } from './file-utils';\r\nimport { isBlobLike } from './is-utils';\r\n\r\nconst LOCAL_PROTOCOLS = ['blob:', 'data:'];\r\n\r\nexport const uploadParser = {\r\n    async string(value: string | URL, options: Rev.UploadFileOptions) {\r\n        const url = polyfills.parseUrl(value);\r\n\r\n        if (LOCAL_PROTOCOLS.includes(url.protocol)) {\r\n            const file = await (await polyfills.fetch(url)).blob();\r\n            return uploadParser.blob(file, options);\r\n        }\r\n\r\n        if (options.disableExternalResources) {\r\n            throw new Error(`${url.protocol} protocol not allowed`);\r\n        }\r\n\r\n        if (url.protocol === 'file:') {\r\n            return uploadParser.localFile(url, options);\r\n        }\r\n        // for backwards compatibility https streams are not supported\r\n        throw new TypeError('Only Blob / DateURI URLs are supported');\r\n    },\r\n    async localFile(url: URL, options: Rev.UploadFileOptions) {\r\n        if (options.disableExternalResources) {\r\n            throw new Error('file: protocol not allowed');\r\n        }\r\n        // as of 2025 only Deno supports file:// fetch\r\n        return uploadParser.response(await polyfills.fetch(url), options);\r\n    },\r\n    async stream(value: AsyncIterable<Uint8Array>, options: Rev.UploadFileOptions) {\r\n        const {contentType} = options;\r\n        // allow web streams only\r\n        if (!(value instanceof ReadableStream)) {\r\n            throw new TypeError('Only Blob / Files are supported for file uploads. Pass a File/Blob object');\r\n        }\r\n        // FormData doesn't support readable streams unfortunately, so read to blob\r\n        const response = new Response(value, {\r\n            headers: contentType ? { 'content-type': contentType } : {}\r\n        });\r\n        return uploadParser.response(response, options);\r\n    },\r\n    async response(response: Response, options: Rev.UploadFileOptions) {\r\n        const { body, headers } = response;\r\n        if (!response.ok || !body) {\r\n            const err = await RevError.create(response);\r\n            throw err;\r\n        }\r\n        return uploadParser.blob(\r\n            await response.blob(),\r\n            options\r\n        );\r\n    },\r\n    async blob(value: Blob | File, options: Rev.UploadFileOptions) {\r\n        let {\r\n            filename = (value as File).name ?? 'upload',\r\n            contentType = value.type ?? '',\r\n            defaultContentType\r\n        } = options;\r\n\r\n        const sanitized = sanitizeUploadOptions(filename, contentType, defaultContentType);\r\n\r\n        if (value.type !== sanitized.contentType && typeof value.slice === 'function') {\r\n            value = new File([value], sanitized.filename, { type: sanitized.contentType });\r\n        }\r\n        return {\r\n            file: value,\r\n            options: {\r\n                ...options,\r\n                ...value.size && { contentLength: value.size },\r\n                ...sanitized\r\n            }\r\n        };\r\n    },\r\n    async parse(value: Rev.FileUploadType, options: Rev.UploadFileOptions) {\r\n        if (typeof value === 'string' || value instanceof URL) {\r\n            return uploadParser.string(value, options);\r\n        }\r\n        if (value instanceof polyfills.Response) {\r\n            return uploadParser.response(value, options);\r\n        }\r\n        if (!isBlobLike(value)) {\r\n            throw new TypeError('Only Blob / Files are supported for file uploads. Pass a File/Blob object');\r\n        }\r\n        return uploadParser.blob(value, options);\r\n    }\r\n}\r\n\r\n\r\nexport function appendJSONToForm(form: FormData, fieldName: string, data: any) {\r\n    form.append(fieldName, JSON.stringify(data));\r\n}\r\n/**\r\n * This method is included for isometric support of uploading files in node.js and browser.\r\n * @param form FormData instance\r\n * @param fieldName name of field to add to form\r\n * @param file the file. Can be Blob or File on browser. On node.js it can be anything the 'form-data' package will accept\r\n * @param options optional filename, contentType and contentLength of upload. Otherwise it will try to guess based on input\r\n */\r\n\r\nexport async function appendFileToForm(form: FormData, fieldName: string, input: Rev.FileUploadType, uploadOptions: Rev.UploadFileOptions = {}): Promise<Rev.UploadFileOptions> {\r\n    const {\r\n        file,\r\n        options\r\n    } = await polyfills.uploadParser.parse(input, uploadOptions)\r\n    form.append(fieldName, file, options.filename);\r\n    return options;\r\n}\r\n/**\r\n * helper to upload multipart forms with files attached.\r\n * This is to work around issues with node.js's FormData implementation\r\n * @param rev Rev Client\r\n * @param method\r\n * @param endpoint\r\n * @param form\r\n * @param useChunkedTransfer\r\n * @param options\r\n * @returns\r\n */\r\n\r\nexport async function uploadMultipart(\r\n    rev: RevClient,\r\n    method: Rev.HTTPMethod,\r\n    endpoint: string,\r\n    form: FormData,\r\n    uploadOptions: Rev.UploadFileOptions,\r\n    options: Rev.RequestOptions = {}\r\n) {\r\n    const {\r\n        headers: optHeaders\r\n    } = options;\r\n\r\n    // coerce to Headers object, may be undefined\r\n    const headers = new polyfills.Headers(optHeaders);\r\n    options.headers = headers;\r\n\r\n    // switches to transfer encoding upload if necessary in node\r\n    // returns the body payload (on node.js it mutates options to set the body)\r\n    const data = polyfills.beforeFileUploadRequest(form, headers, uploadOptions, options);\r\n\r\n    const { body } = await rev.request(method, endpoint, data, options);\r\n    return body;\r\n}\r\n","/**\r\n * There are slight differences in handling browser and node.js environments.\r\n * This folder wraps all components that get polyfilled in node.js, as well as\r\n * allowing uploading a video from the local filesystem on node.js\r\n */\r\nimport { uploadParser } from '../utils/multipart-utils';\r\nimport type { Rev } from '../types/rev';\r\n\r\n/**\r\n * used in OAuth - get random verifier string\r\n * @param byteLength\r\n */\r\nfunction randomValues(byteLength: number) {\r\n    const values = crypto.getRandomValues(new Uint8Array(byteLength / 2));\r\n    return Array.from(values)\r\n        .map(c => c.toString(16).padStart(2, '0'))\r\n        .join('');\r\n}\r\n\r\n/**\r\n * sha256 hash function for oauth2 pkce\r\n * @param value\r\n * @returns\r\n */\r\nasync function sha256Hash(value: string) {\r\n    const bytes = new TextEncoder().encode(value);\r\n    const hashed = await crypto.subtle.digest('SHA-256', bytes);\r\n    const binary = String.fromCharCode(...(new Uint8Array(hashed)));\r\n    return btoa(binary)\r\n        .replace(/\\//g, '_')\r\n        .replace(/\\+/g, '-')\r\n        .replace(/=+$/, '');\r\n}\r\n\r\n\r\n/**\r\n * used to sign the verifier in OAuth workflow\r\n */\r\nasync function hmacSign(message: string, secret: string) {\r\n    const enc = new TextEncoder();\r\n    const cryptoKey = await crypto.subtle\r\n        .importKey(\r\n            'raw',\r\n            enc.encode(secret),\r\n            { name: 'HMAC', hash: 'SHA-256' },\r\n            true,\r\n            ['sign']\r\n        );\r\n    const signed = await crypto.subtle.sign('HMAC', cryptoKey, enc.encode(message));\r\n    return btoa(String.fromCharCode(...new Uint8Array(signed)));\r\n}\r\n\r\nexport const polyfills: RevPolyfills = {\r\n    AbortController: globalThis.AbortController,\r\n    AbortSignal: globalThis.AbortSignal,\r\n    createAbortError(message: string): Error {\r\n        return new DOMException(message, 'AbortError');\r\n    },\r\n    fetch(...args: Parameters<typeof fetch>) { return globalThis.fetch(...args); },\r\n    FormData: globalThis.FormData,\r\n    File: globalThis.File,\r\n    Headers: globalThis.Headers,\r\n    Request: globalThis.Request,\r\n    Response: globalThis.Response,\r\n    uploadParser,\r\n    randomValues,\r\n    sha256Hash,\r\n    hmacSign,\r\n    parseUrl(value: string | URL) {\r\n        return value instanceof URL ? value : new URL(value, 'invalid://');\r\n    },\r\n    beforeFileUploadRequest(form: FormData, headers: Headers, uploadOptions: Rev.UploadFileOptions, options: Rev.RequestOptions): FormData | undefined {\r\n        return form;\r\n    },\r\n    asPlatformStream<TIn = any, TOut = TIn>(stream: TIn): TOut {\r\n        // nothing - this is used for fixing node's stream response\r\n        return stream as any;\r\n    },\r\n    asWebStream<TIn = any>(stream: TIn): ReadableStream {\r\n        // nothing - this is used for fixing node's stream response\r\n        return stream as any;\r\n    }\r\n}\r\nexport default polyfills;\r\n\r\n/**\r\n * ADVANCED - this includes library dependencies that may need to be overridden based on the current platform.\r\n * @category Utilities\r\n */\r\nexport interface RevPolyfills {\r\n    AbortController: typeof AbortController,\r\n    AbortSignal: typeof AbortSignal,\r\n    createAbortError(message: string): Error;\r\n    fetch(input: string | URL | Request, init?: RequestInit | undefined): Promise<Response>;\r\n    FormData: typeof FormData;\r\n    File: typeof File;\r\n    Headers: typeof Headers;\r\n    Request: typeof Request;\r\n    Response: typeof Response;\r\n    parseUrl(value: string | URL): URL;\r\n    uploadParser: {\r\n        string(value: string | URL, options: Rev.UploadFileOptions): Promise<{\r\n            file: Blob | File;\r\n            options: Rev.UploadFileOptions;\r\n        }>;\r\n        localFile(value: URL, options: Rev.UploadFileOptions): Promise<{\r\n            file: Blob | File;\r\n            options: Rev.UploadFileOptions;\r\n        }>\r\n        stream(value: AsyncIterable<Uint8Array>, options: Rev.UploadFileOptions): Promise<{\r\n            file: Blob | File;\r\n            options: Rev.UploadFileOptions;\r\n        }>;\r\n        response(response: Response, options: Rev.UploadFileOptions): Promise<{\r\n            file: Blob | File;\r\n            options: Rev.UploadFileOptions;\r\n        }>;\r\n        blob(value: Blob | File, options: Rev.UploadFileOptions): Promise<{\r\n            file: Blob | File;\r\n            options: Rev.UploadFileOptions;\r\n        }>;\r\n        parse(value: Rev.FileUploadType, options: Rev.UploadFileOptions): Promise<{\r\n            file: Blob | File;\r\n            options: Rev.UploadFileOptions;\r\n        }>;\r\n    };\r\n    randomValues(byteLength: number): string;\r\n    sha256Hash(value: string): Promise<string>;\r\n    hmacSign(message: string, secret: string): Promise<string>;\r\n    beforeFileUploadRequest(form: FormData, headers: Headers, uploadOptions: Rev.UploadFileOptions, options: Rev.RequestOptions): FormData | undefined;\r\n    asPlatformStream<TIn = any, TOut = TIn>(stream: TIn): TOut;\r\n    asWebStream<TIn = any>(stream: TIn): ReadableStream;\r\n}\r\n\r\n// logic for overriding polyfills before first network request\r\ntype InitializeCallback = (polyfills: RevPolyfills) => Promise<void> | void;\r\nlet isPendingInitialize = false;\r\nlet initializePromise: Promise<void> | undefined = undefined;\r\nconst pendingInitialize: InitializeCallback[] = [];\r\n\r\nexport function shouldInitialize() {\r\n    return !!isPendingInitialize;\r\n}\r\n\r\nexport function onInitialize() {\r\n    if (!isPendingInitialize) {\r\n        return;\r\n    }\r\n\r\n    initializePromise ||= (async () => {\r\n        while (pendingInitialize.length > 0) {\r\n            const pending = pendingInitialize.shift();\r\n            if (typeof pending !== 'function') continue;\r\n            try {\r\n                const overrides = await pending(polyfills);\r\n                Object.assign(polyfills, overrides);\r\n            } catch (error) {\r\n                // ignore\r\n            }\r\n        }\r\n        isPendingInitialize = false;\r\n        initializePromise = undefined;\r\n    })();\r\n\r\n    return initializePromise;\r\n}\r\n\r\n/**\r\n * ADVANCED - override the underlying implementation used when constructing requests/other primitive values.\r\n * This is used internally and should not be used unless you absolutely need to change some particular behavior (for example, using a different `fetch` implementation)\r\n * @param overrideCallback\r\n */\r\nexport function setPolyfills(overrideCallback: (polyfills: RevPolyfills) => Promise<void> | void) {\r\n    pendingInitialize.push(overrideCallback);\r\n    isPendingInitialize = true;\r\n}\r\n","import polyfills from '../interop/polyfills';\r\n\r\nconst ONE_MINUTE = 60 * 1000;\r\n\r\n/** @category Utilities */\r\nexport interface RateLimitOptions {\r\n    /**\r\n     * how many to allow in parallel in any given interval\r\n     * @default 1\r\n     */\r\n    limit?: number,\r\n    /**\r\n     * interval in milliseconds\r\n     */\r\n    interval?: number,\r\n    /**\r\n     * set limit to X per second\r\n     */\r\n    perSecond?: number,\r\n    /**\r\n     * set limit to X per minute (can be fraction, i.e. 0.5 for 1 every 2 minutes)\r\n     */\r\n    perMinute?: number,\r\n    /**\r\n     * set limit to X per hour\r\n     */\r\n    perHour?: number,\r\n    /**\r\n     * cancel with AbortController\r\n     */\r\n    signal?: AbortSignal,\r\n}\r\n\r\n/**\r\n * @category Utilities\r\n * @inline\r\n */\r\nexport type ThrottledFunction<T extends (...args: any[]) => any> = (\r\n    (...args: Parameters<T>) => ReturnType<T> extends PromiseLike<infer Return> ? Promise<Return> : Promise<ReturnType<T>>\r\n) & {\r\n    /**\r\n     * Abort pending executions. All unresolved promises are rejected with a `AbortError` error.\r\n     * @param {string} [message] - message parameter for rejected AbortError\r\n     * @param {boolean} [dispose] - remove abort signal listener as well\r\n     */\r\n    abort: (message?: string, dispose?: boolean) => void;\r\n};\r\n\r\n/** @inline */\r\ntype RateLimitOptionsWithFn<T> = RateLimitOptions & {\r\n\r\n    /**\r\n     * function to rate limit\r\n     */\r\n    fn: T\r\n}\r\n\r\ntype TimeoutRef = ReturnType<typeof setTimeout>;\r\n\r\nfunction rateLimit<T extends (...args: any) => any>(options: RateLimitOptionsWithFn<T>): ThrottledFunction<T>;\r\nfunction rateLimit<T extends (...args: any) => any>(fn: T, options: RateLimitOptions): ThrottledFunction<T>;\r\nfunction rateLimit<T extends (...args: any) => any>(fn: T | RateLimitOptionsWithFn<T>, options?: RateLimitOptions): ThrottledFunction<T>;\r\n\r\n/**\r\n *\r\n * adapted from {@link https://github.com/sindresorhus/p-throttle | p-throttle}\r\n * @param fn\r\n * @param options\r\n * @returns\r\n */\r\nfunction rateLimit<T extends (...args: any) => any> (fn: T | RateLimitOptionsWithFn<T>, options: RateLimitOptions = {}) {\r\n    if (fn && (typeof fn === 'object')) {\r\n        options = Object.assign({}, fn, options);\r\n        fn = undefined as unknown as T;\r\n    }\r\n    if (!fn) {\r\n        fn = (options as RateLimitOptionsWithFn<T>).fn;\r\n    }\r\n\r\n    if (typeof fn !== 'function') {\r\n        throw new TypeError('Rate limit function is not a function');\r\n    }\r\n\r\n    const {\r\n        perSecond,\r\n        perMinute,\r\n        perHour,\r\n        signal\r\n    } = options;\r\n\r\n    let limit = parseFloat(options.limit as unknown as string) || 1;\r\n    let interval = parseInt(options.interval as unknown as string, 10);\r\n\r\n    if (perSecond) {\r\n        limit = parseFloat(perSecond as unknown as string);\r\n        interval = 1000;\r\n    }\r\n    if (perMinute) {\r\n        limit = parseFloat(perMinute as unknown as string);\r\n        interval = ONE_MINUTE;\r\n    }\r\n    if (perHour) {\r\n        limit = parseFloat(perHour as unknown as string);\r\n        interval = ONE_MINUTE * 60;\r\n    }\r\n\r\n    if (limit < 1) {\r\n        interval /= limit;\r\n        limit = 1;\r\n    } else {\r\n        // just make sure it isn't a faction for some silly reason\r\n        limit = Math.floor(limit);\r\n    }\r\n\r\n    if (!Number.isFinite(limit)) {\r\n        throw new TypeError(`Invalid limit ${limit}`);\r\n    }\r\n\r\n    if (!Number.isFinite(interval) || interval <= 0) {\r\n        throw new TypeError('Invalid interval option');\r\n    }\r\n\r\n    const queue:Map<TimeoutRef, (err: Error) => any> = new Map();\r\n\r\n    let currentTick = 0;\r\n    let activeCount = 0;\r\n\r\n    type Return = ReturnType<T> extends PromiseLike<infer R> ? Promise<R> : Promise<ReturnType<T>>;\r\n\r\n    const throttled = function (...args: Parameters<T>) {\r\n        let timeout: TimeoutRef;\r\n        return new Promise((resolve, reject) => {\r\n            const execute = () => {\r\n                resolve((fn as T).apply(null, args));\r\n                queue.delete(timeout);\r\n            };\r\n\r\n            const now = Date.now();\r\n\r\n            if ((now - currentTick) > interval) {\r\n                activeCount = 1;\r\n                currentTick = now;\r\n            } else if (activeCount < limit) {\r\n                activeCount++;\r\n            } else {\r\n                currentTick += interval;\r\n                activeCount = 1;\r\n            }\r\n\r\n            timeout = setTimeout(execute, currentTick - now);\r\n\r\n            // used for sending cancel error\r\n            queue.set(timeout, reject);\r\n        }) as Return;\r\n    };\r\n\r\n    let abortHandler = signal\r\n        ? () => throttled.abort(signal.reason ? `${signal.reason}` : undefined, true)\r\n        : undefined;\r\n\r\n    throttled.abort = (message: string = 'Cancelled rate-limit queue', dispose: boolean = false) => {\r\n        if (dispose) {\r\n            signal?.removeEventListener('abort', abortHandler!);\r\n        }\r\n        for (const [timeout, reject] of queue.entries()) {\r\n            clearTimeout(timeout);\r\n            reject(polyfills.createAbortError(message));\r\n        }\r\n\r\n        queue.clear();\r\n    };\r\n\r\n    signal?.addEventListener('abort', abortHandler!);\r\n\r\n    return throttled;\r\n}\r\n\r\nexport default rateLimit;\r\n","import rateLimit from \"./rate-limit\";\r\nimport type {ThrottledFunction} from \"./rate-limit\";\r\n\r\n/**\r\n * @inline\r\n */\r\nexport enum RateLimitEnum {\r\n    Get = 'get',\r\n    Post = 'post',\r\n    SearchVideos = 'searchVideos',\r\n    UploadVideo = 'uploadVideo',\r\n    AuditEndpoints = 'auditEndpoint',\r\n    UpdateVideoMetadata = 'updateVideo',\r\n    GetUsersByLoginDate = 'loginReport',\r\n    GetVideoDetails = 'videoDetails',\r\n    GetWebcastAttendeesRealtime = 'attendeesRealtime',\r\n    GetVideoViewReport = 'viewReport'\r\n}\r\n\r\nexport type RateLimits = { [K in RateLimitEnum]?: number }\r\nexport type RateLimitQueues = { [K in RateLimitEnum]?: () => Promise<void> };\r\n\r\nexport const defaultRateLimits: Required<RateLimits> = {\r\n    [RateLimitEnum.Get]: 24000,\r\n    [RateLimitEnum.Post]: 3600,\r\n    [RateLimitEnum.SearchVideos]: 120,\r\n    [RateLimitEnum.UploadVideo]: 30,\r\n    [RateLimitEnum.UpdateVideoMetadata]: 30,\r\n    [RateLimitEnum.GetVideoDetails]: 2000,\r\n    [RateLimitEnum.GetWebcastAttendeesRealtime]: 2,\r\n    [RateLimitEnum.AuditEndpoints]: 60,\r\n    [RateLimitEnum.GetUsersByLoginDate]: 10,\r\n    [RateLimitEnum.GetVideoViewReport]: 120,\r\n};\r\n\r\n// passthrough placeholder for ratelimit\r\nconst fn = () => Promise.resolve();\r\n\r\nexport function normalizeRateLimitOptions(rateLimits?: boolean | RateLimits): RateLimits {\r\n    return {\r\n        // include defaults if true or object\r\n        ...rateLimits && defaultRateLimits,\r\n        ...(typeof rateLimits === 'object') && rateLimits\r\n    };\r\n}\r\n\r\nexport function makeQueue(key: RateLimitEnum, value?: number) {\r\n    const defaultValue = defaultRateLimits[key];\r\n    const perMinute = value ?? defaultValue;\r\n    // 0, -1, null or Infinity get treated as no rate limiting\r\n    if (!isFinite(perMinute) || perMinute <= 0) {\r\n        return fn;\r\n    }\r\n    // split into 5 sec increments to even out request flow\r\n    const limit = perMinute / 12;\r\n    const interval = 5000;\r\n    return rateLimit({ fn, limit, interval });\r\n}\r\n\r\n/**\r\n * create a dict of rate limited-locks based on input options\r\n * @param rateLimits\r\n * @returns\r\n */\r\nexport function makeQueues(rateLimits: RateLimits = {}): RateLimitQueues {\r\n    const entries = (Object.keys(defaultRateLimits) as RateLimitEnum[])\r\n        .map(key => [key, makeQueue(key, rateLimits[key])]);\r\n\r\n    return Object.fromEntries(entries);\r\n}\r\n\r\nexport function clearQueues(rateLimits: RateLimitQueues, message?: string) {\r\n    const fns = Object.values(rateLimits) as Array<Partial<ThrottledFunction<() => void>>>;\r\n    fns.forEach(fn => fn.abort?.(message));\r\n}\r\n","export {default as rateLimit, type RateLimitOptions} from './rate-limit';\r\nexport {RateLimitEnum} from './rate-limit-queues';\r\nexport type {RateLimits} from './rate-limit-queues';\r\n\r\nexport * from './is-utils';\r\n\r\nexport function asValidDate(val: string | Date | undefined): Date | undefined;\r\nexport function asValidDate(val: string | Date | undefined, defaultValue: Date): Date;\r\nexport function asValidDate(val: string | Date | undefined, defaultValue?: Date): Date | undefined {\r\n    if (!val) {\r\n        return defaultValue;\r\n    }\r\n    if (!(val instanceof Date)) {\r\n        val = new Date(val);\r\n    }\r\n    return isNaN(val.getTime())\r\n    ? defaultValue\r\n    : val;\r\n}\r\n\r\n/**\r\n * Retry a function multiple times, sleeping before attempts\r\n * @param {() => Promise<T>} fn function to attempt. Return value if no error thrown\r\n * @param {(err: Error, attempt: number) => boolean} [shouldRetry] callback on error.\r\n * @param {number} [maxAttempts] maximum number of retry attempts before throwing error\r\n * @param {number} [sleepMilliseconds] milliseconds to wait between attempts\r\n * @returns {Promise<T>}\r\n */\r\nexport async function retry<T, E extends Error>(fn: () => Promise<T>, shouldRetry: (err: E, attempt?: number) => boolean = () => true, maxAttempts: number = 3, sleepMilliseconds: number = 1000) {\r\n    let attempt = 0;\r\n    while (attempt < maxAttempts) {\r\n        try {\r\n            const result = await fn();\r\n            return result;\r\n        } catch (err: any) {\r\n            attempt += 1;\r\n            if (attempt >= maxAttempts || !shouldRetry(err, attempt)) {\r\n                throw err;\r\n            }\r\n            await sleep(sleepMilliseconds);\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * delay async execution, with optional early exit using abort signal\r\n * @param ms\r\n * @param signal\r\n * @returns\r\n */\r\nexport async function sleep(ms: number, signal?: AbortSignal) {\r\n    return new Promise<void>(done => {\r\n        let timer: ReturnType<typeof setTimeout>;\r\n        const cleanup = () => {\r\n            clearTimeout(timer);\r\n            signal?.removeEventListener('abort', cleanup);\r\n            done();\r\n        };\r\n        timer = setTimeout(cleanup, ms);\r\n        signal?.addEventListener('abort', cleanup);\r\n    });\r\n}\r\n\r\n/** try to parse as json */\r\nexport function tryParseJson(val: string): any {\r\n    if (val !== 'null' && val) {\r\n        try {\r\n            return JSON.parse(val);\r\n        } catch (err) {\r\n            // nothing\r\n        }\r\n    }\r\n    return null;\r\n};\r\n","import { isPlainObject, tryParseJson } from './utils';\r\n\r\n/**\r\n * A custom error for parsing and handling Error HTTP responses from Rev.\r\n * @category Getting Started\r\n */\r\nexport class RevError extends Error {\r\n    /**\r\n     * HTTP Status Code\r\n     */\r\n    status: number;\r\n    /**\r\n     * Request URL/endpoint\r\n     */\r\n    url: string;\r\n    /**\r\n     * Rev-specific error code\r\n     */\r\n    code: string;\r\n    /**\r\n     * Additional error message returned by Rev API\r\n     */\r\n    detail: string;\r\n    /**\r\n     * @hidden\r\n     * @param response\r\n     * @param body\r\n     */\r\n    constructor(response: Response, body: { [key: string]: any; } | string) {\r\n        const {\r\n            status = 500,\r\n            statusText = '',\r\n            url\r\n        } = response;\r\n        super(`${status} ${statusText}`);\r\n        // Chrome/node specific function\r\n        if ('captureStackTrace' in Error) {\r\n            (Error as any).captureStackTrace(this, this.constructor);\r\n        }\r\n\r\n        this.status = status;\r\n        this.url = url;\r\n        this.code = `${status}`;\r\n        this.detail = statusText;\r\n        // Some Rev API responses include additional details in its body\r\n        if (isPlainObject<Record<string, string>>(body)) {\r\n            if (body.code) {\r\n                this.code = body.code;\r\n            }\r\n            if (body.detail) {\r\n                this.detail = body.detail;\r\n            }\r\n        } else if (typeof body === 'string') {\r\n            body = body.trim();\r\n            // try to parse as JSON\r\n            if (body.startsWith('{')) {\r\n                const { code, detail } = tryParseJson(body) || { };\r\n                if (code) { this.code = code; }\r\n                if (detail) { this.detail = detail; }\r\n            } else if (this.status === 429) {\r\n                this.detail = 'Too Many Requests';\r\n            } else if (/^(<!DOCTYPE|<html)/.test(body)) {\r\n                // if html then strip out the extra cruft\r\n                this.detail = body\r\n                    .replace(/.*<body>\\s+/s, '')\r\n                    .replace(/<\\/body>.*/s, '')\r\n                    .slice(0, 256);\r\n            }\r\n        }\r\n    }\r\n    /** @ignore */\r\n    override get name() {\r\n        return 'RevError';\r\n    }\r\n    /** @ignore */\r\n    get [Symbol.toStringTag]() {\r\n        return 'RevError';\r\n    }\r\n    /**\r\n     * Consume a HTTP Response's body to create a new Error instance\r\n     * @param response\r\n     * @returns\r\n     */\r\n    static async create(response: Response) {\r\n        let body: any;\r\n\r\n        try {\r\n            // retrieve body - constructor will decode as json\r\n            body = await response.text();\r\n        } catch (err) {\r\n            body = {\r\n                code: 'Unknown',\r\n                detail: `Unable to parse error response body: ${err}`\r\n            };\r\n        }\r\n        return new RevError(response, body);\r\n    }\r\n}\r\n\r\n/**\r\n * This error is not very common - when calling Search APIs this may be thrown if paging through search results takes too long.\r\n * @category Utilities\r\n */\r\nexport class ScrollError extends Error {\r\n    /**\r\n     * HTTP Status Code\r\n     */\r\n    status: number;\r\n\r\n    /**\r\n     * Rev-specific error code\r\n     */\r\n    code: string;\r\n    /**\r\n     * Additional error message returned by Rev API\r\n     */\r\n    detail: string;\r\n    /**\r\n     * @hidden\r\n     * @param status\r\n     * @param code\r\n     * @param detail\r\n     */\r\n    constructor(status: number = 408, code: string = 'ScrollExpired', detail: string = 'Timeout while fetching all results in search request') {\r\n        super('Search Scroll Expired');\r\n        Error.captureStackTrace(this, this.constructor);\r\n        this.status = status;\r\n        this.code = code;\r\n        this.detail = detail;\r\n    }\r\n    /** @ignore */\r\n    override get name() {\r\n        return this.constructor.name;\r\n    }\r\n    /** @ignore */\r\n    get [Symbol.toStringTag]() {\r\n        return this.constructor.name;\r\n    }\r\n}\r\n","import type { Rev } from '../types/rev';\r\n\r\n/**\r\n * A page of results returned from `.nextPage()`\r\n * @category Utilities\r\n */\r\nexport interface IPageResponse<T> {\r\n    items: T[],\r\n    done: boolean,\r\n    total?: number,\r\n    pageCount?: number,\r\n    error?: Error\r\n}\r\n\r\n/**\r\n * Interface to iterate through results from API endpoints that return results in pages.\r\n * Use in one of three ways:\r\n * 1) Get all results as an array: `await request.exec() == <array>`\r\n * 2) Get each page of results: `await request.nextPage() == { current, total, items: <array> }`\r\n * 3) Use for await to get all results one at a time: `for await (let hit of request) { }`\r\n * @category Utilities\r\n */\r\nexport abstract class PagedRequest<ItemType> implements Rev.ISearchRequest<ItemType> {\r\n    current: number;\r\n    total: number | undefined;\r\n    done: boolean;\r\n    options: Required<Rev.SearchOptions<ItemType>>;\r\n    /**\r\n     * @hidden\r\n     * @param options\r\n     */\r\n    constructor(options: Rev.SearchOptions<ItemType> = {}) {\r\n        this.options = {\r\n            maxResults: Infinity,\r\n            onProgress: (items: ItemType[], current: number, total?: number) => {},\r\n            onError: (err => { throw err; }),\r\n            onScrollError: (err => {\r\n                console.warn(\"DEPRECATED: use onError instead of onScrollError with rev search requests\");\r\n                this.options.onError(err);\r\n            }),\r\n            signal: undefined as any,\r\n            ...options\r\n        };\r\n\r\n        this.current = 0;\r\n        this.total = undefined;\r\n        this.done = false;\r\n    }\r\n    protected abstract _requestPage(): Promise<IPageResponse<ItemType>>;\r\n    /**\r\n     * Get the next page of results from API\r\n     */\r\n    async nextPage(): Promise<Rev.SearchPage<ItemType>> {\r\n        const {\r\n            onProgress,\r\n            onError,\r\n            signal\r\n        } = this.options;\r\n\r\n        if (signal?.aborted) this.done = true;\r\n\r\n        if (this.done) {\r\n            return {\r\n                current: this.current,\r\n                total: this.current,\r\n                done: this.done,\r\n                items: []\r\n            };\r\n        }\r\n\r\n        const page = await this._requestPage();\r\n        const result = this._parsePage(page);\r\n\r\n        let {\r\n            current,\r\n            items,\r\n            total,\r\n            done,\r\n            error\r\n        } = result;\r\n\r\n        onProgress(items, current, total);\r\n\r\n        if (error) {\r\n            onError(error);\r\n        }\r\n\r\n        return {\r\n            current,\r\n            items,\r\n            total,\r\n            done\r\n        };\r\n    }\r\n    /**\r\n     * update internal variables based on API response\r\n     * @param page\r\n     * @returns\r\n     */\r\n    protected _parsePage(page: IPageResponse<ItemType>) {\r\n        const { maxResults } = this.options;\r\n\r\n        let {\r\n            items = [],\r\n            done = this.done,\r\n            total,\r\n            pageCount,\r\n            error,\r\n        } = page;\r\n\r\n        // let request function set done status\r\n        if (done) {\r\n            this.done = true;\r\n        }\r\n\r\n        // update total\r\n        if (isFinite(total!)) {\r\n            this.total = Math.min(total!, maxResults);\r\n        }\r\n\r\n        if (!pageCount) {\r\n            pageCount = items.length;\r\n        }\r\n\r\n        const current = this.current;\r\n\r\n        // limit results to specified max results\r\n        if (current + pageCount >= maxResults) {\r\n            pageCount = maxResults - current;\r\n            items = items.slice(0, pageCount);\r\n            this.done = true;\r\n        }\r\n\r\n        this.current += pageCount;\r\n\r\n        if (this.total != undefined && this.current >= this.total) {\r\n            this.done = true;\r\n        }\r\n\r\n        if (this.done) {\r\n            // set total to current for results where not otherwise known in advance\r\n            this.total = this.current;\r\n        }\r\n\r\n        if (error) {\r\n            this.done = true;\r\n        }\r\n\r\n        return {\r\n            current,\r\n            total: this.total,\r\n            done: this.done,\r\n            error,\r\n            items\r\n        };\r\n    }\r\n    /**\r\n     * Go through all pages of results and return as an array.\r\n     * TIP: Use the {maxResults} option to limit the maximum number of results\r\n     *\r\n     */\r\n    async exec(): Promise<ItemType[]> {\r\n        const results: ItemType[] = [];\r\n        // use async iterator\r\n        for await (let hit of this) {\r\n            results.push(hit);\r\n        }\r\n        return results;\r\n    }\r\n    /**\r\n     * Supports iterating through results using for await...\r\n     * @see [MDN Docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of)\r\n     */\r\n    async* [Symbol.asyncIterator]() {\r\n        const {signal} = this.options;\r\n        do {\r\n            const {\r\n                items\r\n            } = await this.nextPage();\r\n\r\n            for await (let hit of items) {\r\n                if (signal?.aborted) break;\r\n                yield hit;\r\n            }\r\n        } while (!this.done);\r\n    }\r\n}\r\n\r\n","import { ScrollError } from '../rev-error';\r\nimport type { RevClient } from '../rev-client';\r\nimport type { Rev } from '../types/index';\r\nimport { type IPageResponse, PagedRequest } from './paged-request';\r\n\r\nexport async function decodeBody(response: Response, acceptType?: string | null) {\r\n    const contentType = response.headers.get('Content-Type') || acceptType || '';\r\n    const contentLength = response.headers.get('Content-Length');\r\n\r\n    if (contentType.startsWith('application/json') && contentLength !== '0') {\r\n        try {\r\n            return await response.json();\r\n        } catch (err) {\r\n            // keep going\r\n        }\r\n    }\r\n\r\n    if (contentType.startsWith('text')) {\r\n        return response.text();\r\n    }\r\n\r\n    return response.body;\r\n}\r\n\r\n/**\r\n * Interface to iterate through results from API endpoints that return results in pages.\r\n * Use in one of three ways:\r\n * 1) Get all results as an array: `await request.exec() == <array>`\r\n * 2) Get each page of results: `await request.nextPage() == { current, total, items: <array> }`\r\n * 3) Use for await to get all results one at a time: `for await (let hit of request) { }`\r\n * @category Utilities\r\n */\r\nexport class SearchRequest<T> extends PagedRequest<T> {\r\n    declare options: Required<Rev.SearchOptions<T>>;\r\n    private query: Record<string, any>;\r\n    private _reqImpl: () => Promise<IPageResponse<T>>;\r\n    constructor(\r\n        rev: RevClient,\r\n        searchDefinition: Rev.SearchDefinition<T>,\r\n        query: Record<string, any> = {},\r\n        options: Rev.SearchOptions<T> = {}\r\n    ) {\r\n        super({\r\n            onProgress: (items: T[], current: number, total?: number | undefined) => {\r\n                const {hitsKey} = searchDefinition;\r\n                rev.log('debug', `searching ${hitsKey}, ${current}-${current + items.length} of ${total}...`);\r\n            },\r\n            onError: (err => { throw err; }),\r\n            ...options\r\n        });\r\n\r\n        // make copy of query object\r\n        const {\r\n            scrollId: _ignore,\r\n            ...queryOpt\r\n        } = query;\r\n        this.query = queryOpt;\r\n\r\n        this._reqImpl = this._buildReqFunction(rev, searchDefinition);\r\n\r\n        this.current = 0;\r\n        this.total = Infinity;\r\n        this.done = false;\r\n    }\r\n    protected _requestPage() {\r\n        return this._reqImpl();\r\n    }\r\n    private _buildReqFunction(rev: RevClient, searchDefinition: Rev.SearchDefinition<T>) {\r\n        const {\r\n            endpoint,\r\n            totalKey,\r\n            hitsKey,\r\n            isPost = false,\r\n            request,\r\n            transform\r\n        } = searchDefinition;\r\n\r\n        const requestFn = request || (isPost\r\n            ? rev.post.bind(rev)\r\n            : rev.get.bind(rev)\r\n        );\r\n\r\n        return async () => {\r\n\r\n            const response: Record<string, any> = await requestFn(endpoint, this.query, { responseType: 'json' });\r\n\r\n            let {\r\n                scrollId,\r\n                [totalKey]: total,\r\n                [hitsKey]: rawItems = [],\r\n                statusCode,\r\n                statusDescription\r\n            } = response;\r\n\r\n            let done = false;\r\n\r\n            this.query.scrollId = scrollId;\r\n            if (!scrollId) {\r\n                done = true;\r\n            }\r\n\r\n            const items: T[] = (typeof transform === 'function')\r\n                ? await Promise.resolve(transform(rawItems))\r\n                : rawItems;\r\n\r\n            if (items.length === 0) {\r\n                done = true;\r\n            }\r\n\r\n            // check for error response\r\n            const error = (statusCode >= 400 && !!statusDescription)\r\n                ? new ScrollError(statusCode, statusDescription)\r\n                : undefined;\r\n\r\n            return {\r\n                total,\r\n                done,\r\n                pageCount: rawItems.length,\r\n                items,\r\n                error\r\n            };\r\n        };\r\n    }\r\n}\r\n","import type { Admin, Rev, Role, RegistrationField } from '../types/index';\r\nimport type { RevClient } from '../rev-client';\r\nimport { SearchRequest } from '../utils/request-utils';\r\n\r\n/**\r\n * if true allow storing/retrieving from cached values. 'Force' means refresh value saved in cache. false means bypass cache\r\n * @inline\r\n * @ignore\r\n */\r\ntype CacheOption = boolean | 'Force'\r\n\r\n/** @ignore */\r\nexport type API = ReturnType<typeof adminAPIFactory>;\r\n/**\r\n * The Admin API methods\r\n * @category Administration\r\n * @group API\r\n * @see [Administration API Docs](https://revdocs.vbrick.com/reference/getroles)\r\n */\r\nexport interface AdminAPI extends API {}\r\n\r\n/** @ignore */\r\nexport default function adminAPIFactory(rev: RevClient) {\r\n    let roles: Role.Details[];\r\n    let customFields: Admin.CustomField[];\r\n\r\n    const adminAPI = {\r\n        /**\r\n        * get mapping of role names to role IDs\r\n        * @param cache - if true allow storing/retrieving from cached values. 'Force' means refresh value saved in cache\r\n        */\r\n        async roles(cache: CacheOption = true): Promise<Role.Details[]> {\r\n            // retrieve from cached values if already stored. otherwise get from API\r\n            // if cache is 'Force' then refresh from\r\n            if (roles && cache === true) {\r\n                return roles;\r\n            }\r\n            const response = await rev.get('/api/v2/users/roles');\r\n            if (cache) {\r\n                roles = response;\r\n            }\r\n            return response;\r\n        },\r\n        /**\r\n        * Get a Role (with the role id) based on its name\r\n        * @param name Name of the Role OR RoleType. You can specify the specific enum value (preferred, only Rev 7.53+), or the localized string value in the current user's language, i.e. \"Media Viewer\" for english\r\n        * @param fromCache - if true then use previously cached Role listing (more efficient)\r\n        */\r\n        async getRoleByName(name: Role.RoleType | Role.RoleName, fromCache: CacheOption = true): Promise<Role> {\r\n            const roles = await adminAPI.roles(fromCache);\r\n            const role = roles.find(r => r.roleType === name || r.name === name);\r\n            if (!role) {\r\n                throw new TypeError(`Invalid Role Name ${name}. Valid values are: ${roles.flatMap(r => r.roleType ? [r.roleType, r.name] : [r.name]).join(', ')}`);\r\n            }\r\n            return {\r\n                id: role.id,\r\n                name: role.roleType || role.name\r\n            };\r\n        },\r\n        /**\r\n        * get list of custom fields\r\n        * @param cache - if true allow storing/retrieving from cached values. 'Force' means refresh value saved in cache\r\n        */\r\n        async customFields(cache: CacheOption = true): Promise<Admin.CustomField[]> {\r\n            // retrieve from cached values if already stored. otherwise get from API\r\n            // if cache is 'Force' then refresh from\r\n            if (customFields && cache === true) {\r\n                return customFields;\r\n            }\r\n            const response = await rev.get('/api/v2/video-fields', undefined, { responseType: 'json' });\r\n            if (cache) {\r\n                customFields = response;\r\n            }\r\n            return response;\r\n        },\r\n        /**\r\n        * Get a Custom Field based on its name\r\n        * @param name name of the Custom Field\r\n        * @param fromCache if true then use previously cached Role listing (more efficient)\r\n        */\r\n        async getCustomFieldByName(name: string, fromCache: CacheOption = true): Promise<Admin.CustomField> {\r\n            const customFields = await adminAPI.customFields(fromCache);\r\n            const field = customFields.find(cf => cf.name === name);\r\n            if (!field) {\r\n                throw new TypeError(`Invalid Custom Field Name ${name}. Valid values are: ${customFields.map(cf => cf.name).join(', ')}`);\r\n            }\r\n            return field;\r\n        },\r\n        async brandingSettings(): Promise<Admin.BrandingSettings> {\r\n            return rev.get('/api/v2/accounts/branding-settings');\r\n        },\r\n        async webcastRegistrationFields(): Promise<RegistrationField & { id: string }> {\r\n            const response = await rev.get('/api/v2/accounts/webcast-registration-fields');\r\n            return response.registrationFields;\r\n        },\r\n        async createWebcastRegistrationField(registrationField: RegistrationField.Request): Promise<string> {\r\n            const response = await rev.post('/api/v2/accounts/webcast-registration-fields', registrationField);\r\n            return response.fieldId;\r\n        },\r\n        async updateWebcastRegistrationField(fieldId: string, registrationField: Partial<RegistrationField.Request>): Promise<void> {\r\n            return rev.put(`/api/v2/accounts/webcast-registration-fields/${fieldId}`, registrationField);\r\n        },\r\n        async deleteWebcastRegistrationField(fieldId: string): Promise<void> {\r\n            return rev.delete(`/api/v2/accounts/webcast-registration-fields/${fieldId}`);\r\n        },\r\n        listIQCreditsUsage(query: { startDate?: string | Date, endDate?: string | Date }, options?: Rev.SearchOptions<Admin.IQCreditsSession>): Rev.ISearchRequest<Admin.IQCreditsSession> {\r\n            const searchDefinition: Rev.SearchDefinition<Admin.IQCreditsSession> = {\r\n                endpoint: `/api/v2/analytics/accounts/iq-credits-usage`,\r\n                totalKey: 'total',\r\n                hitsKey: 'sessions'\r\n            };\r\n            return new SearchRequest<Admin.IQCreditsSession>(rev, searchDefinition, query, options);\r\n        },\r\n        /**\r\n        * get system health - returns 200 if system is active and responding, otherwise throws error\r\n        */\r\n        async verifySystemHealth(): Promise<boolean> {\r\n            await rev.get('/api/v2/system-health');\r\n            return true;\r\n        },\r\n        /**\r\n        * gets list of scheduled maintenance windows\r\n        */\r\n        async maintenanceSchedule(): Promise<{start: string, end: string}[]> {\r\n            const {schedules} = await rev.get('/api/v2/maintenance-schedule');\r\n            return schedules;\r\n        },\r\n        /**\r\n         * gets the user location service URL\r\n         */\r\n        async userLocationService(): Promise<{ enabled: boolean, locationUrls: string[] }> {\r\n            return rev.get('/api/v2/user-location');\r\n        },\r\n        /**\r\n         * returns an array of all expiration rules\r\n         */\r\n        async expirationRules(): Promise<Admin.ExpirationRule[]> {\r\n            return rev.get('/api/v2/expiration-rules');\r\n        },\r\n        async featureSettings(videoId?: string): Promise<Admin.FeatureSettings> {\r\n            const params = videoId ? { videoId } : undefined;\r\n            return rev.get('/api/v2/videos/feature-settings', params);\r\n        }\r\n    };\r\n    return adminAPI;\r\n}\r\n","/**\r\n * simple helper function to parse CSV data into JSON\r\n */\r\nexport function parseCSV(raw: string) {\r\n    raw = raw.replace(/(\\r\\n|\\n|\\r)/gm, '\\n').replace(/\\n$/g, '');\r\n\r\n    let cur = '';\r\n    let inQuote = false;\r\n    let fieldQuoted = false;\r\n    let field: string | undefined = '';\r\n    let row: (string | undefined)[] = [];\r\n    let out: (string | undefined)[][] = [];\r\n    let i: number;\r\n    const n = raw.length;\r\n\r\n    function processField(field: string) {\r\n        if (fieldQuoted) { return field; }\r\n        if (field === '') { return undefined; }\r\n        return field.trim();\r\n    }\r\n\r\n    for (i = 0; i < n; i += 1) {\r\n        cur = raw.charAt(i);\r\n\r\n        if (!inQuote && (cur === ',' || cur === '\\n')) {\r\n            field = processField(field);\r\n            row.push(field);\r\n            if (cur === '\\n') {\r\n                out.push(row);\r\n                row = [];\r\n            }\r\n            field = '';\r\n            fieldQuoted = false;\r\n        } else if (cur === '\"') {\r\n            if (!inQuote) {\r\n                inQuote = true;\r\n                fieldQuoted = true;\r\n            } else {\r\n                if (raw.charAt(i + 1) === '\"') {\r\n                    field += '\"';\r\n                    i += 1;\r\n                } else {\r\n                    inQuote = false;\r\n                }\r\n            }\r\n        } else {\r\n            field += cur === '\\n' ? '\\n' : cur;\r\n        }\r\n    }\r\n\r\n    // Add the last field\r\n    field = processField(field);\r\n    row.push(field);\r\n    out.push(row);\r\n\r\n    const headers: string[] = out.shift() as string[];\r\n    return out\r\n        .map((line: (string | undefined)[]) => {\r\n            const obj: Record<string, string> = { };\r\n            line\r\n                .forEach((field, i) => {\r\n                    if (field !== undefined) {\r\n                        obj[headers[i]] = field;\r\n                    }\r\n                });\r\n            return obj;\r\n        });\r\n}\r\n","import { RevClient } from '../rev-client';\r\nimport type { Audit } from '../types/audit';\r\nimport { asValidDate, tryParseJson } from '../utils/index';\r\nimport { type IPageResponse, PagedRequest } from '../utils/paged-request';\r\nimport { parseCSV } from '../utils/parse-csv';\r\n\r\nfunction parseEntry<T extends Audit.Entry>(line: Record<string, any>): T {\r\n    return {\r\n        messageKey: line['MessageKey'],\r\n        entityKey: line['EntityKey'],\r\n        when: line['When'],\r\n        entityId: line['EntityId'],\r\n        principal: tryParseJson(line['Principal']) || {},\r\n        message: tryParseJson(line['Message']) || {},\r\n        currentState: tryParseJson(line['CurrentState']) || {},\r\n        previousState: tryParseJson(line['PreviousState']) || {}\r\n    } as T;\r\n}\r\n\r\n/**\r\n * @category Audit\r\n */\r\nexport class AuditRequest<T extends Audit.Entry> extends PagedRequest<T> {\r\n    declare options: Required<Omit<Audit.Options<T>, 'toDate' | 'fromDate'>>;\r\n    private params: {\r\n        toDate?: string,\r\n        fromDate?: string,\r\n        nextContinuationToken?: string;\r\n    }\r\n    private _req: () => Promise<IPageResponse<T>>;\r\n    /**\r\n     * @hidden\r\n     * @param rev\r\n     * @param endpoint\r\n     * @param label\r\n     * @param options\r\n     */\r\n    constructor(\r\n        rev: RevClient,\r\n        endpoint: string,\r\n        label: string = 'audit records',\r\n        {toDate, fromDate, beforeRequest, ...options}: Audit.Options<T> = {}\r\n    ) {\r\n        if (!toDate && 'endDate' in options) {\r\n            throw new TypeError('Audit API uses toDate param instead of endDate');\r\n        }\r\n        if (!fromDate && 'startDate' in options) {\r\n            throw new TypeError('Audit API uses fromDate param instead of startDate');\r\n        }\r\n        super({\r\n            onProgress: (items: T[], current: number, total?: number | undefined) => {\r\n                rev.log('debug', `loading ${label}, ${current} of ${total}...`);\r\n            },\r\n            ...options\r\n        });\r\n\r\n        const {from, to} = this._parseDates(fromDate, toDate);\r\n\r\n        this.params = {\r\n            toDate: to.toISOString(),\r\n            fromDate: from.toISOString()\r\n        };\r\n\r\n        this._req = this._buildReqFunction(rev, endpoint, beforeRequest);\r\n    }\r\n    protected _requestPage() { return this._req(); }\r\n    private _buildReqFunction(rev: RevClient, endpoint: string, beforeRequest?: (request: PagedRequest<T>) => Promise<void>) {\r\n        return async () => {\r\n            await beforeRequest?.(this);\r\n            const response = await rev.request('GET', endpoint, this.params, { responseType: 'text' });\r\n\r\n            const {\r\n                body,\r\n                headers\r\n            } = response;\r\n\r\n            let items = parseCSV(body)\r\n                .map(line => parseEntry<T>(line));\r\n\r\n            const remaining = parseInt(headers.get('totalRecords') || '', 10);\r\n\r\n            Object.assign(this.params, {\r\n                nextContinuationToken: headers.get('nextContinuationToken') || undefined,\r\n                fromDate: headers.get('nextfromDate') || undefined\r\n            });\r\n\r\n            let done = !this.params.nextContinuationToken;\r\n\r\n\r\n            return {\r\n                items,\r\n                // totalRecords for subsequent requests is the count return from current fromDate, rather than total for starting date range\r\n                total: Math.max(this.total || 0, remaining),\r\n                done\r\n            } as IPageResponse<T>;\r\n        }\r\n    }\r\n    private _parseDates(fromDate?: Date | string, toDate?: Date | string) {\r\n        let to = asValidDate(toDate, new Date());\r\n\r\n        // default to one year older than toDate\r\n        const defaultFrom = new Date(to);\r\n        defaultFrom.setFullYear(to.getFullYear() - 1);\r\n\r\n        let from = asValidDate(fromDate, defaultFrom);\r\n\r\n        if (to < from) {\r\n            [to, from] = [from, to];\r\n        }\r\n        return {from, to};\r\n    }\r\n}\r\n","import type { RevClient } from '../rev-client';\r\nimport type { Audit, Rev } from '../types/index';\r\nimport { RateLimitEnum, makeQueue, normalizeRateLimitOptions } from '../utils/rate-limit-queues';\r\nimport { AuditRequest } from './audit-request';\r\n\r\n/** @ignore */\r\nexport type API = ReturnType<typeof auditAPIFactory>;\r\n/**\r\n * The Audit API methods\r\n * @category Audit\r\n * @group API\r\n * @see [Audit API Docs](https://revdocs.vbrick.com/reference/getuseraccessauditdetails)\r\n */\r\nexport interface AuditAPI extends API {}\r\n\r\n/** @ignore */\r\nexport default function auditAPIFactory(rev: RevClient, optRateLimits?: Rev.Options['rateLimits']) {\r\n    // The Audit API endpoints each have their own bucket of limits, so we keep track of each one here\r\n\r\n    // parse the incoming rate limit option and pass into AuditRequest object\r\n    const requestsPerMinute = normalizeRateLimitOptions(optRateLimits)[RateLimitEnum.AuditEndpoints];\r\n    function makeOptTransform() {\r\n        if (!requestsPerMinute) return (opts?: Audit.Options<any>) => opts;\r\n        const lock = makeQueue(RateLimitEnum.AuditEndpoints, requestsPerMinute);\r\n        return (opts: Audit.Options<any> = {}) => ({\r\n            ...opts,\r\n            async beforeRequest(req: AuditRequest<any>) {\r\n                await lock();\r\n                return opts.beforeRequest?.(req);\r\n            }\r\n        } as Audit.Options<any>);\r\n    }\r\n    const locks = {\r\n        accountAccess: makeOptTransform(),\r\n        userAccess: makeOptTransform(),\r\n        accountUsers: makeOptTransform(),\r\n        user: makeOptTransform(),\r\n        accountGroups: makeOptTransform(),\r\n        group: makeOptTransform(),\r\n        accountDevices: makeOptTransform(),\r\n        device: makeOptTransform(),\r\n        accountVideos: makeOptTransform(),\r\n        video: makeOptTransform(),\r\n        accountWebcasts: makeOptTransform(),\r\n        webcast: makeOptTransform(),\r\n        principal: makeOptTransform()\r\n    };\r\n\r\n\r\n    const auditAPI = {\r\n        /**\r\n        * Logs of user login / logout / failed login activity\r\n        */\r\n        accountAccess(accountId: string, options?: Audit.Options<Audit.UserAccessEntry>) {\r\n            const opts = locks.accountAccess(options);\r\n            return new AuditRequest<Audit.UserAccessEntry>(rev, `/network/audit/accounts/${accountId}/userAccess`, 'UserAccess', opts);\r\n        },\r\n        userAccess(userId: string, accountId: string, options?: Audit.Options<Audit.UserAccessEntry>) {\r\n            const opts = locks.userAccess(options);\r\n            return new AuditRequest<Audit.UserAccessEntry>(rev, `/network/audit/accounts/${accountId}/userAccess/${userId}`, `UserAccess_${userId}`, opts);\r\n        },\r\n        /**\r\n        * Operations on User Records (create, delete, etc)\r\n        */\r\n        accountUsers(accountId: string, options?: Audit.Options<Audit.UserEntry>) {\r\n            const opts = locks.accountUsers(options);\r\n            return new AuditRequest<Audit.UserEntry>(rev, `/network/audit/accounts/${accountId}/users`, 'User', opts);\r\n        },\r\n        user(userId: string, accountId: string, options?: Audit.Options<Audit.UserEntry>) {\r\n            const opts = locks.user(options);\r\n            return new AuditRequest<Audit.UserEntry>(rev, `/network/audit/accounts/${accountId}/users/${userId}`, 'User', opts);\r\n        },\r\n        /**\r\n        * Operations on Group Records (create, delete, etc)\r\n        */\r\n        accountGroups(accountId: string, options?: Audit.Options<Audit.GroupEntry>) {\r\n            const opts = locks.accountGroups(options);\r\n            return new AuditRequest<Audit.GroupEntry>(rev, `/network/audit/accounts/${accountId}/groups`, 'Groups', opts);\r\n        },\r\n        group(groupId: string, accountId: string, options?: Audit.Options<Audit.GroupEntry>) {\r\n            const opts = locks.group(options);\r\n            return new AuditRequest<Audit.GroupEntry>(rev, `/network/audit/accounts/${accountId}/groups/${groupId}`, 'Group', opts);\r\n        },\r\n        /**\r\n        * Operations on Device Records (create, delete, etc)\r\n        */\r\n        accountDevices(accountId: string, options?: Audit.Options<Audit.DeviceEntry>) {\r\n            const opts = locks.accountDevices(options);\r\n            return new AuditRequest<Audit.DeviceEntry>(rev, `/network/audit/accounts/${accountId}/devices`, 'Devices', opts);\r\n        },\r\n        device(deviceId: string, accountId: string, options?: Audit.Options<Audit.DeviceEntry>) {\r\n            const opts = locks.device(options);\r\n            return new AuditRequest<Audit.DeviceEntry>(rev, `/network/audit/accounts/${accountId}/devices/${deviceId}`, 'Device', opts);\r\n        },\r\n        /**\r\n        * Operations on Video Records (create, delete, etc)\r\n        */\r\n        accountVideos(accountId: string, options?: Audit.Options<Audit.VideoEntry>) {\r\n            const opts = locks.accountVideos(options);\r\n            return new AuditRequest<Audit.VideoEntry>(rev, `/network/audit/accounts/${accountId}/videos`, 'Videos', opts);\r\n        },\r\n        video(videoId: string, accountId: string, options?: Audit.Options<Audit.VideoEntry>) {\r\n            const opts = locks.video(options);\r\n            return new AuditRequest<Audit.VideoEntry>(rev, `/network/audit/accounts/${accountId}/videos/${videoId}`, 'Video', opts);\r\n        },\r\n        /**\r\n        * Operations on Webcast Records (create, delete, etc)\r\n        */\r\n        accountWebcasts(accountId: string, options?: Audit.Options<Audit.WebcastEntry>) {\r\n            const opts = locks.accountWebcasts(options);\r\n            return new AuditRequest<Audit.WebcastEntry>(rev, `/network/audit/accounts/${accountId}/scheduledEvents`, 'Webcasts', opts);\r\n        },\r\n        webcast(eventId: string, accountId: string, options?: Audit.Options<Audit.WebcastEntry>) {\r\n            const opts = locks.webcast(options);\r\n            return new AuditRequest<Audit.WebcastEntry>(rev, `/network/audit/accounts/${accountId}/scheduledEvents/${eventId}`, `Webcast`, opts);\r\n        },\r\n        /**\r\n        * All operations a single user has made\r\n        */\r\n        principal(userId: string, accountId: string, options?: Audit.Options<Audit.Entry<string>>) {\r\n            const opts = locks.principal(options);\r\n            return new AuditRequest<Audit.Entry<string>>(rev, `/network/audit/accounts/${accountId}/principals/${userId}`, 'Principal', opts);\r\n        }\r\n    };\r\n\r\n    return auditAPI;\r\n}\r\n","import polyfills from '../interop/polyfills';\r\n\r\nexport function mergeHeaders(source?: HeadersInit, other?: HeadersInit) {\r\n    const merged = new polyfills.Headers(source);\r\n    new polyfills.Headers(other).forEach((value, key) => merged.set(key, value));\r\n    return merged;\r\n}\r\n","import type { OAuth } from '../types/auth';\r\nimport polyfills from '../interop/polyfills';\r\nimport type { Rev } from '../types/rev';\r\n\r\nconst PLACEHOLDER = 'http://rev';\r\n\r\nexport function getOAuth2AuthorizationUrl(config: OAuth.ServerConfig, code_challenge: string, state?: string) {\r\n    // construct URL with query params\r\n    const url = new URL('/api/v2/oauth2/authorize', config.revUrl);\r\n    url.search = new URLSearchParams({\r\n        client_id: config.oauthApiKey,\r\n        code_challenge,\r\n        response_type: 'code',\r\n        redirect_uri: config.redirectUri,\r\n        ...state && {state}\r\n    }).toString();\r\n\r\n    return url.toString();\r\n}\r\n\r\n/**\r\n *\r\n * @param codeVerifier value can be any string 43-128 characters in length, just these characters: [A-Za-z0-9._~-]\r\n */\r\nexport async function getOAuth2PKCEVerifier(codeVerifier = polyfills.randomValues(48)) {\r\n    // setup pkce\r\n    // value can be any string 43-128 characters in length, just these characters: [A-Za-z0-9._~-]\r\n    // this line uses random values to create 64char string\r\n    const codeChallenge = await polyfills.sha256Hash(codeVerifier);\r\n    return { codeVerifier, codeChallenge };\r\n}\r\n\r\n/**\r\n * Constructs the query parameters for the Rev /oauth/authorization endpoint\r\n * @param config OAuth signing settings, retrieved from Rev Admin -> Security -> API Keys page, along with revUrl\r\n * @param state optional state to pass back to redirectUri once complete\r\n * @returns A valid oauth flow endpoint + query\r\n */\r\nexport async function buildLegacyOAuthQuery(config: OAuth.Config, oauthSecret: string, state: string = '1') {\r\n    const { hmacSign } = polyfills;\r\n\r\n    const RESPONSE_TYPE = 'code';\r\n\r\n    const {\r\n        oauthApiKey: apiKey,\r\n        redirectUri\r\n    } = config;\r\n\r\n    const timestamp = new Date();\r\n    const verifier = `${apiKey}::${timestamp.toISOString()}`;\r\n\r\n    const signature = await hmacSign(verifier, oauthSecret);\r\n\r\n    return {\r\n        apiKey,\r\n        signature,\r\n        verifier,\r\n        'redirect_uri': redirectUri,\r\n        'response_type': RESPONSE_TYPE,\r\n        state\r\n    };\r\n}\r\n\r\n/**\r\n * Parse the query parameters returned to the redirectUri from Rev\r\n * @param url The URL with query parameters, or object with the query parrameters\r\n * @returns\r\n */\r\nexport function parseLegacyOAuthRedirectResponse(url: string | URL | URLSearchParams | Record<string, string>): OAuth.RedirectResponse {\r\n    if (typeof url === 'string') {\r\n        // just in case only the query string is returned, include base\r\n        url = new URL(url, PLACEHOLDER);\r\n    }\r\n\r\n    if (url instanceof URL) {\r\n        url = url.searchParams;\r\n    }\r\n\r\n    const query: Record<string, string> = (url instanceof URLSearchParams)\r\n        ? Object.fromEntries(url)\r\n        : url;\r\n\r\n    const {\r\n        'auth_code': authCode = '',\r\n        state = '',\r\n        error = undefined\r\n    } = query;\r\n\r\n    return {\r\n        isSuccess: !error,\r\n        // URL parsing parses pluses (+) as spaces, which can cause later validation to fail\r\n        authCode: `${authCode}`.replace(/ /g, '+'),\r\n        state,\r\n        error\r\n    };\r\n}\r\n\r\n/**\r\n * Format the oauth configuration and oauth response into the constructor arguments for RevClient\r\n * @param revUrl\r\n * @param config\r\n * @param response\r\n * @returns {Rev.Options}\r\n */\r\nexport function buildLegacyOAuthRevOptions(revUrl: string, config: OAuth.Config, response: OAuth.RedirectResponse): Rev.Options {\r\n    const {\r\n        oauthApiKey,\r\n        redirectUri\r\n    } = config;\r\n\r\n    const {\r\n        authCode\r\n    } = response;\r\n\r\n    return {\r\n        url: revUrl,\r\n        authCode,\r\n        oauthConfig: {\r\n            oauthApiKey,\r\n            redirectUri\r\n        }\r\n    };\r\n}\r\n","import type { RevClient } from '../rev-client';\r\nimport type { Auth, OAuth } from '../types/auth';\r\nimport type { Rev } from '../types/rev';\r\nimport { mergeHeaders } from '../utils/merge-headers';\r\nimport {buildLegacyOAuthQuery, getOAuth2AuthorizationUrl, getOAuth2PKCEVerifier, parseLegacyOAuthRedirectResponse} from './oauth';\r\n\r\n/** @ignore */\r\nexport type API = ReturnType<typeof authAPIFactory>;\r\n\r\n/**\r\n * Authentication API methods\r\n * Generally you won't need to call these methods directly - {@link RevClient#connect | RevClient} instances use them internally to maintain an authentication session.\r\n *\r\n * The exception is the {@link AuthAPI.buildOAuth2Authentication} and {@link AuthAPI.loginOAuth2} methods, which can be used when building an OAuth2 authentication flow.\r\n *\r\n * @category Authentication\r\n * @group API\r\n * @see [Auth API Docs](https://revdocs.vbrick.com/reference/authenticateuser)\r\n     */\r\nexport interface AuthAPI extends API {}\r\n\r\n/** @ignore */\r\nexport default function authAPIFactory(rev: RevClient) {\r\n\r\n    const authAPI = {\r\n        async loginToken(apiKey: string, secret: string, options?: Rev.RequestOptions): Promise<Auth.LoginResponse> {\r\n            return rev.post('/api/v2/authenticate', {\r\n                apiKey,\r\n                secret\r\n            }, options);\r\n        },\r\n        async extendSessionToken(apiKey: string): Promise<Auth.ExtendResponse> {\r\n            return rev.post(`/api/v2/auth/extend-session-timeout/${apiKey}`);\r\n        },\r\n        async logoffToken(apiKey: string): Promise<void> {\r\n            return rev.delete(`/api/v2/tokens/${apiKey}`);\r\n        },\r\n        async loginUser(username: string, password: string, options?: Rev.RequestOptions): Promise<Auth.UserLoginResponse> {\r\n            return rev.post('/api/v2/user/login', {\r\n                username,\r\n                password\r\n            }, options);\r\n        },\r\n        async logoffUser(userId: string): Promise<void> {\r\n            return rev.post('/api/v2/user/logoff', { userId });\r\n        },\r\n        async extendSessionUser(userId: string): Promise<Auth.ExtendResponse> {\r\n            return rev.post('/api/v2/user/extend-session-timeout', { userId });\r\n        },\r\n        async loginJWT(jwtToken: string, options?: Rev.RequestOptions): Promise<Auth.JWTLoginResponse> {\r\n            return rev.get('/api/v2/jwtauthenticate', { jwt_token: jwtToken }, options);\r\n        },\r\n        async loginGuestRegistration(webcastId: string, jwtToken: string, options?: Rev.RequestOptions): Promise<Auth.GuestRegistrationResposne> {\r\n            const opts = {\r\n                ...options,\r\n                headers: mergeHeaders(options?.headers, { 'x-requested-with': 'xmlhttprequest' })\r\n            };\r\n            return rev.post(`/external/auth/jwt/${webcastId}`, { token: `vbrick_rev ${jwtToken}`}, options);\r\n        },\r\n        async extendSession(): Promise<Auth.ExtendResponse> {\r\n            return rev.post('/api/v2/user/extend-session');\r\n        },\r\n        async verifySession(): Promise<void> {\r\n            return rev.get('/api/v2/user/session');\r\n        },\r\n\r\n        /**\r\n         * @deprecated - use logoffUser - put here because it's a common misspelling\r\n         */\r\n        get logoutUser() { return authAPI.logoffUser; },\r\n        /**\r\n         * @deprecated - use logoffToken - put here because it's a common misspelling\r\n         */\r\n        get logoutToken() { return authAPI.logoffToken; },\r\n        /**\r\n         * generate the Authorization URL for the OAuth2 flow as well as the codeVerifier for the\r\n         * subsequent Access Token request. You *must* store the codeVerifier somehow (i.e. serverside database matched to user's state/cookies/session, or on browser SessionStorage) to be able to complete the OAuth2 login flow.\r\n         * @param config OAuth signing settings, retrieved from Rev Admin -> Security -> API Keys page\r\n         * @param state optional state to pass back to redirectUri once complete\r\n         * @param verifier the code_verifier to use when generating the code challenge. Can be any string 43-128 characters in length, just these characters: [A-Za-z0-9._~-]. If not provided then code will automatically generate a suitable value\r\n         * @returns A valid oauth flow URL + the code_verifier to save for later verification\r\n         */\r\n        async buildOAuth2Authentication(config: OAuth.ServerConfig, state: string = '1', verifier?: string): Promise<OAuth.AuthenticationData> {\r\n            const {codeChallenge, codeVerifier} = await getOAuth2PKCEVerifier(verifier);\r\n            const _cfg = { revUrl: rev.url, ...config };\r\n            const url = getOAuth2AuthorizationUrl(_cfg, codeChallenge, state);\r\n            return {\r\n                url: `${url}`,\r\n                codeVerifier\r\n            };\r\n        },\r\n        async loginOAuth2(config: OAuth.Config, code: string, codeVerifier: string, options?: Rev.RequestOptions): Promise<OAuth.AuthTokenResponse> {\r\n            return rev.post('/api/v2/oauth2/token', {\r\n                // sometimes the authCode can get mangled, with the pluses in the code being replaced by spaces.\r\n                code: code.replace(/ /g, '+'),\r\n                client_id: config.oauthApiKey,\r\n                grant_type: 'authorization_code',\r\n                redirect_uri: config.redirectUri,\r\n                code_verifier: codeVerifier\r\n            }, options);\r\n        },\r\n        /**\r\n         * @deprecated\r\n         * @param config OAuth signing settings, retrieved from Rev Admin -> Security -> API Keys page\r\n         * @param oauthSecret Secret from Rev Admin -> Security. This is a DIFFERENT value from the\r\n         *                    User Secret used for API login. Do not expose client-side!\r\n         * @param state optional state to pass back to redirectUri once complete\r\n         * @returns A valid oauth flow URL\r\n         */\r\n        async buildOAuthAuthenticationURL(config: OAuth.Config, oauthSecret: string, state: string = '1'): Promise<string> {\r\n            const query = await buildLegacyOAuthQuery(config, oauthSecret, state);\r\n            const url = new URL('/api/v2/oauth/authorization', rev.url);\r\n            url.search = `${new URLSearchParams(query)}`;\r\n            return `${url}`;\r\n        },\r\n        /**\r\n         * @deprecated\r\n         */\r\n        buildOAuthAuthenticationQuery: buildLegacyOAuthQuery,\r\n        /**\r\n         * @deprecated\r\n         */\r\n        parseOAuthRedirectResponse: parseLegacyOAuthRedirectResponse,\r\n        /**\r\n         * @deprecated\r\n         * @param config\r\n         * @param authCode\r\n         * @returns\r\n         */\r\n        async loginOAuth(config: OAuth.Config, authCode: string): Promise<OAuth.LoginResponse> {\r\n            const GRANT_AUTH = 'authorization_code';\r\n\r\n            const {\r\n                oauthApiKey: apiKey,\r\n                redirectUri\r\n            } = config;\r\n\r\n            // sometimes the authCode can get mangled, with the pluses in the code\r\n            // being replaced by spaces. This is just to make sure that isn't a problem (even though already done in parseOAuthRedirectResponse)\r\n            authCode = authCode.replace(/ /g, '+');\r\n\r\n            // COMBAK I don't think it matters if rev-client is logged in and passing Authorization headers or not.\r\n            return rev.post('/api/v2/oauth/token', {\r\n                authCode,\r\n                apiKey,\r\n                redirectUri,\r\n                grantType: GRANT_AUTH\r\n            });\r\n        },\r\n        /**\r\n         * @deprecated\r\n         * @param config\r\n         * @param refreshToken\r\n         * @returns\r\n         */\r\n        async extendSessionOAuth(config: OAuth.Config, refreshToken: string): Promise<OAuth.LoginResponse> {\r\n            const GRANT_REFRESH = 'refresh_token';\r\n\r\n            const {\r\n                oauthApiKey: apiKey\r\n            } = config;\r\n\r\n            return rev.post('/api/v2/oauth/token', {\r\n                apiKey,\r\n                refreshToken,\r\n                grantType: GRANT_REFRESH\r\n            });\r\n        }\r\n    };\r\n\r\n    return authAPI;\r\n}\r\n","import type { RevClient } from '../rev-client';\r\nimport type { Category } from '../types/index';\r\n\r\n/** @ignore */\r\nexport type API = ReturnType<typeof categoryAPIFactory>;\r\n/**\r\n * Category API methods\r\n * @category Administration\r\n * @group API\r\n * @see [Category API Docs](https://revdocs.vbrick.com/reference/getcategories)\r\n */\r\nexport interface CategoryAPI extends API {}\r\n\r\n/** @ignore */\r\nexport default function categoryAPIFactory(rev: RevClient) {\r\n    const categoryAPI = {\r\n        async create(category: Category.CreateRequest): Promise<Category.CreateResponse> {\r\n            return rev.post('/api/v2/categories', category, { responseType: 'json' });\r\n        },\r\n        async details(categoryId: string): Promise<Category.Details> {\r\n            return rev.get(`/api/v2/categories/${categoryId}`, undefined, { responseType: 'json' });\r\n        },\r\n        async update(categoryId: string, category: Category.EditRequest): Promise<void> {\r\n            return rev.put(`/api/v2/categories/${categoryId}`, category);\r\n        },\r\n        async delete(categoryId: string): Promise<void> {\r\n            return rev.delete(`/api/v2/categories/${categoryId}`);\r\n        },\r\n        /**\r\n         * get list of categories in system\r\n         * @see {@link https://revdocs.vbrick.com/reference#getcategories}\r\n         */\r\n        async list(parentCategoryId?: string, includeAllDescendants?: boolean): Promise<Category[]> {\r\n            // only pass parameters if defined\r\n            const payload: Record<string, any> = Object.assign(\r\n                { },\r\n                parentCategoryId && { parentCategoryId },\r\n                includeAllDescendants != undefined && { includeAllDescendants }\r\n            );\r\n            const { categories } = await rev.get('/api/v2/categories', payload, { responseType: 'json' });\r\n            return categories;\r\n        },\r\n        /**\r\n         * get list of categories that current user has ability to add videos to\r\n         */\r\n        async listAssignable(): Promise<Category.Assignable[]> {\r\n            return rev.get('/api/v2/assignable-categories');\r\n        }\r\n    };\r\n    return categoryAPI;\r\n}\r\n","import type { RevClient } from '../rev-client';\r\nimport type { AccessControl, Channel, Rev } from '../types/index';\r\nimport { SearchRequest } from '../utils/request-utils';\r\n\r\n/** @ignore */\r\nexport type API = ReturnType<typeof channelAPIFactory>;\r\n/**\r\n * Channel API methods\r\n * @category Channels\r\n * @group API\r\n * @see [Channel API Docs](https://revdocs.vbrick.com/reference/getchannels)\r\n */\r\nexport interface ChannelAPI extends API {};\r\n\r\n/** @ignore */\r\nexport default function channelAPIFactory(rev: RevClient) {\r\n    const channelAPI = {\r\n        async create(channel: Channel.CreateRequest): Promise<string> {\r\n            const {channelId} = await rev.post('/api/v2/channels', channel, { responseType: 'json' });\r\n            return channelId;\r\n        },\r\n        async update(channelId: string, channel: Channel.CreateRequest): Promise<void> {\r\n            return rev.put(`/api/v2/channels/${channelId}`, channel);\r\n        },\r\n        /**\r\n         * @summary Patch Channel\r\n         * Partially edits the members and details of a channel. You do not need to provide the fields that you are not changing.\r\n         * @example\r\n         * ```js\r\n         * const rev = new RevClient(...config...);\r\n         * await rev.connect();\r\n         *\r\n         * // add a member\r\n         * await rev.channel.patch(channelId, [{ op: 'add', path: '/Members/-', value: { id: userId, type: 'User', roleTypes: 'Uploader' } }]);\r\n         *\r\n         * // add current user as an admin\r\n         * const user = await rev.user.details('me');\r\n         * await rev.channel.patch(channelId, [{ op: 'add', path: '/Members/-', value: { id: user.userId, type: 'User', roleTypes: 'Admin' } }]);\r\n         *\r\n         * // change sort order\r\n         * await rev.channel.patch(channelId, [{ op: 'replace', path: '/DefaultSortOrder', value: 'recommended' }]);\r\n         *\r\n         * ```\r\n         * @param channelId\r\n         * @param operations\r\n         * @param options\r\n         */\r\n        async patch(channelId: string, operations: Rev.PatchOperation[], options?: Rev.RequestOptions): Promise<void> {\r\n            await rev.patch(`/api/v2/channels/${channelId}`, operations, options);\r\n        },\r\n        async delete(channelId: string): Promise<void> {\r\n            return rev.delete(`/api/v2/channels/${channelId}`);\r\n        },\r\n        /**\r\n         * get list of channels in system\r\n         * @see {@link https://revdocs.vbrick.com/reference/getchannels}\r\n         */\r\n        list(start: number = 0, options: Channel.SearchOptions = {}): ChannelListRequest {\r\n            return new ChannelListRequest(rev, start, options);\r\n        },\r\n        async addMembers(channelId: string, members: Channel.Member[]) {\r\n            const operations = members\r\n                .map(member => {\r\n                    return { op: 'add', path: '/Members/-', value: member };\r\n                });\r\n            await rev.patch(`/api/v2/channels/${channelId}`, operations);\r\n        },\r\n        async removeMembers(channelId: string, members: Array<string | Channel.Member>) {\r\n            const operations = members\r\n                .map(member => {\r\n                    const entityId = typeof member === 'string'\r\n                        ? member\r\n                        : member.id;\r\n\r\n                    return { op: 'remove', path: '/Members', value: entityId };\r\n                });\r\n\r\n            await rev.patch(`/api/v2/channels/${channelId}`, operations);\r\n        },\r\n        get uploadLogo() {\r\n            return rev.upload.channelLogo;\r\n        },\r\n        get uploadHeader() {\r\n            return rev.upload.channelHeader;\r\n        },\r\n        async downloadLogo<T = ReadableStream>(channel: {logoKey?: string | null, logoUri?: string | null}, options: Rev.RequestOptions): Promise<Rev.Response<T>> {\r\n            const endpoint = channel?.logoKey\r\n                ? `/api/v2/channels/thumbnails/${channel?.logoKey}`\r\n                : channel?.logoUri;\r\n\r\n            if (!endpoint) throw new TypeError('Channel has no logo');\r\n            const response = await rev.request<T>('GET', endpoint, undefined, {\r\n                responseType: 'stream',\r\n                ...options\r\n            });\r\n            return response;\r\n        },\r\n        async downloadHeader<T = ReadableStream>(channel: {headerKey?: string | null, headerUri?: string | null}, options: Rev.RequestOptions): Promise<Rev.Response<T>> {\r\n            const endpoint = channel?.headerKey\r\n                ? `/api/v2/channels/thumbnails/${channel?.headerKey}`\r\n                : channel?.headerUri;\r\n            if (!endpoint) throw new TypeError('Channel has no header');\r\n            const response = await rev.request<T>('GET', endpoint, undefined, {\r\n                responseType: 'stream',\r\n                ...options\r\n            });\r\n            return response;\r\n        },\r\n        /**\r\n         *\r\n         * @param {string} [searchText]\r\n         * @param {Rev.SearchOptions<{Id: string, Name: string}>} [options]\r\n         */\r\n        search(searchText?: string, options: Rev.AccessEntitySearchOptions<AccessControl.SearchHit> & { type?: AccessControl.EntitySearchType } = { }) {\r\n            const searchDefinition = {\r\n                endpoint: `/api/v2/search/access-entity${options?.assignable ? '/assignable' : ''}`,\r\n                totalKey: 'totalEntities',\r\n                hitsKey: 'accessEntities'\r\n            };\r\n            const query: Record<string, any> = {\r\n                type: options.type || 'Channel',\r\n                ...searchText && {q: searchText}\r\n            };\r\n            return new SearchRequest<AccessControl.SearchHit>(rev, searchDefinition, query, options);\r\n        },\r\n        /**\r\n         * @summary Get Channels For User\r\n         * Returns only the channels and video count for the user making the API call based on their access control.\r\n         * @param options\r\n         */\r\n        async listUserChannels(options?: Rev.RequestOptions): Promise<Channel.UserListItem[]> {\r\n            return rev.get('/api/v2/search/channels', undefined, options);\r\n        }\r\n    };\r\n    return channelAPI;\r\n}\r\n\r\n/** @category Channels */\r\nexport class ChannelListRequest implements Rev.ISearchRequest<Channel.SearchHit> {\r\n    currentPage: number;\r\n    current: number;\r\n    total: number;\r\n    done: boolean;\r\n    options: Required<Pick<Channel.SearchOptions, 'maxResults' | 'onProgress' | 'pageSize'>>;\r\n    private _req: () => Promise<Channel.SearchHit[]>;\r\n    constructor(rev: RevClient, start: number = 0, options: Channel.SearchOptions = {}) {\r\n        this.options = {\r\n            maxResults: Infinity,\r\n            pageSize: 10,\r\n            onProgress: (items: Channel.SearchHit[], current: number, total: number) => {\r\n                rev.log('debug', `loading channels, ${current} of ${total}...`);\r\n            },\r\n            ...options\r\n        };\r\n\r\n        this.current = 0;\r\n        this.total = Infinity;\r\n        this.done = false;\r\n        this.currentPage = start;\r\n\r\n        this._req = () => {\r\n            const params = {\r\n                page: this.currentPage,\r\n                size: this.options.pageSize\r\n            };\r\n            return rev.get('/api/v2/channels', params, { responseType: 'json' });\r\n        }\r\n\r\n    }\r\n    async nextPage() {\r\n        const {\r\n            maxResults,\r\n            onProgress\r\n        } = this.options;\r\n\r\n        let current = this.current;\r\n\r\n        let items: Channel.SearchHit[] = await this._req();\r\n\r\n        if (!Array.isArray(items) || items.length == 0) {\r\n            this.done = true;\r\n            items = [];\r\n        }\r\n\r\n        if (current + items.length >= maxResults) {\r\n            const delta = maxResults - current;\r\n            items = items.slice(0, delta);\r\n            this.done = true;\r\n        }\r\n        this.total = current + items.length;\r\n\r\n        onProgress(items, current, this.total);\r\n\r\n        this.current += items.length;\r\n        this.currentPage += 1;\r\n\r\n        return {\r\n            current,\r\n            total: this.total,\r\n            done: this.done,\r\n            items\r\n        };\r\n    }\r\n    /**\r\n     * Go through all pages of results and return as an array.\r\n     * TIP: Use the {maxResults} option to limit the maximum number of results\r\n     *\r\n     */\r\n    async exec(): Promise<Channel.SearchHit[]> {\r\n        const results: Channel.SearchHit[] = [];\r\n        // use async iterator\r\n        for await (let hit of this) {\r\n            results.push(hit);\r\n        }\r\n        return results;\r\n    }\r\n    async* [Symbol.asyncIterator]() {\r\n        do {\r\n            const {\r\n                items\r\n            } = await this.nextPage();\r\n\r\n            for await (let hit of items) {\r\n                yield hit;\r\n            }\r\n        } while (!this.done);\r\n    }\r\n}\r\n","import type { RevClient } from '../rev-client';\r\n\r\nimport type { Device } from '../types/index';\r\n\r\n/** @ignore */\r\nexport type API = ReturnType<typeof deviceAPIFactory>;\r\n/**\r\n * Device API methods\r\n * @category Devices\r\n * @group API\r\n * @see [Device API Docs](https://revdocs.vbrick.com/reference/getdmedevices-1)\r\n */\r\nexport interface DeviceAPI extends API {}\r\n\r\n/** @ignore */\r\nexport default function deviceAPIFactory(rev: RevClient) {\r\n    const deviceAPI = {\r\n        /**\r\n         * Get a list of all DMEs\r\n         * @returns\r\n         */\r\n        async listDMEs(): Promise<Device.DmeDetails[]> {\r\n            const response = await rev.get('/api/v2/devices/dmes');\r\n            return response.devices;\r\n        },\r\n        /**\r\n         * Get a list of devices that can be used for Zoning configuration\r\n         * @returns\r\n         */\r\n        async listZoneDevices(): Promise<Device.ZoneDevice[]> {\r\n            const response = await rev.get('/api/v2/zonedevices');\r\n            return response.devices;\r\n        },\r\n        /**\r\n         * Get a list of the Presentation Profiles defined in Rev\r\n         * @returns\r\n         */\r\n        async listPresentationProfiles(): Promise<Device.PresentationProfile[]> {\r\n            return rev.get('/api/v2/presentation-profiles');\r\n        },\r\n        /**\r\n         * Create a new DME in Rev\r\n         * @param dme\r\n         * @returns\r\n         */\r\n        async add(dme: Device.CreateDMERequest) {\r\n            return rev.post('/api/v2/devices/dmes', dme);\r\n        },\r\n        /**\r\n         * Get details about the specified DME's health\r\n         * @param deviceId\r\n         * @returns\r\n         */\r\n        async healthStatus(deviceId: string): Promise<Device.DmeHealthStatus> {\r\n            return rev.get(`/api/v2/devices/dmes/${deviceId}/health-status`);\r\n        },\r\n        /**\r\n         * Remove a DME from Rev\r\n         * @param deviceId\r\n         * @returns\r\n         */\r\n        async delete(deviceId: string) {\r\n            return rev.delete(`/api/v2/devices/dmes/${deviceId}`);\r\n        },\r\n        /**\r\n         * Have Rev send a reboot request to the specified DME\r\n         * @param deviceId\r\n         * @returns\r\n         */\r\n        async rebootDME(deviceId: string) {\r\n            return rev.put(`/api/v2/devices/dmes/${deviceId}`);\r\n        }\r\n    };\r\n    return deviceAPI;\r\n}\r\n","import type { RevClient } from '../rev-client';\r\nimport type { Group, Rev, User } from '../types/index';\r\nimport { SearchRequest } from '../utils/request-utils';\r\n\r\n/** @ignore */\r\nexport type API = ReturnType<typeof groupAPIFactory>;\r\n\r\n/**\r\n * Group API methods\r\n * @category Users & Groups\r\n * @group API\r\n * @see [Group API Docs](https://revdocs.vbrick.com/reference/getgroups-1)\r\n */\r\nexport interface GroupAPI extends API {}\r\n\r\n/** @ignore */\r\nexport default function groupAPIFactory(rev: RevClient) {\r\n    const groupAPI = {\r\n        /**\r\n         * Create a group. Returns the resulting Group ID\r\n         * @param {{name: string, userIds: string[], roleIds: string[]}} group\r\n         * @returns {Promise<string>}\r\n         */\r\n        async create(group: Group.CreateRequest): Promise<string> {\r\n            const { groupId } = await rev.post('/api/v2/groups', group);\r\n            return groupId;\r\n        },\r\n        async delete(groupId: string) {\r\n            await rev.delete(`/api/v2/groups/${groupId}`);\r\n        },\r\n        async details(groupId: string): Promise<Group.Details> {\r\n            return rev.get(`/api/v2/groups/${groupId}`);\r\n        },\r\n        /**\r\n         *\r\n         * @param {string} [searchText]\r\n         * @param {Rev.SearchOptions<{Id: string, Name: string}>} [options]\r\n         */\r\n        search(searchText?: string, options: Rev.AccessEntitySearchOptions<Group.SearchHit> = { }) {\r\n            const searchDefinition = {\r\n                endpoint: `/api/v2/search/access-entity${options?.assignable ? '/assignable' : ''}`,\r\n                totalKey: 'totalEntities',\r\n                hitsKey: 'accessEntities',\r\n                transform: (hits: Group.RawSearchHit[]) => hits.map(formatGroupSearchHit)\r\n            };\r\n            const query: Record<string, any> = { type: 'group' };\r\n            if (searchText) {\r\n                query.q = searchText;\r\n            }\r\n            return new SearchRequest<Group.SearchHit>(rev, searchDefinition, query, options);\r\n        },\r\n        list(options: Rev.SearchOptions<Group.SearchHit> = { }) {\r\n            return groupAPI.search(undefined, options);\r\n        },\r\n        listUsers(groupId: string, options: Rev.SearchOptions<string> = { }) {\r\n            const searchDefinition = {\r\n                endpoint: `/api/v2/search/groups/${groupId}/users`,\r\n                totalKey: 'totalUsers',\r\n                hitsKey: 'userIds'\r\n            };\r\n            return new SearchRequest<string>(rev, searchDefinition, undefined, options);\r\n        },\r\n        /**\r\n         * get all users in a group with full details\r\n         * @param groupId\r\n         * @param options\r\n         * @returns\r\n         */\r\n        listUserDetails(groupId: string, options: Rev.SearchOptions<User & { error?: Error }> = { }) {\r\n            const searchDefinition = {\r\n                endpoint: `/api/v2/search/groups/${groupId}/users`,\r\n                totalKey: 'totalUsers',\r\n                hitsKey: 'userIds',\r\n                transform: async (userIds: string[]) => {\r\n                    const result: User[] = [];\r\n                    for (let userId of userIds) {\r\n                        const out: User & {error: Error} = { userId } as any;\r\n                        try {\r\n                            const details = await rev.user.details(userId);\r\n                            Object.assign(out, details);\r\n                        } catch (error: any) {\r\n                            out.error = error;\r\n                        }\r\n                        result.push(out);\r\n                    }\r\n                    return result;\r\n                }\r\n            };\r\n            return new SearchRequest<User & {userId: string, error?: Error}>(rev, searchDefinition, undefined, options);\r\n        }\r\n    };\r\n    return groupAPI;\r\n}\r\n\r\nfunction formatGroupSearchHit(hit: Group.RawSearchHit): Group.SearchHit {\r\n    return {\r\n        id: hit.Id,\r\n        name: hit.Name,\r\n        entityType: hit.EntityType\r\n    };\r\n}\r\n","import {RevClient} from \"../rev-client\";\r\nimport type { Playlist, Rev, Video } from \"../types/index\";\r\nimport { RateLimitEnum } from \"../utils/index\";\r\nimport { SearchRequest } from \"../utils/request-utils\";\r\n\r\nfunction getSummaryFromResponse<T extends Record<string, any>>(response: T, hitsKey: string) {\r\n    const ignoreKeys = ['scrollId', 'statusCode', 'statusDescription'];\r\n\r\n    const summary = Object.fromEntries(Object.entries(response)\r\n        .filter(([key, value]) => {\r\n            // don't include arrays or scroll type keys\r\n            return !(key === hitsKey || ignoreKeys.includes(key) || Array.isArray(value));\r\n        }));\r\n    return summary as Omit<Playlist.DetailsResponse, 'scrollId'>;\r\n}\r\n\r\n/** @category Playlists */\r\nexport class PlaylistDetailsRequest extends SearchRequest<Video.Details> {\r\n    playlist: Playlist & Omit<Playlist.DetailsResponse, 'scrollId'> = {} as any;\r\n    get playlistName() {\r\n        return this.playlist.playlistDetails?.name || this.playlist.name;\r\n    }\r\n    get searchFilter() {\r\n        return this.playlist?.playlistType === 'Dynamic'\r\n            ? this.playlist.playlistDetails?.searchFilter || this.playlist.searchFilter\r\n            : undefined;\r\n    }\r\n    /**\r\n     * @hidden\r\n     * @param rev\r\n     * @param playlistId\r\n     * @param query\r\n     * @param options\r\n     */\r\n    constructor(rev: RevClient, playlistId: string, query: { count?: number } = {}, options: Rev.SearchOptions<Video.Details> = {}) {\r\n        const searchDefinition: Rev.SearchDefinition<Video.Details> = {\r\n            endpoint: `/api/v2/playlists/${playlistId}`,\r\n            totalKey: 'totalVideos',\r\n            hitsKey: 'videos',\r\n            // get summary from initial response\r\n            request: async (endpoint, query, options) => {\r\n                await rev.session.queueRequest(RateLimitEnum.SearchVideos);\r\n                const response = await rev.get<Playlist.DetailsResponse>(endpoint, query, options);\r\n                // checking for playlist for possible future compatibility\r\n                Object.assign(this.playlist, getSummaryFromResponse(response, 'videos'));\r\n                return response;\r\n            }\r\n        };\r\n        super(rev, searchDefinition, query, options);\r\n    }\r\n    async getPlaylistInfo() {\r\n        // set maxResults to 0 to mark request as done, since first page of sessions will be lost\r\n        this.options.maxResults = 0;\r\n        // must get first page of results to load summary data\r\n        const {items: videos} = await this.nextPage();\r\n\r\n        return {\r\n            ...this.playlist,\r\n            ...this.playlist?.playlistDetails,\r\n            videos,\r\n            playlistName: this.playlistName,\r\n            searchFilter: this.searchFilter\r\n        };\r\n    }\r\n}\r\n\r\n","import type { RevClient } from '../rev-client';\r\nimport type { Rev, Video } from '../types/index';\r\nimport type { Playlist } from '../types/playlist';\r\nimport { isPlainObject } from '../utils';\r\nimport { PlaylistDetailsRequest } from './playlist-details-request';\r\n\r\n/** @ignore */\r\nexport type API = ReturnType<typeof playlistAPIFactory>;\r\n/**\r\n * Playlist API methods\r\n * @category Playlists\r\n * @group API\r\n * @see [Playlist API Docs](https://revdocs.vbrick.com/reference/getplaylists)\r\n */\r\nexport interface PlaylistAPI extends API {}\r\n\r\n/** @ignore */\r\nexport default function playlistAPIFactory(rev: RevClient) {\r\n    const playlistAPI = {\r\n        async create(name: string, videos: string[] | Video.SearchOptions): Promise<string> {\r\n            const isStatic = Array.isArray(videos);\r\n            const payload = isStatic\r\n                ? { name, playlistType: 'Static', videoIds: videos }\r\n                : { name, playlistType: 'Dynamic', playlistDetails: videos };\r\n\r\n            const { playlistId } = await rev.post('/api/v2/playlists', payload, { responseType: 'json' });\r\n            return playlistId;\r\n        },\r\n        async details(playlistId: string, query: { count?: number }): Promise<Playlist.DetailsResponse> {\r\n            return rev.get(`/api/v2/playlists/${playlistId}`, query, { responseType: 'json' });\r\n        },\r\n        listVideos(playlistId: string, query: { count?: number }, options?: Rev.SearchOptions<Video.Details>)  {\r\n            return new PlaylistDetailsRequest(rev, playlistId, query, options);\r\n        },\r\n        async update(playlistId: string, actions: Playlist.UpdateAction[] | Video.SearchOptions): Promise<void> {\r\n            const isStatic = Array.isArray(actions);\r\n            const payload = isStatic\r\n                ? { playlistVideoDetails: actions }\r\n                : { playlistDetails: actions };\r\n\r\n            return rev.put(`/api/v2/playlists/${playlistId}`, payload);\r\n        },\r\n        async updateFeatured(actions: Playlist.UpdateAction[]): Promise<void> {\r\n            const payload = {\r\n                playlistVideoDetails: actions\r\n            };\r\n            return rev.put(`/api/v2/playlists/featured-playlist`, payload);\r\n        },\r\n        async delete(playlistId: string): Promise<void> {\r\n            return rev.delete(`/api/v2/playlists/${playlistId}`);\r\n        },\r\n        /**\r\n         * get list of playlists in system.\r\n         * NOTE: return type is slightly different than API documentation\r\n         * @see {@link https://revdocs.vbrick.com/reference#getplaylists}\r\n         */\r\n        async list(): Promise<Playlist.List> {\r\n            // ensure raw response is in consistent format\r\n            function parsePlaylist(entry: Record<string, string> & { videos: any; }): Playlist {\r\n                const {\r\n                    id,\r\n                    playlistId,\r\n                    featurePlaylistId,\r\n                    featuredPlaylist,\r\n                    name,\r\n                    playlistName,\r\n                    ...extra\r\n                } = entry;\r\n                return {\r\n                    ...(extra as any),\r\n                    id: id ?? playlistId ?? featurePlaylistId ?? featuredPlaylist,\r\n                    name: name ?? playlistName,\r\n                    videos: entry.videos ?? entry.Videos as any,\r\n                };\r\n            }\r\n\r\n            const rawResult = await rev.get('/api/v2/playlists', undefined, { responseType: 'json' });\r\n            // rawResult may return in strange format, so cleanup and return consistent output\r\n\r\n            const hasFeatured = !Array.isArray(rawResult);\r\n\r\n            const rawPlaylists = hasFeatured\r\n                ? rawResult.playlists\r\n                : rawResult;\r\n\r\n\r\n            const output: Playlist.List = {\r\n                playlists: rawPlaylists.map(parsePlaylist)\r\n            };\r\n\r\n            if (hasFeatured) {\r\n                if (isPlainObject(rawResult.featuredPlaylist)) {\r\n                    output.featuredPlaylist = parsePlaylist(rawResult.featuredPlaylist);\r\n                } else if (Array.isArray(rawResult.videos)) {\r\n                    output.featuredPlaylist = parsePlaylist(rawResult);\r\n                }\r\n            }\r\n            return output;\r\n        }\r\n    };\r\n    return playlistAPI;\r\n}\r\n","import type { RevClient } from '../rev-client';\r\nimport type { Recording } from '../types/recording';\r\nimport type { Video } from '../types/video';\r\nimport { isPlainObject } from '../utils';\r\n\r\n/** @ignore */\r\nexport type API = ReturnType<typeof recordingAPIFactory>;\r\n\r\n/**\r\n * Recording-related API methods\r\n * @category Videos\r\n * @group API\r\n * @see [Recording API Docs](https://revdocs.vbrick.com/reference/startrecording)\r\n */\r\nexport interface RecordingAPI extends API {}\r\n\r\n/** @ignore */\r\nexport default function recordingAPIFactory(rev: RevClient) {\r\n    const recordingAPI = {\r\n        async startVideoConferenceRecording(sipAddress: string, sipPin: string, title?: string): Promise<string> {\r\n            const { videoId } = await rev.post('/api/v2/vc/start-recording', { title, sipAddress, sipPin }, { responseType: 'json' });\r\n            return videoId;\r\n        },\r\n        async getVideoConferenceStatus(videoId: string): Promise<Video.StatusEnum> {\r\n            const { status } = await rev.get(`/api/v2/vc/recording-status/${videoId}`, undefined, { responseType: 'json' });\r\n            return status;\r\n        },\r\n        async stopVideoConferenceRecording(videoId: string): Promise<string> {\r\n            const payload = { videoId };\r\n            const result = await rev.post(`/api/v2/vc/stop-recording`, payload, { responseType: 'json' });\r\n            return isPlainObject<{ message: string; }>(result)\r\n                ? result.message\r\n                : result;\r\n        },\r\n        async startPresentationProfileRecording(request: Recording.PresentationProfileRequest): Promise<string> {\r\n            const { scheduledRecordingId } = await rev.post('/api/v2/pp/start-recording', request, { responseType: 'json' });\r\n            return scheduledRecordingId;\r\n        },\r\n        async getPresentationProfileStatus(recordingId: string): Promise<Recording.PresentationProfileStatus> {\r\n            const result = await rev.get(`/api/v2/pp/recording-status/${recordingId}`, undefined, { responseType: 'json' });\r\n            return result;\r\n        },\r\n        async stopPresentationProfileRecording(recordingId: string): Promise<Recording.StopPresentationProfileResponse> {\r\n            const payload = { scheduledRecordingId: recordingId };\r\n            const result = await rev.get(`/api/v2/vc/recording-status`, payload, { responseType: 'json' });\r\n            return result;\r\n        }\r\n    };\r\n    return recordingAPI;\r\n}\r\n","import polyfills from '../interop/polyfills';\r\nimport type { RevClient } from '../rev-client';\r\nimport type { Rev, Transcription, Video, Webcast } from '../types/index';\r\nimport type { Upload } from '../types/upload';\r\nimport { RateLimitEnum } from '../utils';\r\nimport { appendFileToForm, appendJSONToForm, uploadMultipart } from '../utils/multipart-utils';\r\n\r\nfunction splitOptions(options: Rev.UploadFileOptions & Rev.RequestOptions, defaultType?: string) {\r\n    const {\r\n        filename,\r\n        contentType,\r\n        contentLength,\r\n        useChunkedTransfer,\r\n        defaultContentType = defaultType,\r\n        ...requestOptions\r\n    } = options;\r\n\r\n    return {\r\n        requestOptions,\r\n        uploadOptions: {\r\n            ...filename && {filename},\r\n            ...contentType && {contentType},\r\n            ...contentLength && {contentLength},\r\n            ...useChunkedTransfer && {useChunkedTransfer},\r\n            defaultContentType\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport type API = ReturnType<typeof uploadAPIFactory>;\r\n/**\r\n * Functions to upload binary content to Rev.\r\n * @category Videos\r\n * @group API\r\n * @see [Upload API Docs](https://revdocs.vbrick.com/reference/uploadvideo-1)\r\n */\r\nexport interface UploadAPI extends API {};\r\n\r\n/** @ignore */\r\nexport default function uploadAPIFactory(rev: RevClient) {\r\n    const uploadAPI = {\r\n        /**\r\n         * Upload a video, and returns the resulting video ID\r\n         * @see [API Docs](https://revdocs.vbrick.com/reference/uploadvideo-1)\r\n         *\r\n         * @example\r\n         * ```js\r\n        const rev = new RevClient(...config...);\r\n        await rev.connect();\r\n\r\n        // if browser - pass in File\r\n        const file = fileInputElement.files[0];\r\n        // if nodejs - can pass in path to file instead\r\n        // const file = \"/path/to/local/video.mp4\";\r\n        // upload returns resulting ID when complete\r\n        const videoId = await rev.upload.video(file, {\r\n            uploader: 'username.of.uploader',\r\n            title: 'video uploaded via the API',\r\n            //categories: [EXISTING_REV_CATEGORY_NAME],\r\n            unlisted: true,\r\n            isActive: true\r\n            /// ...any additional metadata\r\n        });\r\n        ```\r\n         * @param file A File/Blob. if using nodejs you can also pass in the path to a file\r\n         * @param metadata metadata to add to video (title, etc.) - see API docs\r\n         * @param options Additional `RequestInit` options, as well as customizing the contentType/contentLength/filename of the `file` in the POST upload form (only needed if they can't be inferred from input)\r\n         * @returns the resulting video id\r\n         */\r\n        async video(\r\n            file: Rev.FileUploadType,\r\n            metadata: Video.UploadMetadata = { uploader: rev.session.username ?? '' },\r\n            options: Upload.VideoOptions = {}): Promise<string> {\r\n\r\n            const { uploadOptions, requestOptions } = splitOptions(options, 'video/mp4');\r\n\r\n            // prepare payload\r\n            const form = new polyfills.FormData();\r\n\r\n            // at bare minimum the uploader needs to be defined\r\n            if (!metadata.uploader) {\r\n                // if using username login then uploader can be set to current user\r\n                const defaultUsername = rev.session.username;\r\n                if (defaultUsername) {\r\n                    metadata.uploader = defaultUsername;\r\n                } else {\r\n                    throw new TypeError('metadata must include uploader parameter');\r\n                }\r\n            }\r\n\r\n            // add video metadata to body (as json)\r\n            appendJSONToForm(form, 'video', metadata);\r\n\r\n            // append file (works around some node's form-data library quirks)\r\n            const filePayload = await appendFileToForm(form, 'VideoFile', file, uploadOptions);\r\n\r\n            rev.log('info', `Uploading ${filePayload.filename} (${filePayload.contentType})`);\r\n\r\n            await rev.session.queueRequest(RateLimitEnum.UploadVideo);\r\n\r\n            const { videoId } = await uploadMultipart(rev, 'POST', '/api/v2/uploads/videos', form, filePayload, requestOptions);\r\n            return videoId;\r\n        },\r\n        /**\r\n         * Replace an existing video with an uploaded file\r\n         * @see [API Docs](https://revdocs.vbrick.com/reference/replacevideo)\r\n         */\r\n        async replaceVideo(videoId: string, file: Rev.FileUploadType, options: Upload.VideoOptions = {}): Promise<void> {\r\n            const { uploadOptions, requestOptions } = splitOptions(options, 'video/mp4');\r\n            const form = new polyfills.FormData();\r\n            const filePayload = await appendFileToForm(form, 'VideoFile', file, uploadOptions);\r\n\r\n            rev.log('info', `Replacing ${videoId} with ${filePayload.filename} (${filePayload.contentType})`);\r\n\r\n            await rev.session.queueRequest(RateLimitEnum.UploadVideo);\r\n\r\n            await uploadMultipart(rev, 'PUT', `/api/v2/uploads/videos/${videoId}`, form, filePayload, requestOptions);\r\n        },\r\n        async transcription(videoId: string, file: Rev.FileUploadType, language: Transcription.SupportedLanguage = 'en', options: Upload.TranscriptionOptions = { }): Promise<void> {\r\n            const { uploadOptions, requestOptions } = splitOptions(options, 'application/x-subrip');\r\n\r\n            const form = new polyfills.FormData();\r\n            const lang = language.toLowerCase();\r\n\r\n            // uploads will fail if files end with the txt file extension, so make sure it's set to a valid value\r\n            if (uploadOptions.contentType === 'text/plain' || uploadOptions.filename?.endsWith('txt')) {\r\n                uploadOptions.filename = `${uploadOptions.filename || 'upload'}.srt`;\r\n            }\r\n\r\n            const filePayload = await appendFileToForm(form, 'File', file, uploadOptions);\r\n            const metadata = {\r\n                files: [\r\n                    { language: lang, fileName: filePayload.filename }\r\n                ]\r\n            };\r\n            appendJSONToForm(form, 'TranscriptionFiles', metadata);\r\n\r\n            rev.log('info', `Uploading transcription to ${videoId} ${lang} ${filePayload.filename} (${filePayload.contentType})`);\r\n\r\n            await uploadMultipart(rev, 'POST', `/api/v2/uploads/transcription-files/${videoId}`, form, filePayload, requestOptions);\r\n        },\r\n        async supplementalFile(videoId: string, file: Rev.FileUploadType, options: Upload.SupplementalOptions = {}) {\r\n            const { uploadOptions, requestOptions } = splitOptions(options);\r\n\r\n            const form = new polyfills.FormData();\r\n\r\n            const filePayload = await appendFileToForm(form, 'File', file, uploadOptions);\r\n            const metadata = {\r\n                files: [\r\n                    { fileName: filePayload.filename }\r\n                ]\r\n            };\r\n            appendJSONToForm(form, 'SupplementalFiles', metadata);\r\n\r\n            rev.log('info', `Uploading supplemental content to ${videoId} ${filePayload.filename} (${filePayload.contentType})`);\r\n\r\n            await uploadMultipart(rev, 'POST', `/api/v2/uploads/supplemental-files/${videoId}`, form, filePayload, requestOptions);\r\n        },\r\n        /**\r\n         *\r\n         * @param videoId id of video to add chapters to\r\n         * @param chapters list of chapters. Must have time value and one of title or imageFile\r\n         * @param action replace = POST/replace existing with this payload\r\n         *               append = PUT/add or edit without removing existing\r\n         * @param options  additional upload + request options\r\n         */\r\n        async chapters(videoId: string, chapters: Video.Chapter.Request[], action: 'append' | 'replace' = 'replace', options: Rev.RequestOptions = {}) {\r\n            const { uploadOptions, requestOptions } = splitOptions(options, 'image/png');\r\n\r\n            const form = new polyfills.FormData();\r\n\r\n            type ChapterPayload = Video.Chapter.Request & {imageFile?: string};\r\n\r\n            const metadata: {chapters: ChapterPayload[]} = {\r\n                chapters: []\r\n            };\r\n\r\n            for (let [index, chapter] of chapters.entries()) {\r\n                const {\r\n                    title, time, imageFile, uploadOptions: fileUploadOptions = {}\r\n                } = chapter;\r\n\r\n                const chapterEntry: ChapterPayload = { time };\r\n                if (title) {\r\n                    chapterEntry.title = title;\r\n                }\r\n\r\n                if (imageFile) {\r\n                    const fileOpts = {\r\n                        ...uploadOptions,\r\n                        // explicitly set filename to avoid conflict with multiple chapters\r\n                        filename: `chapter${index + 1}`,\r\n                        ...fileUploadOptions,\r\n                    };\r\n                    const filePayload = await appendFileToForm(form, 'File', imageFile, fileOpts);\r\n                    // add image filename based on what was appended to form\r\n                    chapterEntry.imageFile = filePayload.filename;\r\n                }\r\n                metadata.chapters.push(chapterEntry);\r\n            }\r\n\r\n            appendJSONToForm(form, 'Chapters', metadata);\r\n\r\n            rev.log('info', `${action === 'replace' ? 'Uploading' : 'Updating'} ${metadata.chapters.length} chapters to ${videoId}`);\r\n\r\n            const method = action === 'replace'\r\n                ? 'POST'\r\n                : 'PUT';\r\n\r\n            await uploadMultipart(rev, method, `/api/v2/uploads/chapters/${videoId}`, form, uploadOptions, requestOptions);\r\n        },\r\n        async thumbnail(videoId: string, file: Rev.FileUploadType, options: Upload.ImageOptions = {}) {\r\n            const { uploadOptions, requestOptions } = splitOptions(options, 'image/jpeg');\r\n\r\n            const form = new polyfills.FormData();\r\n\r\n            const filePayload = await appendFileToForm(form, 'ThumbnailFile', file, uploadOptions);\r\n\r\n            rev.log('info', `Uploading thumbnail for ${videoId} ${filePayload.filename} (${filePayload.contentType})`);\r\n\r\n            await uploadMultipart(rev, 'POST', `/api/v2/uploads/images/${videoId}`, form, filePayload, requestOptions);\r\n        },\r\n        async presentationChapters(videoId: string, file: Rev.FileUploadType, options: Upload.PresentationChaptersOptions = {}) {\r\n            const { uploadOptions, requestOptions } = splitOptions(options, 'application/vnd.ms-powerpoint');\r\n\r\n            const form = new polyfills.FormData();\r\n\r\n            const filePayload = await appendFileToForm(form, 'PresentationFile', file, uploadOptions);\r\n\r\n            rev.log('info', `Uploading presentation for ${videoId} ${filePayload.filename} (${filePayload.contentType})`);\r\n\r\n            await uploadMultipart(rev, 'POST', `/api/v2/uploads/video-presentations/${videoId}`, form, filePayload, requestOptions);\r\n        },\r\n        async webcastPresentation(eventId: string, file: Rev.FileUploadType, options: Upload.PresentationChaptersOptions) {\r\n            const { uploadOptions, requestOptions } = splitOptions(options, 'application/vnd.ms-powerpoint');\r\n\r\n            const form = new polyfills.FormData();\r\n\r\n            const filePayload = await appendFileToForm(form, 'PresentationFile', file, uploadOptions);\r\n\r\n            rev.log('info', `Uploading presentation for ${eventId} ${filePayload.filename} (${filePayload.contentType})`);\r\n\r\n            await uploadMultipart(rev, 'POST', `/api/v2/uploads/presentations/${eventId}`, form, filePayload, requestOptions);\r\n        },\r\n        async webcastBackground(eventId: string, file: Rev.FileUploadType, options: Upload.ImageOptions) {\r\n            const { uploadOptions, requestOptions } = splitOptions(options, 'image/jpeg');\r\n\r\n            const form = new polyfills.FormData();\r\n\r\n            const filePayload = await appendFileToForm(form, 'ImageFile', file, uploadOptions);\r\n\r\n            rev.log('info', `Uploading background image for ${eventId} ${filePayload.filename} (${filePayload.contentType})`);\r\n\r\n            await uploadMultipart(rev, 'POST', `/api/v2/uploads/background-image/${eventId}`, form, filePayload, requestOptions);\r\n        },\r\n        async webcastProducerLayoutBackground(eventId: string, file: Rev.FileUploadType, options: Upload.ImageOptions) {\r\n            const { uploadOptions, requestOptions } = splitOptions(options, 'image/jpeg');\r\n\r\n            const form = new polyfills.FormData();\r\n\r\n            const filePayload = await appendFileToForm(form, 'ImageFile', file, uploadOptions);\r\n\r\n            rev.log('info', `Uploading producer layout background image for ${eventId} ${filePayload.filename} (${filePayload.contentType})`);\r\n\r\n            await uploadMultipart(rev, 'POST', `/api/v2/uploads/webcast-producer-bgimage/${eventId}`, form, filePayload, requestOptions);\r\n        },\r\n        async webcastBranding(eventId: string, request: Webcast.BrandingRequest, options: Upload.ImageOptions = { }): Promise<void> {\r\n            const { uploadOptions, requestOptions } = splitOptions(options, 'image/jpeg');\r\n\r\n            const form = new polyfills.FormData();\r\n\r\n            const logoOptions: Rev.UploadFileOptions = {\r\n                ...uploadOptions,\r\n                // make sure filename is by default unique\r\n                filename: 'logo',\r\n                ...(request.logoImageOptions ?? {})\r\n            };\r\n            const backgroundOptions: Rev.UploadFileOptions = {\r\n                ...uploadOptions,\r\n                // make sure filename is by default unique\r\n                filename: 'background',\r\n                ...(request.logoImageOptions ?? {})\r\n            };\r\n\r\n            const logoImagePayload = await appendFileToForm(form, 'LogoImageFile', request.logoImage, logoOptions);\r\n            const backgroundImagePayload = await appendFileToForm(form, 'BackgroundImageFile', request.backgroundImage, backgroundOptions);\r\n\r\n            const meta = {\r\n                ...request.branding,\r\n                logoImageFilename: logoImagePayload.filename,\r\n                backgroundImageFilename: backgroundImagePayload.filename\r\n            };\r\n\r\n            appendJSONToForm(form, 'Branding', meta);\r\n\r\n            rev.log('info', `Uploading webcast branding to ${eventId} (${meta.logoImageFilename} ${meta.backgroundImageFilename})`);\r\n\r\n            await uploadMultipart(rev, 'POST', `/api/v2/uploads/webcast-branding/${eventId}`, form, uploadOptions, requestOptions);\r\n        },\r\n        async channelLogo(channelId: string, file: Rev.FileUploadType, options: Upload.ImageOptions = {}) {\r\n            const { uploadOptions, requestOptions } = splitOptions(options, 'image/jpeg');\r\n\r\n            const form = new polyfills.FormData();\r\n\r\n            const filePayload = await appendFileToForm(form, 'ImageFile', file, uploadOptions);\r\n\r\n            rev.log('info', `Uploading channel logo for ${channelId} (${filePayload.filename} ${filePayload.contentType})`);\r\n\r\n            await uploadMultipart(rev, 'POST', `/api/v2/uploads/channel-logo/${channelId}`, form, filePayload, requestOptions);\r\n        },\r\n        /**\r\n         * @summary Upload Channel Header Image\r\n         * @see [API Docs](https://revdocs.vbrick.com/reference/uploadchannellogofile)\r\n         * @param channelId Id of the channel to upload image\r\n         * @param file image file\r\n         * @param options\r\n         */\r\n        async channelHeader(channelId: string, file: Rev.FileUploadType, options: Upload.ImageOptions = {}) {\r\n            const { uploadOptions, requestOptions } = splitOptions(options, 'image/jpeg');\r\n\r\n            const form = new polyfills.FormData();\r\n\r\n            const filePayload = await appendFileToForm(form, 'ImageFile', file, uploadOptions);\r\n\r\n            rev.log('info', `Uploading channel header for ${channelId} (${filePayload.filename} ${filePayload.contentType})`);\r\n\r\n            await uploadMultipart(rev, 'POST', `/api/v2/uploads/channel-header/${channelId}`, form, filePayload, requestOptions);\r\n        },\r\n        /**\r\n         * Upload a profile image for a given user. Only account admins can upload user profile image.\r\n         */\r\n        async userProfileImage(userId: string, file: Rev.FileUploadType, options: Upload.ImageOptions = {}) {\r\n            const { uploadOptions, requestOptions } = splitOptions(options, 'image/jpeg');\r\n\r\n            const form = new polyfills.FormData();\r\n\r\n            const filePayload = await appendFileToForm(form, 'ImageFile', file, uploadOptions);\r\n\r\n            await uploadMultipart(rev, 'POST', `/api/v2/uploads/profile-image/${userId}`, form, filePayload, requestOptions);\r\n        }\r\n    };\r\n\r\n    return uploadAPI;\r\n}\r\n","import type { RevClient } from '../rev-client';\r\nimport type { Rev, User } from '../types/index';\r\nimport type { LiteralString } from '../types/rev';\r\nimport { RateLimitEnum } from '../utils';\r\nimport { SearchRequest } from '../utils/request-utils';\r\n\r\n/** @ignore */\r\nexport type API = ReturnType<typeof userAPIFactory>;\r\n\r\n/**\r\n * User API methods\r\n * @category Users & Groups\r\n * @group API\r\n * @see [User API Docs](https://revdocs.vbrick.com/reference/createuser)\r\n */\r\nexport interface UserAPI extends API {}\r\n\r\n/** @ignore */\r\nexport default function userAPIFactory(rev: RevClient) {\r\n    /**\r\n     * Get details about a specific user\r\n     * By default it will lookup users by `userId`. To lookup by `username` or `email` pass in the second parameter `{lookupType}`. Specify the special value `'me'` to get details of the authenticated user\r\n     *\r\n     * @param userLookupValue userId, username or email\r\n     * @param options the lookup type {lookupType: 'username'} as well as any additional {@link Rev.RequestOptions | request options}\r\n     *\r\n     * @example\r\n     * ```js\r\n     * const rev = new RevClient(...config...);\r\n     * await rev.connect();\r\n     *\r\n     * // get details of the current user\r\n     * let user = await rev.user.details('me');\r\n     * // { userId: '<guid>', username: 'string', email: 'string', ... }\r\n     *\r\n     * // now get the same user record, just change the lookup criteria\r\n     * console.log('looking up by id', user.userId);\r\n     * user = await rev.user.details(user.userId);\r\n     *\r\n     * console.log('looking up by username', user.username);\r\n     * user = await rev.user.details(user.username, { lookupType: 'username' });\r\n     *\r\n     * console.log('looking up by email', user.email);\r\n     * user = await rev.user.details(user.email, { lookupType: 'email' });\r\n     * ```\r\n     *\r\n     * @see [Get User by ID](https://revdocs.vbrick.com/reference/getuser)\r\n     * @see [Get User by Username](https://revdocs.vbrick.com/reference/getuserbyusername)\r\n     * @see [Get User by Email](https://revdocs.vbrick.com/reference/getuserbyemail)\r\n     */\r\n    function details(userLookupValue: string, options?: User.DetailsOptions): Promise<User>;\r\n    /**\r\n     * @deprecated\r\n     * use {@link UserAPI.details | updated signature} `details(userLookupValue, {lookupType: 'userId' | 'username' | 'email'})` instead\r\n     */\r\n    function details(userLookupValue: string, type: 'userId' | 'email' | 'username'): Promise<User>;\r\n    async function details(userLookupValue: string, options: User.DetailsLookup | User.DetailsOptions = {}) {\r\n        const {lookupType, ...requestOptions} = typeof options === 'string'\r\n            ? {lookupType: options}\r\n            : options;\r\n\r\n        const query = (lookupType === 'username' || lookupType === 'email')\r\n            ? { type: lookupType }\r\n            : undefined;\r\n\r\n        const result = await rev.get(`/api/v2/users/${userLookupValue}`, query, {...requestOptions, responseType: 'json'});\r\n\r\n        // email lookup returns an array\r\n        return Array.isArray(result)\r\n            ? result[0]\r\n            : result;\r\n    }\r\n\r\n    const userAPI = {\r\n        /**\r\n         * get the list of roles available in the system (with role name and id)\r\n         */\r\n        get roles() {\r\n            return rev.admin.roles;\r\n        },\r\n        /**\r\n         * Create a new User in Rev\r\n         * @param user\r\n         * @returns the User ID of the created user\r\n         */\r\n        async create(user: User.Request): Promise<string> {\r\n            const { userId } = await rev.post('/api/v2/users', user);\r\n            return userId;\r\n        },\r\n        async delete(userId: string): Promise<void> {\r\n            await rev.delete(`/api/v2/users/${userId}`);\r\n        },\r\n        details,\r\n        /**\r\n         * Use the Details API to get information about currently logged in user\r\n         * @param requestOptions\r\n         */\r\n        async profile(requestOptions?: Rev.RequestOptions) {\r\n            return details('me', requestOptions);\r\n        },\r\n        /**\r\n         * get user details by username\r\n         * @deprecated use {@link UserAPI.details | user.details()} with `{lookupType: 'username'}`\r\n         */\r\n        async getByUsername(username: string) {\r\n            // equivalent to rev.get<User>(`/api/v2/users/${username}`, { type: 'username' });\r\n            return userAPI.details(username, {lookupType: 'username'});\r\n        },\r\n        /**\r\n         * get user details by email address\r\n         * @deprecated use {@link UserAPI.details | user.details()} with `{lookupType: 'email'}`\r\n         */\r\n        async getByEmail(email: string) {\r\n            return userAPI.details(email, {lookupType: 'email'});\r\n        },\r\n        /**\r\n         * Check if user exists in the system. Instead of throwing on a 401/403 error if\r\n         * user does not exist it returns `false`. Returns {@link User | user details} if does exist,\r\n         * instead of just `true`\r\n         * @param userLookupValue userId, username, or email\r\n         * @param type\r\n         * @returns User if exists, otherwise false\r\n         */\r\n        async exists(userLookupValue: string, type?: User.DetailsLookup): Promise<User | false> {\r\n            const query = (type === 'username' || type === 'email')\r\n            ? { type }\r\n            : undefined;\r\n\r\n            const response = await rev.request<User>('GET', `/api/v2/users/${userLookupValue}`, query, { responseType: 'json', throwHttpErrors: false });\r\n\r\n            return response.statusCode === 200\r\n                ? response.body\r\n                : false;\r\n        },\r\n        /**\r\n         * use PATCH API to add user to the specified group\r\n         * https://revdocs.vbrick.com/reference#edituserdetails\r\n         * @param {string} userId id of user in question\r\n         * @param {string} groupId\r\n         * @returns {Promise<void>}\r\n         */\r\n        async addToGroup(userId: string, groupId: string) {\r\n            const operations = [\r\n                { op: 'add', path: '/GroupIds/-', value: groupId }\r\n            ];\r\n            await rev.patch(`/api/v2/users/${userId}`, operations);\r\n        },\r\n        /**\r\n         * use PATCH API to add user to the specified group\r\n         * https://revdocs.vbrick.com/reference#edituserdetails\r\n         * @param {string} userId id of user in question\r\n         * @param {string} groupId\r\n         * @returns {Promise<void>}\r\n         */\r\n        async removeFromGroup(userId: string, groupId: string) {\r\n            const operations = [\r\n                { op: 'remove', path: '/GroupIds', value: groupId }\r\n            ];\r\n            await rev.patch(`/api/v2/users/${userId}`, operations);\r\n        },\r\n        async suspend(userId: string) {\r\n            const operations = [{ op: 'replace', path: '/ItemStatus', value: 'Suspended' }];\r\n            await rev.patch(`/api/v2/users/${userId}`, operations);\r\n        },\r\n        async unsuspend(userId: string) {\r\n            const operations = [{ op: 'replace', path: '/ItemStatus', value: 'Active' }];\r\n            await rev.patch(`/api/v2/users/${userId}`, operations);\r\n        },\r\n        /**\r\n         * search for users based on text query. Leave blank to return all users.\r\n         *\r\n         * @param {string} [searchText]\r\n         * @param {Rev.SearchOptions<{Id: string, Name: string}>} [options]\r\n         */\r\n        search(searchText?: string, options: Rev.AccessEntitySearchOptions<User.SearchHit> = { }): Rev.ISearchRequest<User.SearchHit> {\r\n            const {\r\n                assignable = false\r\n            } = options;\r\n            const searchDefinition = {\r\n                endpoint: `/api/v2/search/access-entity${assignable ? '/assignable' : ''}`,\r\n                totalKey: 'totalEntities',\r\n                hitsKey: 'accessEntities',\r\n                /**\r\n                 * the result of this search is uppercase keys. This transforms them to camelcase to match other API responses\r\n                 */\r\n                transform: (items: User.RawSearchHit[]) => items.map(formatUserSearchHit)\r\n            };\r\n            const query: Record<string, any> = { type: 'user' };\r\n            if (searchText) {\r\n                query.q = searchText;\r\n            }\r\n            return new SearchRequest(rev, searchDefinition, query, options);\r\n        },\r\n        get listChannels() {\r\n            return rev.channel.listUserChannels;\r\n        },\r\n        /**\r\n         * Returns the channel and category subscriptions for the user making the API call.\r\n         */\r\n        async listSubscriptions(): Promise<{ categories: string[], channels: string[] }> {\r\n            return rev.get('/api/v2/users/subscriptions');\r\n        },\r\n        async subscribe(id: string, type: LiteralString<'Channel' | 'Category'>): Promise<void> {\r\n            return rev.post('/api/v2/users/subscribe', { id, type });\r\n        },\r\n        /**\r\n         * Unsubscribe from specific channel or category.\r\n         */\r\n        async unsubscribe(id: string, type: LiteralString<'Channel' | 'Category'>): Promise<void> {\r\n            return rev.post('/api/v2/users/unsubscribe', { id, type });\r\n        },\r\n        async getNotifications(unread: boolean = false): Promise<{ count: number, notifications: User.Notification[]}> {\r\n            return rev.get('/api/v2/users/notifications', { unread });\r\n        },\r\n        /**\r\n         *\r\n         * @param notificationId If notificationId not provided, then all notifications for the user are marked as read.\r\n         */\r\n        async markNotificationRead(notificationId?: string): Promise<void> {\r\n            await rev.put('/api/v2/users/notifications', notificationId ? {notificationId} : undefined);\r\n        },\r\n        async loginReport(sortField?: User.LoginReportSort, sortOrder?: Rev.SortDirection): Promise<User.LoginReportEntry[]> {\r\n            const query = {\r\n                ...sortField && { sortField },\r\n                ...sortOrder && { sortOrder }\r\n            };\r\n            await rev.session.queueRequest(RateLimitEnum.GetUsersByLoginDate);\r\n            const {Users} = await rev.get('/api/v2/users/login-report', query, { responseType: 'json' });\r\n            return Users;\r\n        },\r\n        get uploadProfileImage() {\r\n            return rev.upload.userProfileImage;\r\n        },\r\n        deleteProfileImage(userId: string): Promise<void> {\r\n            return rev.delete(`/api/v2/users/${userId}/profile-image`);\r\n        }\r\n    };\r\n    return userAPI;\r\n}\r\n\r\nfunction formatUserSearchHit(hit: User.RawSearchHit): User.SearchHit {\r\n    return {\r\n        userId: hit.Id,\r\n        entityType: hit.EntityType,\r\n        email: hit.Email,\r\n        firstname: hit.FirstName,\r\n        lastname: hit.LastName,\r\n        username: hit.UserName,\r\n        profileImageUri: hit.ProfileImageUri\r\n    };\r\n}\r\n","import type { Rev, Transcription, Video } from \"../types\";\r\nimport { isPlainObject } from \"../utils\";\r\nimport type {RevClient} from \"../rev-client\";\r\n\r\n/** @ignore */\r\nexport function videoDownloadAPI(rev: RevClient) {\r\n    /**\r\n     * Download a video. does not parse the output body. Note that content is sent as transfer-encoding: chunked;\r\n     * @param videoId\r\n     * @returns\r\n     */\r\n    async function download<T = ReadableStream>(videoId: string, options: Rev.RequestOptions = {}): Promise<Rev.Response<T>> {\r\n        const response = await rev.request<T>('GET', `/api/v2/videos/${videoId}/download`, undefined, {\r\n            responseType: 'stream',\r\n            ...options\r\n        });\r\n        return response;\r\n    }\r\n\r\n    /**\r\n     * download specified chapter. The chapter object has an imageUrl, this just wraps the functionality and adds the authorization header\r\n     * @param chapter chapter object returned from the video.chapters(videoId) API call\r\n     * @returns\r\n     */\r\n    async function downloadChapter(chapter: Video.Chapter, options: Rev.RequestOptions = {}) {\r\n        const {imageUrl} = chapter;\r\n        const { body } = await rev.request<Blob>('GET', imageUrl, undefined, { responseType: 'blob', ...options });\r\n        return body;\r\n    }\r\n\r\n    async function downloadSupplemental<T = Blob>(file: Video.SupplementalFile, options?: Rev.RequestOptions): Promise<T>;\r\n    async function downloadSupplemental<T = Blob>(videoId: string, fileId: string, options?: Rev.RequestOptions): Promise<T>;\r\n    async function downloadSupplemental<T = Blob>(videoId: Video.SupplementalFile | string, fileId?: string | Rev.RequestOptions, options?: Rev.RequestOptions): Promise<T> {\r\n        const endpoint = isPlainObject(videoId)\r\n            ? videoId.downloadUrl\r\n            : `/api/v2/videos/${videoId}/supplemental-files/${fileId}`;\r\n\r\n        const opts = isPlainObject(fileId) ? fileId : options;\r\n\r\n        const { body } = await rev.request<T>('GET', endpoint, undefined, { responseType: 'blob', ...opts });\r\n        return body;\r\n    }\r\n\r\n    async function downloadTranscription<T = Blob>(transcription: Transcription, options?: Rev.RequestOptions): Promise<T>;\r\n    async function downloadTranscription<T = Blob>(videoId: string, language: string, options?: Rev.RequestOptions): Promise<T>;\r\n    async function downloadTranscription<T = Blob>(videoId: Transcription | string, language?: string | Rev.RequestOptions, options?: Rev.RequestOptions): Promise<T> {\r\n        const endpoint = isPlainObject(videoId)\r\n            ? videoId.downloadUrl\r\n            : `/api/v2/videos/${videoId}/transcription-files/${language}`;\r\n\r\n        const opts = isPlainObject(language) ? language : options;\r\n\r\n        const { body } = await rev.request<T>('GET', endpoint, undefined, { responseType: 'blob', ...opts });\r\n        return body;\r\n    }\r\n\r\n    async function downloadThumbnail<T = Blob>(thumbnailUrl: string, options?: Rev.RequestOptions): Promise<T>;\r\n    async function downloadThumbnail<T = Blob>(query: { imageId: string }, options?: Rev.RequestOptions): Promise<T>;\r\n    async function downloadThumbnail<T = Blob>(query: { videoId: string }, options?: Rev.RequestOptions): Promise<T>;\r\n    async function downloadThumbnail<T = Blob>(query: string | { videoId?: string, imageId?: string; }, options: Rev.RequestOptions = {}): Promise<T> {\r\n        let {\r\n            videoId = '',\r\n            imageId = ''\r\n        } = typeof query === 'string'\r\n                ? { imageId: query }\r\n                : query;\r\n\r\n        if (!(videoId || imageId)) {\r\n            throw new TypeError('No video/image specified to download');\r\n        }\r\n\r\n        let thumbnailUrl: string = '';\r\n\r\n        if (videoId) {\r\n            thumbnailUrl = `/api/v2/videos/${videoId}/thumbnail`;\r\n            // allow getting from api if only know the video ID\r\n            // imageId = (await rev.get<{video: Video.Playback}>(`/api/v2/videos/${videoId}/playback-url`)).video.thumbnailUrl;\r\n        } else if (imageId.startsWith('http')) {\r\n            // thumbnail URI\r\n            thumbnailUrl = `${imageId}${!imageId.endsWith('.jpg') ? '.jpg' : ''}`;\r\n        } else {\r\n            thumbnailUrl = `/api/v2/media/videos/thumbnails/${imageId}.jpg`;\r\n        }\r\n\r\n        const { body } = await rev.request<T>('GET', thumbnailUrl, undefined, { responseType: 'blob', ...options });\r\n        return body;\r\n    }\r\n    /**\r\n     * Download the thumbnail sheet image for a video\r\n     * @param thumbnailSheet the thumbnailSheetUri or Thumbnail Configuration (get from video.thumbnailConfiguration)\r\n     * @param options\r\n     * @returns\r\n     */\r\n    async function downloadThumbnailSheet<T = Blob>(thumbnailSheet: string, options?: Rev.RequestOptions): Promise<T>;\r\n    async function downloadThumbnailSheet<T = Blob>(thumbnailSheet: Video.ThumbnailConfiguration, options?: Rev.RequestOptions): Promise<T>;\r\n    async function downloadThumbnailSheet<T = Blob>(thumbnailSheet: { videoId: string, sheetIndex?: string | number }, options?: Rev.RequestOptions): Promise<T>;\r\n    async function downloadThumbnailSheet<T = Blob>(thumbnailSheet: string | { videoId: string, sheetIndex?: string | number } | Video.ThumbnailConfiguration, options?: Rev.RequestOptions): Promise<T> {\r\n        let thumbnailSheetsUri = '';\r\n        if (typeof thumbnailSheet === 'string') {\r\n            thumbnailSheetsUri = thumbnailSheet;\r\n        } else if (thumbnailSheet && typeof thumbnailSheet === 'object' && 'thumbnailSheetsUri' in thumbnailSheet) {\r\n            thumbnailSheetsUri = thumbnailSheet.thumbnailSheetsUri;\r\n        } else if (thumbnailSheet?.videoId) {\r\n            const {videoId, sheetIndex = '1'} = thumbnailSheet;\r\n            thumbnailSheetsUri = `/api/v2/videos/${videoId}/thumbnail-sheets/${sheetIndex}`;\r\n        }\r\n\r\n        if (!thumbnailSheetsUri) {\r\n            throw new TypeError('No thumbnail sheet specified to download');\r\n        }\r\n\r\n        const { body } = await rev.request<T>('GET', thumbnailSheetsUri, undefined, { responseType: 'blob', ...options });\r\n        return body;\r\n    }\r\n\r\n    return {\r\n        download,\r\n        downloadChapter,\r\n        downloadSupplemental,\r\n        downloadThumbnail,\r\n        downloadTranscription,\r\n        downloadThumbnailSheet\r\n    };\r\n}\r\n","import type { Rev, Video } from \"../types\";\r\nimport type { ExternalAccess } from '../types/video';\r\nimport { isPlainObject } from \"../utils\";\r\nimport type {RevClient} from \"../rev-client\";\r\nimport { SearchRequest } from \"../utils/request-utils\";\r\n\r\n/** @ignore */\r\nexport function videoExternalAccessAPI(rev: RevClient) {\r\n    return {\r\n        /**\r\n         *\r\n         * @param videoId Id of video to submit emails for external access\r\n         * @param q       Search string\r\n         * @param options search options\r\n         * @returns\r\n         */\r\n        listExternalAccess(videoId: string, q?: string, options?: Rev.SearchOptions<ExternalAccess>): Rev.ISearchRequest<ExternalAccess> {\r\n            const searchDefinition: Rev.SearchDefinition<ExternalAccess> = {\r\n                endpoint: `/api/v2/videos/${videoId}/external-access`,\r\n                /** NOTE: this API doesn't actually return a total, so this will always be undefined */\r\n                totalKey: 'total',\r\n                hitsKey: 'items'\r\n            };\r\n            const payload = q ? {q} : undefined;\r\n            return new SearchRequest<ExternalAccess>(rev, searchDefinition, payload, options);\r\n        },\r\n        async createExternalAccess(videoId: string, request: ExternalAccess.Request): Promise<void> {\r\n            await rev.post(`/api/v2/videos/${videoId}/external-access`, request);\r\n        },\r\n        async renewExternalAccess(videoId: string, request: Pick<ExternalAccess.Request, 'emails' | 'noEmail'>): Promise<ExternalAccess.RenewResponse> {\r\n            return rev.put(`/api/v2/videos/${videoId}/external-access`, request);\r\n        },\r\n        async deleteExternalAccess(videoId: string, request: Pick<ExternalAccess.Request, 'emails'>) {\r\n            return rev.delete(`/api/v2/videos/${videoId}/external-access`, request);\r\n        },\r\n        async revokeExternalAccess(videoId: string, request: Pick<ExternalAccess.Request, 'emails'>) {\r\n            return rev.put<void>(`/api/v2/videos/${videoId}/external-access/revoke`, request);\r\n        }\r\n    }\r\n}\r\n","import type { RevClient } from '../rev-client';\r\nimport type { Rev, Video } from '../types/index';\r\nimport { RateLimitEnum, asValidDate, isPlainObject } from '../utils';\r\nimport { PagedRequest } from '../utils/paged-request';\r\n\r\n\r\nconst DEFAULT_INCREMENT: number = 30;\r\nconst DEFAULT_SORT: Rev.SortDirection = 'asc';\r\n\r\nfunction addDays(date: Date, numDays: number) {\r\n    const d = new Date(date.getTime());\r\n    d.setDate(d.getDate() + numDays);\r\n    return d;\r\n}\r\n\r\nfunction parseOptions(options: Video.VideoReportOptions) {\r\n    let {\r\n        incrementDays = DEFAULT_INCREMENT,\r\n        sortDirection = DEFAULT_SORT,\r\n        videoIds,\r\n        startDate,\r\n        endDate,\r\n        ...otherOptions\r\n    } = options;\r\n\r\n    // clamp increment to 1 minute - 30 days range\r\n    incrementDays = Math.min(\r\n        Math.max(\r\n            1 / 24 / 60,\r\n            parseFloat(incrementDays as any) || DEFAULT_INCREMENT\r\n        ),\r\n        30\r\n    );\r\n\r\n    // API expects videoIds as a string\r\n    if (Array.isArray(videoIds)) {\r\n        videoIds = videoIds\r\n            .map(s => s.trim())\r\n            .filter(Boolean)\r\n            .join(',');\r\n    }\r\n\r\n    return {\r\n        incrementDays, sortDirection, videoIds,\r\n        ...parseDates(startDate, endDate),\r\n        ...otherOptions\r\n    };\r\n}\r\n\r\nfunction parseDates(startArg: string | Date | undefined, endArg: string | Date | undefined) {\r\n    const now = new Date();\r\n    let startDate = asValidDate(startArg);\r\n    let endDate = asValidDate(endArg);\r\n\r\n    // if no end date set then use now, or startDate + 30 days\r\n    if (!endDate) {\r\n        if (startDate) {\r\n            endDate = addDays(startDate, 30);\r\n            if (endDate.getTime() > now.getTime()) {\r\n                endDate = now;\r\n            }\r\n        } else {\r\n            endDate = now;\r\n        }\r\n    }\r\n    // if no start/beginning date then use end - 30 days\r\n    if (!startDate)\r\n    {\r\n        startDate = addDays(endDate, -30);\r\n    }\r\n\r\n    // make sure times aren't swapped\r\n    if (startDate.getTime() > endDate.getTime()) {\r\n        [startDate, endDate] = [endDate, startDate];\r\n    }\r\n    return { startDate, endDate };\r\n}\r\n\r\n/** @category Videos */\r\nexport class VideoReportRequest extends PagedRequest<Video.VideoReportEntry> {\r\n    declare options: Required<ReturnType<typeof parseOptions>> & {scrollId?: string};\r\n    private _rev: RevClient;\r\n    private _endpoint: string;\r\n    /**\r\n     * @hidden\r\n     * @param rev\r\n     * @param options\r\n     * @param endpoint\r\n     */\r\n    constructor(rev: RevClient, options: Video.VideoReportOptions = {}, endpoint = \"/api/v2/videos/report\") {\r\n        super(parseOptions(options));\r\n        this._endpoint = endpoint;\r\n        this._rev = rev;\r\n    }\r\n    protected async _requestPage() {\r\n        const { startDate, endDate } = this;\r\n        const {incrementDays, sortDirection, videoIds, scrollId } = this.options;\r\n        const isAscending = sortDirection === 'asc';\r\n\r\n        let rangeStart = startDate;\r\n        let rangeEnd = endDate;\r\n        let done = false;\r\n\r\n        if (isAscending) {\r\n            rangeEnd = addDays(rangeStart, incrementDays);\r\n            if (rangeEnd >= endDate) {\r\n                done = true;\r\n                rangeEnd = endDate;\r\n            }\r\n        } else {\r\n            rangeStart = addDays(rangeEnd, -1 * incrementDays);\r\n            if (rangeStart <= startDate)\r\n            {\r\n                done = true;\r\n                rangeStart = startDate;\r\n            }\r\n        }\r\n\r\n        const query: Record<string, string> = {\r\n            after: rangeStart.toJSON(),\r\n            before: rangeEnd.toJSON(),\r\n            ...scrollId && {scrollId},\r\n            ...videoIds && {videoIds}\r\n        };\r\n\r\n        await this._rev.session.queueRequest(RateLimitEnum.GetVideoViewReport);\r\n        const page = await this._rev.post<{ sessions: Video.VideoReportEntry[], total: number, scrollId?: string }>(this._endpoint, query, { responseType: \"json\" });\r\n\r\n        const items = page.sessions ?? [];\r\n        this.options.scrollId = items.length === 0 ? undefined : page.scrollId;\r\n\r\n        // keep requesting same page if scrollId was returned\r\n        if (this.options.scrollId) {\r\n            done = false;\r\n        } else if (!done) {\r\n            // go to next date range\r\n            if (isAscending) {\r\n                this.startDate = rangeEnd;\r\n            } else {\r\n                this.endDate = rangeStart;\r\n            }\r\n        }\r\n\r\n        return {\r\n            items,\r\n            done\r\n        };\r\n    }\r\n    get startDate() { return this.options.startDate; }\r\n    set startDate(value) { this.options.startDate = value; }\r\n    get endDate() { return this.options.endDate; }\r\n    set endDate(value) { this.options.endDate = value; }\r\n}\r\n\r\n/** @ignore */\r\nexport function videoReportAPI(rev: RevClient) {\r\n    function report(options?: Video.VideoReportOptions): VideoReportRequest;\r\n    function report(videoId: string, options?: Video.VideoReportOptions): VideoReportRequest;\r\n    function report(videoId?: string | Video.VideoReportOptions, options: Video.VideoReportOptions = {}): VideoReportRequest {\r\n        if (isPlainObject(videoId)) {\r\n            options = videoId;\r\n        } else if (typeof videoId === 'string') {\r\n            options = {\r\n                ...(options ?? {}),\r\n                videoIds: videoId\r\n            };\r\n        }\r\n        return new VideoReportRequest(rev, options, '/api/v2/videos/report');\r\n    }\r\n    function summaryStatistics(videoId: string, startDate?: undefined, endDate?: undefined, options?: Rev.RequestOptions): Promise<Video.SummaryStatistics>;\r\n    function summaryStatistics(videoId: string, startDate: Date | string, endDate?: undefined, options?: Rev.RequestOptions): Promise<Video.SummaryStatistics>;\r\n    function summaryStatistics(videoId: string, startDate: Date | string, endDate: Date | string, options?: Rev.RequestOptions): Promise<Video.SummaryStatistics>;\r\n    function summaryStatistics(videoId: string, startDate?: Date | string, endDate: Date | string | undefined = new Date(), options?: Rev.RequestOptions): Promise<Video.SummaryStatistics> {\r\n        const payload = startDate\r\n            ? { after: new Date(startDate).toISOString(), before: asValidDate(endDate, new Date()).toISOString() }\r\n            : undefined;\r\n        return rev.get(`/api/v2/videos/${videoId}/summary-statistics`, payload, options);\r\n    }\r\n    return {\r\n        report,\r\n        uniqueSessionsReport(videoId: string, options: Video.UniqueSessionReportOptions = {}) {\r\n            return new VideoReportRequest(rev, options, `/api/v2/videos/${videoId}/report`);\r\n        },\r\n        summaryStatistics\r\n    };\r\n}\r\n","import type { RevClient } from '../rev-client';\r\nimport { RevError } from '../rev-error';\r\nimport type { Admin, Rev, Transcription, Video } from '../types/index';\r\nimport { RateLimitEnum, sleep } from '../utils';\r\nimport { mergeHeaders } from '../utils/merge-headers';\r\nimport { SearchRequest } from '../utils/request-utils';\r\nimport { videoDownloadAPI } from './video-download';\r\nimport { videoExternalAccessAPI } from './video-external-access';\r\nimport { videoReportAPI } from './video-report-request';\r\n\r\n/** @ignore */\r\ntype VideoSearchDetailedItem = Video.SearchHit & (Video.Details | { error?: Error });\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport type API = ReturnType<typeof videoAPIFactory>;\r\n\r\n/**\r\n * Video API methods\r\n * @category Videos\r\n * @group API\r\n * @see [Video API Docs](https://revdocs.vbrick.com/reference/searchvideo)\r\n */\r\nexport interface VideoAPI extends API {};\r\n\r\n/** @ignore */\r\nexport default function videoAPIFactory(rev: RevClient) {\r\n    /** get list of comments on a video\r\n     *\r\n     * set `showAll` param to `true` to include un-redacted values of comments (admin only)\r\n     */\r\n    function comments(videoId: string): Promise<Video.Comment[]>;\r\n    function comments(videoId: string, showAll: true): Promise<Video.Comment.Unredacted[]>;\r\n    async function comments(videoId: string, showAll: boolean = false): Promise<Video.Comment[] | Video.Comment.Unredacted[]> {\r\n        const response = await rev.get<Video.Comment.ListResponse>(`/api/v2/videos/${videoId}/comments`, showAll ? { showAll: 'true' } : undefined);\r\n        return response.comments;\r\n    }\r\n\r\n    const videoAPI = {\r\n        /**\r\n         * This is an example of using the video Patch API to only update a single field\r\n         * @param videoId\r\n         * @param title\r\n         */\r\n        async setTitle(videoId: string, title: string) {\r\n            const payload = [{ op: 'add', path: '/Title', value: title }];\r\n            await rev.session.queueRequest(RateLimitEnum.UpdateVideoMetadata);\r\n            await rev.patch(`/api/v2/videos/${videoId}`, payload);\r\n        },\r\n        /**\r\n         * Use the Patch API to update a single Custom Field.\r\n         * @param videoId - id of video to update\r\n         * @param customField - the custom field object (with id and value)\r\n         */\r\n        async setCustomField(videoId: string, customField: Pick<Admin.CustomField, 'id' | 'value'>) {\r\n            // LEGACY behavior, only relevant for Rev < 7.48\r\n            // const payload = [\r\n            //     { op: 'remove', path: '/customFields', value: customField.id },\r\n            //     { op: 'add', path: '/customFields/-', value: customField }\r\n            // ];\r\n            const payload = [{\r\n                op: 'replace',\r\n                path: '/CustomFields',\r\n                value: [customField]\r\n            }];\r\n            await rev.session.queueRequest(RateLimitEnum.UpdateVideoMetadata);\r\n            await rev.patch(`/api/v2/videos/${videoId}`, payload);\r\n        },\r\n        async delete(videoId: string, options?: Rev.RequestOptions): Promise<void> {\r\n            await rev.session.queueRequest(RateLimitEnum.UpdateVideoMetadata);\r\n            await rev.delete(`/api/v2/videos/${videoId}`, undefined, options);\r\n            // TIP: If delete returns a 401 then video has likely already been deleted\r\n        },\r\n        /**\r\n         * get processing status of a video\r\n         * @see [API Docs](https://revdocs.vbrick.com/reference/getvideostatus)\r\n         */\r\n        async status(videoId: string, options?: Rev.RequestOptions): Promise<Video.StatusResponse> {\r\n            return rev.get(`/api/v2/videos/${videoId}/status`, undefined, options);\r\n        },\r\n        /**\r\n         * get details of a video\r\n         * @see [API Docs](https://revdocs.vbrick.com/reference/getvideosdetails)\r\n         * @param videoId\r\n         * @param options\r\n         * @returns\r\n         */\r\n        async details(videoId: string, options?: Rev.RequestOptions): Promise<Video.Details> {\r\n            await rev.session.queueRequest(RateLimitEnum.GetVideoDetails);\r\n            return rev.get(`/api/v2/videos/${videoId}/details`, undefined, options);\r\n        },\r\n        async update(videoId: string, metadata: Video.UpdateRequest, options?: Rev.RequestOptions): Promise<void> {\r\n            await rev.session.queueRequest(RateLimitEnum.UpdateVideoMetadata);\r\n            await rev.put(`/api/v2/videos/${videoId}`, metadata, options);\r\n        },\r\n        comments,\r\n        async chapters(videoId: string, options?: Rev.RequestOptions): Promise<Video.Chapter[]> {\r\n            try {\r\n                const {chapters} = await rev.get<{chapters: Video.Chapter[]}>(`/api/v2/videos/${videoId}/chapters`, undefined, options);\r\n                return chapters;\r\n            } catch (err) {\r\n                // if no chapters then this api returns a 400 response\r\n                if (err instanceof RevError && err.code === \"NoVideoChapters\") {\r\n                    return [];\r\n                }\r\n                throw err;\r\n            }\r\n        },\r\n        async supplementalFiles(videoId: string, options?: Rev.RequestOptions): Promise<Video.SupplementalFile[]> {\r\n            const {supplementalFiles} = await rev.get(`/api/v2/videos/${videoId}/supplemental-files`, undefined, options);\r\n            return supplementalFiles;\r\n        },\r\n        async thumbnailConfiguration(videoId: string, options?: Rev.RequestOptions): Promise<Video.ThumbnailConfiguration> {\r\n            const {thumbnailCfg} = await rev.get(`/api/v2/videos/${videoId}/thumbnail-config`, undefined, options);\r\n            return thumbnailCfg;\r\n        },\r\n        async transcriptions(videoId: string, options?: Rev.RequestOptions): Promise<Transcription[]> {\r\n            const {transcriptionFiles} = await rev.get(`/api/v2/videos/${videoId}/transcription-files`, undefined, options);\r\n            return transcriptionFiles;\r\n        },\r\n        get upload() {\r\n            return rev.upload.video;\r\n        },\r\n        get replace() {\r\n            return rev.upload.replaceVideo;\r\n        },\r\n        async migrate(videoId: string, options: Video.MigrateRequest, requestOptions?: Rev.RequestOptions) {\r\n            await rev.session.queueRequest(RateLimitEnum.UpdateVideoMetadata);\r\n            await rev.put(`/api/v2/videos/${videoId}/migration`, options, requestOptions);\r\n        },\r\n        /**\r\n         * search for videos, return as one big list. leave blank to get all videos in the account\r\n         */\r\n        search(query: Video.SearchOptions = { }, options: Rev.SearchOptions<Video.SearchHit> = { }): Rev.ISearchRequest<Video.SearchHit> {\r\n            const searchDefinition: Rev.SearchDefinition<Video.SearchHit> = {\r\n                endpoint: '/api/v2/videos/search',\r\n                totalKey: 'totalVideos',\r\n                hitsKey: 'videos',\r\n                async request(endpoint, query, options) {\r\n                    await rev.session.queueRequest(RateLimitEnum.SearchVideos);\r\n                    return rev.get(endpoint, query, options);\r\n                }\r\n            };\r\n            const request = new SearchRequest<Video.SearchHit>(rev, searchDefinition, query, options);\r\n            return request;\r\n        },\r\n        /**\r\n         * Example of using the video search API to search for videos, then getting\r\n         * the details of each video\r\n         * @deprecated This method can cause timeouts if iterating through a very\r\n         *             large number of results, as the search scroll cursor has a\r\n         *             timeout of ~5 minutes. Consider getting all search results\r\n         *             first, then getting details\r\n         * @param query\r\n         * @param options\r\n         */\r\n        searchDetailed(\r\n            query: Video.SearchOptions = { },\r\n            options: Rev.SearchOptions<VideoSearchDetailedItem> = { }\r\n        ): Rev.ISearchRequest<VideoSearchDetailedItem> {\r\n            const searchDefinition = {\r\n                endpoint: '/api/v2/videos/search',\r\n                totalKey: 'totalVideos',\r\n                hitsKey: 'videos',\r\n                transform: async (videos: Video.SearchHit[]) => {\r\n                    const result: Array<Video.SearchHit & (Video.Details & { error?: Error; })> = [];\r\n                    for (let rawVideo of videos) {\r\n                        const out: Video.SearchHit & (Video.Details & { error?: Error; }) = rawVideo as any;\r\n                        try {\r\n                            const details = await videoAPI.details(rawVideo.id);\r\n                            Object.assign(out, details);\r\n                        } catch (error: any) {\r\n                            out.error = error;\r\n                        }\r\n                        result.push(out);\r\n                    }\r\n                    return result;\r\n                }\r\n            };\r\n            const request = new SearchRequest<Video.SearchHit>(rev, searchDefinition, query, options);\r\n            return request;\r\n        },\r\n        async playbackInfo(videoId: string): Promise<Video.Playback> {\r\n            const { video } = await rev.get(`/api/v2/videos/${videoId}/playback-url`);\r\n            return video;\r\n        },\r\n        async playbackUrls(videoId: string, {ip, userAgent}: Video.PlaybackUrlsRequest = {}, options?: Rev.RequestOptions): Promise<Video.PlaybackUrlsResponse> {\r\n            const query = ip ? { ip } : undefined;\r\n\r\n            const opts: Rev.RequestOptions = {\r\n                ...options,\r\n                ...userAgent && {\r\n                    headers: mergeHeaders(options?.headers, { 'User-Agent': userAgent })\r\n                },\r\n                responseType: 'json'\r\n            };\r\n\r\n            return rev.get(`/api/v2/videos/${videoId}/playback-urls`, query, opts);\r\n        },\r\n        ...videoDownloadAPI(rev),\r\n        ...videoReportAPI(rev),\r\n        ...videoExternalAccessAPI(rev),\r\n        listDeleted(query: Video.RemovedVideosQuery = {}, options: Rev.SearchOptions<Video.RemovedVideoItem> = {}): Rev.ISearchRequest<Video.RemovedVideoItem> {\r\n            const searchDefinition: Rev.SearchDefinition<Video.RemovedVideoItem> = {\r\n                endpoint: '/api/v2/videos/deleted',\r\n                totalKey: 'totalVideos',\r\n                hitsKey: 'deletedVideos',\r\n                async request(endpoint, query, options) {\r\n                    await rev.session.queueRequest(RateLimitEnum.SearchVideos);\r\n                    return rev.get(endpoint, query, options);\r\n                }\r\n            };\r\n            const request = new SearchRequest<Video.RemovedVideoItem>(rev, searchDefinition, query, options);\r\n            return request;\r\n        },\r\n        /**\r\n         * @deprecated Use edit() API instead\r\n         */\r\n        async trim(videoId: string, removedSegments: Array<{ start: string, end: string }>) {\r\n            await rev.session.queueRequest(RateLimitEnum.UploadVideo);\r\n            return rev.post(`/api/v2/videos/${videoId}/trim`, removedSegments);\r\n        },\r\n        async convertDualStreamToSwitched(videoId: string) {\r\n            await rev.session.queueRequest(RateLimitEnum.UpdateVideoMetadata);\r\n            return rev.put<void>(`/api/v2/videos/${videoId}/convert-dual-streams-to-switched-stream`);\r\n        },\r\n        async edit(videoId: string, keepRanges: Video.ClipRequest[], options?: Rev.RequestOptions) {\r\n            await rev.session.queueRequest(RateLimitEnum.UploadVideo);\r\n            return rev.post(`/api/v2/videos/${videoId}/edit`, keepRanges, options);\r\n        },\r\n        async patch(videoId: string, operations: Rev.PatchOperation[], options?: Rev.RequestOptions) {\r\n            await rev.session.queueRequest(RateLimitEnum.UpdateVideoMetadata);\r\n            await rev.patch(`/api/v2/videos/${videoId}`, operations, options);\r\n        },\r\n        async generateMetadata(videoId: string, fields: Video.MetadataGenerationField[] = [\"all\"], options?: Rev.RequestOptions) {\r\n            await rev.session.queueRequest(RateLimitEnum.UpdateVideoMetadata);\r\n            await rev.put(`/api/v2/videos/${videoId}/generate-metadata`, { metadataGenerationFields: fields }, options);\r\n        },\r\n        async generateMetadataStatus(videoId: string, options?: Rev.RequestOptions): Promise<Video.MetadataGenerationStatus> {\r\n            const {description} = await rev.get(`/api/v2/videos/${videoId}/metadata-generation-status`, undefined, {...options, responseType: 'json'});\r\n            return description.status;\r\n        },\r\n        async transcribe(videoId: string, language: Transcription.SupportedLanguage | Transcription.Request, options?: Rev.RequestOptions): Promise<Transcription.Status> {\r\n            const payload = typeof language === 'string' ? { language } : language;\r\n            return rev.post(`/api/v2/videos/${videoId}/transcription`, payload, {...options, responseType: 'json'})\r\n        },\r\n        async transcriptionStatus(videoId: string, transcriptionId: string, options?: Rev.RequestOptions): Promise<Transcription.Status> {\r\n            return rev.get(`/api/v2/videos/${videoId}/transcriptions/${transcriptionId}/status`, undefined, {...options, responseType: 'json'});\r\n        },\r\n        async translate(videoId: string, source: Transcription.TranslateSource, target: Transcription.SupportedLanguage | Transcription.SupportedLanguage[], options?: Rev.RequestOptions): Promise<Transcription.TranslateResult> {\r\n            const payload = {\r\n                sourceLanguage: source,\r\n                targetLanguages: typeof target === 'string' ? [target] : target\r\n            };\r\n            return rev.post(`/api/v2/videos/${videoId}/translations`, payload, {...options, responseType: 'json'});\r\n        },\r\n        async getTranslationStatus(videoId: string, language: Transcription.SupportedLanguage, options?: Rev.RequestOptions): Promise<Transcription.StatusEnum> {\r\n            const {status} = await rev.get(`/api/v2/videos/${videoId}/translations/${language}/status`, undefined, {...options, responseType: 'json'});\r\n            return status;\r\n        },\r\n        /**\r\n         * Deletes all (or specified) transcriptions that have been uploaded for a given video.\r\n         * @param videoId\r\n         * @param language single or list of locales, as returned from the `rev.video.transcriptions` endpoint\r\n         * @param options\r\n         */\r\n        async deleteTranscription(videoId: string, language?: Transcription.SupportedLanguage | Transcription.SupportedLanguage[], options?: Rev.RequestOptions): Promise<void> {\r\n            const locale = Array.isArray(language) ? language.map(s => s.trim()).join(',') : language;\r\n            await rev.delete(`/api/v2/videos/${videoId}/transcription-files`, locale ? {locale} : undefined, options);\r\n        },\r\n        /**\r\n         * Deletes all (or specified) supplemental files that have been uploaded for a given video.\r\n         * @param videoId\r\n         * @param fileId single or list of fileIds, as returned from the `rev.video.supplementalFiles` endpoint\r\n         */\r\n        async deleteSupplementalFiles(videoId: string, fileId: string | string[], options?: Rev.RequestOptions): Promise<void> {\r\n            const fileIds = Array.isArray(fileId)\r\n                ? fileId.join(',')\r\n                : fileId\r\n            await rev.delete(`/api/v2/videos/${videoId}/supplemental-files`, { fileIds }, options);\r\n        },\r\n        /**\r\n         * Deletes all (or specified) video chapters that have been uploaded for a given video.\r\n         * @param videoId\r\n         * @param startTime single or list of chapter start times, as returned from the `rev.video.chapters` endpoint\r\n         */\r\n        async deleteChapters(videoId: string, startTime: string | string[], options?: Rev.RequestOptions): Promise<void> {\r\n            startTime = Array.isArray(startTime)\r\n                ? startTime.join(',')\r\n                : startTime\r\n            await rev.delete(`/api/v2/videos/${videoId}/chapters`, { startTime }, options);\r\n        },\r\n        /**\r\n         * Deletes all (or specified) video comments for a given video.\r\n         * @param videoId\r\n         * @param commentIds single or list of comment ids, as returned from the `rev.video.comments` endpoint *(`id` parameter for each comment)*\r\n         */\r\n        async deleteComments(videoId: string, commentIds: string | string[], options?: Rev.RequestOptions): Promise<void> {\r\n            commentIds = Array.isArray(commentIds)\r\n                ? commentIds.join(',')\r\n                : commentIds\r\n            await rev.delete(`/api/v2/videos/${videoId}/comments`, { commentIds }, options);\r\n        },\r\n        /**\r\n         * Helper - update the audio language for a video. If index isn't specified then update the default language\r\n         * @param video - videoId or video details (from video.details api call)\r\n         * @param language - language to use, for example 'en'\r\n         * @param trackIndex - index of audio track - if not supplied then update default or first index\r\n         * @param options\r\n         * @deprecated - use `video.patchAudioTracks(video, [{ op: 'replace', track: 0, value: { languageId: 'en', isDefault: true } }])`\r\n         */\r\n        async setAudioLanguage(video: string | Video.Details, language: Transcription.SupportedLanguage, trackIndex?: number, options?: Rev.RequestOptions): Promise<void> {\r\n            const {id, audioTracks = []} = typeof video === 'string' ? { id: video } : video;\r\n            let index = trackIndex ?? audioTracks.findIndex(t => t.isDefault === true) ?? 0;\r\n            const op: Rev.PatchOperation = {\r\n                op: 'replace',\r\n                path: `/audioTracks/${index}`,\r\n                value: { track: index, languageId: language }\r\n            };\r\n            await videoAPI.patch(id, [op], options);\r\n        },\r\n        /**\r\n         * Helper - updating audioTracks or generating new ones requires some specific formatting and making sure that the track indexes are correct. This wraps up the logic of converting tasks into the correct PATCH operations\r\n         * NOTE: Adding audio tracks will use RevIQ credits to generate the new audio.\r\n         * @param video videoId or Video Details object. If videoId is passed then the Get Video Details API will automatically be called to get the latest audioTrack data\r\n         * @param operations List of updates to audio tracks.\r\n         * @param options\r\n         * @returns {Promise<void>}\r\n         * @example\r\n         * ```js\r\n         * const rev = new RevClient(...config...);\r\n         * await rev.connect();\r\n         * const videoId = '<guid>'\r\n         *\r\n         * // helper generator function - used to call status apis until a timeout\r\n         * async function * pollEvery(intervalSeconds = 15, maxSeconds = 900) {\r\n         *     for (let attempt = 0, maxAttempts = maxSeconds / intervalSeconds; attempt < maxAttempts; attempt += 1) {\r\n         *         await new Promise(done => setTimeout(done, intervalSeconds * 1000));\r\n         *         yield attempt;\r\n         *     }\r\n         * }\r\n         *\r\n         * // helper function to generate translation/transcription of a video\r\n         * // NOTE: Uses Rev IQ Credits\r\n         * async function transcribeOrTranslate(videoId, languageId, sourceLanguageId) {\r\n         *     // call translate or transcribe based on if 3rd arg is passed\r\n         *     const response = sourceLanguageId\r\n         *         ? await rev.video.translate(videoId, sourceLanguageId, languageId)\r\n         *         : await rev.video.transcribe(videoId, languageId);\r\n         *\r\n         *     // get the id and status depending on if translate or transcribe\r\n         *     let {transcriptionId, status} = sourceLanguageId\r\n         *         ? response.translations[0]\r\n         *         : response;\r\n         *\r\n         *     for await (let attempt of pollEvery(5)) {\r\n         *         status = (await rev.video.transcriptionStatus(videoId, transcriptionId)).status;\r\n         *         if (['Success', 'Failed'].includes(status)) {\r\n         *             break;\r\n         *         } else {\r\n         *             console.log(`Waiting for transcription to ${languageId} (${attempt}) - ${status}`);\r\n         *         }\r\n         *     }\r\n         *     if (status === 'Success') {\r\n         *         console.log('Transcription complete');\r\n         *     } else {\r\n         *         throw new Error(`Transcription incomplete (${status})`);\r\n         *     }\r\n         * }\r\n         *\r\n         * // get details of video\r\n         * let details = await rev.video.details(videoId);\r\n         * console.log('Initial audio tracks:', details.audioTracks);\r\n         *\r\n         * // set language of first audio track to English (Great Britain) and as the default (if no language set)\r\n         * if (details.audioTracks[0].languageId === 'und') {\r\n         *     console.warn('Setting language of default audio track');\r\n         *     await rev.video.patchAudioTracks(details, [{ op: 'replace', track: 0, value: { languageId: 'en-gb', isDefault: true } }]);\r\n         * }\r\n         *\r\n         * // make sure there's a transcription on the video. If not then add one\r\n         * let transcriptions = await rev.video.transcriptions(videoId);\r\n         * if (transcriptions.length === 0) {\r\n         *   console.warn('A transcription is required for generating audio. Submitting job for transcription now');\r\n         *   await transcribeOrTranslate(videoId, 'en-gb');\r\n         *   transcriptions = await rev.video.transcriptions(videoId);\r\n         * }\r\n         *\r\n         * // check if existing spanish translation\r\n         * if (!transcriptions.some(t => t.locale === 'es')) {\r\n         *     console.warn('A translation to target language is required for generating audio. Submitting job for translation now');\r\n         *     await transcribeOrTranslate(videoId, 'es', transcriptions[0].locale);\r\n         * }\r\n         *\r\n         * // start generating a spanish version of the audio\r\n         * console.log('Generating Spanish audio track');\r\n         * await rev.video.patchAudioTracks(details, [{ op: 'add', value: { languageId: 'es' }}]);\r\n         *\r\n         * // wait for audio generation to complete\r\n         * for await (let attempt of pollEvery(15)) {\r\n         *     details = await rev.video.details(videoId);\r\n         *     const audioTrack = details.audioTracks.find(t => t.languageId === 'es');\r\n         *     const isFinalState = ['Ready', 'AddingFailed'].includes(audioTrack?.status);\r\n         *     if (isFinalState) {\r\n         *         console.log('audio processing completed', audioTrack);\r\n         *         break;\r\n         *     } else {\r\n         *         console.log(`Waiting for audio generation to complete (${attempt}) - ${audioTrack?.status}`);\r\n         *     }\r\n         * }\r\n         *\r\n         * console.log('Final audio tracks:', details.audioTracks);\r\n         *\r\n         * // Finally, if you want to delete the spanish version:\r\n         * // WARNING: This is destructive and will remove the audio track\r\n         * //await rev.video.patchAudioTracks(details, [{ op: 'remove', languageId: 'es' }]);\r\n         *\r\n         *\r\n         * ```\r\n         *\r\n         */\r\n        async patchAudioTracks(video: string | Pick<Video.Details, 'id' | 'audioTracks'>, operations: Video.AudioTrack.PatchRequest[], options?: Rev.RequestOptions) {\r\n            const {id, audioTracks} = typeof video === 'string'\r\n                ? await rev.video.details(video)\r\n                : video;\r\n\r\n            // convert audioTracks to Map and remove languageName\r\n            const request: Map<number, Video.AudioTrack.Request> = new Map(audioTracks.map(({ languageName, ...t }) => [t.track, t]));\r\n\r\n            for (let { op, languageId, track, value } of operations) {\r\n                if (op === 'add') {\r\n                    languageId ??= value?.languageId;\r\n                    if (!languageId) throw new TypeError('value languageId is required when adding audioTrack');\r\n                    const audioTrack: Video.AudioTrack.Request = {\r\n                        isDefault: value?.isDefault ?? false,\r\n                        languageId,\r\n                        track: request.size,\r\n                        status: 'Adding'\r\n                    };\r\n                    request.set(audioTrack.track, audioTrack);\r\n                    continue;\r\n                }\r\n\r\n                let existing = track != undefined && request.has(track)\r\n                    ? request.get(track)\r\n                    : [...request.values()].find(t => t.languageId === languageId);\r\n\r\n                if (!existing && audioTracks.length === 1) {\r\n                    existing = request.get(audioTracks[0].track);\r\n                }\r\n                if (!existing) {\r\n                    throw new Error(`Attempt to ${op} audioTrack language ${languageId} ${track}, but no matching track found`);\r\n                }\r\n                // update existing entry in list\r\n                Object.assign(existing, {\r\n                    ...value,\r\n                    status: op === 'remove' ? 'Deleting' : 'Updating'\r\n                });\r\n            }\r\n\r\n            const payload: Rev.PatchOperation = {\r\n                op: 'replace',\r\n                path: '/audioTracks',\r\n                value: [...request.values()]\r\n            };\r\n\r\n            return videoAPI.patch(id, [payload], options);\r\n        },\r\n        /**\r\n         * Helper - wait for video transcode to complete.\r\n         * This doesn't indicate that a video is playable, rather that all transcoding jobs are complete\r\n         * @param videoId\r\n         * @param options\r\n         */\r\n        async waitTranscode(videoId: string, options: Video.WaitTranscodeOptions = {}, requestOptions?: Rev.RequestOptions): Promise<Video.StatusResponse> {\r\n            const {\r\n                pollIntervalSeconds = 30,\r\n                timeoutMinutes = 240,\r\n                signal,\r\n                ignorePlaybackWhileTranscoding = true,\r\n                onProgress,\r\n                onError = (error: Error) => { throw error; }\r\n            } = options;\r\n\r\n            const ONE_MINUTE = 1000 * 60;\r\n            const timeoutDate = (Date.now() + (timeoutMinutes * ONE_MINUTE) || Infinity);\r\n            // sanity check: ensure at least 5 seconds between calls\r\n            const pollInterval = Math.max((pollIntervalSeconds || 30) * 1000, 5000);\r\n            // set as failed initially in case no error thrown but times out\r\n            let statusResponse = {status: 'UploadFailed'} as Video.StatusResponse;\r\n            while (Date.now() < timeoutDate && !signal?.aborted) {\r\n                // call video status API\r\n                try {\r\n                    statusResponse = await videoAPI.status(videoId, options);\r\n                    let {\r\n                        isProcessing,\r\n                        overallProgress = 0,\r\n                        status\r\n                    } = statusResponse;\r\n\r\n                    // status may be Ready initially even though about to go to Processing state\r\n                    if (ignorePlaybackWhileTranscoding && status === 'Ready' && isProcessing) {\r\n                        status = 'Processing';\r\n                    }\r\n\r\n                    // force failed processing as finished\r\n                    if (status === 'ProcessingFailed') {\r\n                        overallProgress = 1;\r\n                        isProcessing = false;\r\n                    }\r\n                    // override API values as per above\r\n                    Object.assign(statusResponse, { status, overallProgress, isProcessing });\r\n\r\n                    onProgress?.(statusResponse);\r\n\r\n                    // isProcessing is initially false, so wait till overallProgress changes to complete\r\n                    if (overallProgress === 1 && !isProcessing) {\r\n                        // finished, break out of loop\r\n                        break;\r\n                    }\r\n                } catch (error) {\r\n                    // by default will throw error\r\n                    await Promise.resolve(onError(error as Error));\r\n                }\r\n\r\n                await sleep(pollInterval, signal);\r\n            }\r\n            return statusResponse;\r\n        }\r\n    };\r\n    return videoAPI;\r\n}\r\n","import type { RevClient } from '../rev-client';\r\nimport { RevError } from '../rev-error';\r\nimport type { Rev } from '../types/index';\r\nimport type { Webcast } from '../types/webcast';\r\nimport { RateLimitEnum } from '../utils';\r\nimport { SearchRequest } from '../utils/request-utils';\r\n\r\nfunction getSummaryFromResponse<T extends Record<string, any>>(response: T, hitsKey: string) {\r\n    const ignoreKeys = ['scrollId', 'statusCode', 'statusDescription'];\r\n\r\n    const summary = Object.fromEntries(Object.entries(response)\r\n        .filter(([key, value]) => {\r\n            // don't include arrays or scroll type keys\r\n            return !(key === hitsKey || ignoreKeys.includes(key) || Array.isArray(value));\r\n        }));\r\n    return summary;\r\n}\r\n\r\n/** @category Webcasts */\r\nexport class RealtimeReportRequest<T extends Webcast.RealtimeSession = Webcast.RealtimeSession> extends SearchRequest<T> {\r\n    /**\r\n     * The overall summary statistics returned with the first page of results\r\n     */\r\n    declare summary: Webcast.RealtimeSummary;\r\n    /**\r\n     * @hidden\r\n     * @param rev\r\n     * @param eventId\r\n     * @param query\r\n     * @param options\r\n     */\r\n    constructor(rev: RevClient, eventId: string, query: Webcast.RealtimeRequest = {}, options: Rev.SearchOptions<T> = {}) {\r\n        const searchDefinition: Rev.SearchDefinition<T> = {\r\n            endpoint: `/api/v2/scheduled-events/${eventId}/real-time/attendees`,\r\n            totalKey: 'total',\r\n            hitsKey: 'attendees',\r\n            // get summary from initial response\r\n            request: async (endpoint, query, options) => {\r\n                await rev.session.queueRequest(RateLimitEnum.GetWebcastAttendeesRealtime);\r\n                const response = await rev.post<Webcast.RealtimeSummary>(endpoint, query, options);\r\n\r\n                const summary = getSummaryFromResponse(response, 'attendees');\r\n                Object.assign(this.summary, summary);\r\n                return response;\r\n            }\r\n        };\r\n        super(rev, searchDefinition, query, options);\r\n        this.summary = {} as any;\r\n    }\r\n    /**\r\n     * get the aggregate statistics only, instead of actual session data.\r\n     * @returns {Webcast.PostEventSummary}\r\n     */\r\n    async getSummary() {\r\n        // set maxResults to 0 to mark request as done, since first page of sessions will be lost\r\n        this.options.maxResults = 0;\r\n        // must get first page of results to load summary data\r\n        await this.nextPage();\r\n        return this.summary;\r\n    }\r\n}\r\n\r\n/** @category Webcasts */\r\nexport class PostEventReportRequest extends SearchRequest<Webcast.PostEventSession> {\r\n    declare summary: Webcast.PostEventSummary;\r\n    /**\r\n     * @hidden\r\n     * @param rev\r\n     * @param query\r\n     * @param options\r\n     */\r\n    constructor(rev: RevClient, query: { eventId: string, runNumber?: number }, options: Rev.SearchOptions<Webcast.PostEventSession> = {}) {\r\n        const { eventId, runNumber } = query;\r\n        const runQuery = (runNumber && runNumber >= 0)\r\n            ? { runNumber }\r\n            : {};\r\n\r\n        const searchDefinition: Rev.SearchDefinition<Webcast.PostEventSession> = {\r\n            endpoint: `/api/v2/scheduled-events/${eventId}/post-event-report`,\r\n                totalKey: 'totalSessions',\r\n                hitsKey: 'sessions',\r\n                request: async (endpoint, query, options) => {\r\n                    // this endpoint has a particular error response that isn't automatically captured\r\n                    // by the RevError parser, so need to manually check\r\n                    const response = await rev.request<Webcast.PostEventSummary>('GET', endpoint, query, {\r\n                        ...options,\r\n                        responseType: 'json',\r\n                        throwHttpErrors: false\r\n                    });\r\n\r\n                    // will throw on error response\r\n                    await this._assertResponseOk(response);\r\n\r\n                    // get summary removes scrollId and other internal data\r\n                    Object.assign(this.summary, getSummaryFromResponse(response.body, 'sessions'));\r\n                    return response.body;\r\n                }\r\n        };\r\n        super(rev, searchDefinition,  runQuery, options);\r\n        this.summary = {};\r\n    }\r\n    private async _assertResponseOk({response, statusCode, body}: Rev.Response<Webcast.PostEventSummary>): Promise<Webcast.PostEventSummary> {\r\n        if (response.ok) {\r\n            return body;\r\n        }\r\n\r\n        if (statusCode == 400 && (body as PostEventErrorResponse)?.errorDescription) {\r\n            throw new RevError(response, { details: (body as PostEventErrorResponse).errorDescription });\r\n        }\r\n        // bodyUsed should always be true, but this is just a safety check\r\n        const error = (!!body || response.bodyUsed)\r\n            ? new RevError(response, body as string)\r\n            : await RevError.create(response);\r\n        throw error;\r\n    }\r\n    /**\r\n     * get the aggregate statistics only, instead of actual session data.\r\n     * @returns {Webcast.PostEventSummary}\r\n     */\r\n    async getSummary() {\r\n        // set maxResults to 0 to mark request as done, since first page of sessions will be lost\r\n        this.options.maxResults = 0;\r\n        // must get first page of results to load summary data\r\n        await this.nextPage();\r\n        return this.summary;\r\n    }\r\n}\r\n\r\n\r\ninterface PostEventErrorResponse {\r\n    errorDescription: string;\r\n    sessions: [],\r\n    totalSessions: 0\r\n}\r\n\r\n/**\r\n * The Post Event Report returns a special JSON body on 400 error, unlike other endpoints\r\n */\r\nasync function parseAttendeesError(revResponse: Rev.Response<unknown>) {\r\n\r\n}\r\n","import type { Rev } from '../index';\r\nimport type { RevClient } from '../rev-client';\r\nimport type { GuestRegistration, Webcast, WebcastBanner } from '../types/webcast';\r\nimport { titleCase } from '../utils/index';\r\nimport { mergeHeaders } from '../utils/merge-headers';\r\nimport { SearchRequest } from '../utils/request-utils';\r\nimport { PostEventReportRequest, RealtimeReportRequest } from './webcast-report-request';\r\n\r\n/**\r\n * @category Webcasts\r\n */\r\ntype RealtimeSession<T extends Webcast.RealtimeRequest | undefined> = T extends { attendeeDetails: 'All' }\r\n    ? Webcast.RealtimeSessionDetail\r\n    : T extends { attendeeDetails: 'Counts' }\r\n    ? never\r\n    : Webcast.RealtimeSession;\r\n\r\n/** @ignore */\r\nexport type API = ReturnType<typeof webcastAPIFactory>;\r\n/**\r\n * Webcast API methods\r\n * @category Webcasts\r\n * @group API\r\n * @see [Webcast API Docs](https://revdocs.vbrick.com/reference/createevent)\r\n */\r\nexport interface WebcastAPI extends API {};\r\n\r\n/** @ignore */\r\nexport default function webcastAPIFactory(rev: RevClient) {\r\n    const webcastAPI = {\r\n        async list(options: Webcast.ListRequest = { }, requestOptions?: Rev.RequestOptions): Promise<Webcast.ListItem[]> {\r\n            return rev.get('/api/v2/scheduled-events', options, { ...requestOptions, responseType: 'json' });\r\n        },\r\n        search(query: Webcast.SearchRequest, options?: Rev.SearchOptions<Webcast>): Rev.ISearchRequest<Webcast> {\r\n            const searchDefinition: Rev.SearchDefinition<Webcast> = {\r\n                endpoint: `/api/v2/search/scheduled-events`,\r\n                totalKey: 'total',\r\n                hitsKey: 'events',\r\n                request: (endpoint, query, options) => rev.post(endpoint, query, options),\r\n                isPost: true\r\n            };\r\n            return new SearchRequest<Webcast>(rev, searchDefinition, query, options);\r\n        },\r\n        async create(event: Webcast.CreateRequest): Promise<string> {\r\n            const { eventId } = await rev.post(`/api/v2/scheduled-events`, event);\r\n            return eventId;\r\n        },\r\n        async details(eventId: string, requestOptions?: Rev.RequestOptions): Promise<Webcast.Details> {\r\n            return rev.get(`/api/v2/scheduled-events/${eventId}`, undefined, requestOptions);\r\n        },\r\n        async edit(eventId: string, event: Webcast.CreateRequest): Promise<void> {\r\n            return rev.put(`/api/v2/scheduled-events/${eventId}`, event);\r\n        },\r\n        /**\r\n         * Partially edits the details of a webcast. You do not need to provide the fields that you are not changing.\r\n         * Webcast status determines which fields are modifiable and when.\r\n         *\r\n         * If the webcast pre-production or main event is in progress, only fields available for inline editing may be patched/edited.\r\n         *\r\n         * If the webcast main event has been run once, only fields available after the webcast has ended are available for editing. That includes all fields with the exception of start/end dates, lobbyTimeMinutes, preProduction, duration, userIds, and groupIds.\r\n         *\r\n         * If the webcast end time has passed and is Completed, only edits to linkedVideoId and redirectVod are allowed.\r\n         *\r\n         * Event Admins can be removed using their email addresses as path pointer for the fields 'EventAdminEmails' and 'EventAdmins', provided that all of the Event Admins associated with the webcast have email addresses. This is also applicable for the field 'Moderators'.\r\n         * @example\r\n         * ```js\r\n         * const rev = new RevClient(...config...);\r\n         * await rev.connect();\r\n         *\r\n         * // using eventadmins\r\n         * await rev.webcast.patch(eventId, [{ 'op': 'remove', 'path': '/EventAdmins/Email', 'value': 'x1@test.com' }]);\r\n         * // change shortcut\r\n         * await rev.webcast.patch(eventId, [{ 'op': 'replace', 'path': '/ShortcutName', 'value': 'weekly-meeting' }]);\r\n         * ```\r\n         */\r\n        async patch(eventId: string, operations: Rev.PatchOperation[], options?: Rev.RequestOptions) {\r\n            await rev.patch(`/api/v2/scheduled-events/${eventId}`, operations, options);\r\n        },\r\n        // async patch - not yet implemented\r\n        async delete(eventId: string): Promise<void> {\r\n            return rev.delete(`/api/v2/scheduled-events/${eventId}`);\r\n        },\r\n        async editAccess(eventId: string, entities: Webcast.EditAttendeesRequest): Promise<void> {\r\n            return rev.put(`/api/v2/scheduled-events/${eventId}/access-control`, entities);\r\n        },\r\n        attendees(\r\n            eventId: string,\r\n            runNumber?: number,\r\n            options?: Rev.SearchOptions<Webcast.PostEventSession>\r\n        ) {\r\n            return new PostEventReportRequest(rev, { eventId, runNumber }, options);\r\n        },\r\n        realtimeAttendees<T extends Webcast.RealtimeRequest | undefined>(\r\n            eventId: string,\r\n            query?: T,\r\n            options?: Rev.SearchOptions<RealtimeSession<T>>\r\n        ) {\r\n            return new RealtimeReportRequest<RealtimeSession<T>>(rev, eventId, query, options);\r\n        },\r\n        async questions(eventId: string, runNumber?: number): Promise<Webcast.Question[]> {\r\n            const query = (runNumber ?? -1) >= 0 ? { runNumber } : {};\r\n            return rev.get(`/api/v2/scheduled-events/${eventId}/questions`, query, { responseType: 'json' });\r\n        },\r\n        async pollResults(eventId: string, runNumber?: number): Promise<Webcast.PollResults[]> {\r\n            const query = (runNumber ?? -1) >= 0 ? { runNumber } : {};\r\n            // const {polls} = await rev.get(`/api/v2/scheduled-events/${eventId}/poll-results`, query, { responseType: 'json' });\r\n            // workaround for event that never happened returning blank response\r\n            const rawResponse = await rev.get(`/api/v2/scheduled-events/${eventId}/poll-results`, query, { responseType: 'text' });\r\n            const {polls = []} = rawResponse ? JSON.parse(rawResponse) : {};\r\n            return polls;\r\n        },\r\n        async comments(eventId: string, runNumber?: number): Promise<Webcast.Comment[]> {\r\n            const query = (runNumber ?? -1) >= 0 ? { runNumber } : {};\r\n            return rev.get(`/api/v2/scheduled-events/${eventId}/comments`, query, { responseType: 'json' });\r\n        },\r\n        async reactions(eventId: string): Promise<Webcast.ReactionsSummary[]> {\r\n            return rev.get(`/api/v2/scheduled-events/${eventId}/reactions`, undefined, { responseType: 'json' });\r\n        },\r\n        async status(eventId: string, requestOptions?: Rev.RequestOptions): Promise<Webcast.Status> {\r\n            return rev.get(`/api/v2/scheduled-events/${eventId}/status`, undefined, requestOptions);\r\n        },\r\n        async isPublic(eventId: string, requestOptions?: Rev.RequestOptions): Promise<boolean> {\r\n            const response = await rev.request('GET', `/api/v2/scheduled-events/${eventId}/is-public`, undefined, { ...requestOptions, throwHttpErrors: false, responseType: 'json' });\r\n            return response.statusCode !== 401 && response.body?.isPublic;\r\n        },\r\n        /**\r\n         * This endpoint deletes all events for a given date range or custom field query. The response returns a jobId and a count of webcasts to be deleted. The jobId can be used to check the status of the deletion.\r\n         * @param query Fields that are going to be used to search Webcasts that are to be deleted.\r\n         * @param options\r\n         */\r\n        async bulkDelete(query: Pick<Webcast.SearchRequest, 'startDate' | 'endDate' | 'customFields'>, options?: Rev.RequestOptions): Promise<Webcast.BulkDelete.Response> {\r\n            // using rev.request because rev.delete assumes no response from endpoint\r\n            const {body} = await rev.request('DELETE', `/api/v2/scheduled-events`, query, options);\r\n            return body;\r\n        },\r\n        bulkDeleteStatus(jobId: string): Promise<Webcast.BulkDelete.Status> {\r\n            return rev.get(`/api/v2/scheduled-events/delete-status/${jobId}`);\r\n        },\r\n        async playbackUrls(eventId: string, {ip, userAgent}: Webcast.PlaybackUrlRequest = { }, options?: Rev.RequestOptions): Promise<Webcast.PlaybackUrlsResponse> {\r\n            const query = ip ? { ip } : undefined;\r\n\r\n            const opts: Rev.RequestOptions = {\r\n                ...options,\r\n                ...userAgent && {\r\n                    headers: mergeHeaders(options?.headers, { 'User-Agent': userAgent })\r\n                },\r\n                responseType: 'json'\r\n            };\r\n\r\n            return rev.get(`/api/v2/scheduled-events/${eventId}/playback-url`, query, opts);\r\n        },\r\n        /**\r\n         * @deprecated\r\n         * @param eventId\r\n         * @param options\r\n         * @returns\r\n         */\r\n        async playbackUrl(eventId: string, options: Webcast.PlaybackUrlRequest = { }): Promise<Webcast.Playback[]> {\r\n            rev.log('debug', 'webcast.playbackUrl is deprecated - use webcast.playbackUrls instead');\r\n            const {playbackResults} = await webcastAPI.playbackUrls(eventId, options);\r\n            return playbackResults;\r\n        },\r\n        async startEvent(eventId: string, preProduction: boolean = false): Promise<void> {\r\n            await rev.put(`/api/v2/scheduled-events/${eventId}/start`, { preProduction });\r\n        },\r\n        async stopEvent(eventId: string, preProduction: boolean = false): Promise<void> {\r\n            await rev.delete(`/api/v2/scheduled-events/${eventId}/start`, { preProduction });\r\n        },\r\n        async startBroadcast(eventId: string): Promise<void> {\r\n            await rev.put(`/api/v2/scheduled-events/${eventId}/broadcast`);\r\n        },\r\n        async stopBroadcast(eventId: string): Promise<void> {\r\n            await rev.delete(`/api/v2/scheduled-events/${eventId}/broadcast`);\r\n        },\r\n        async startRecord(eventId: string): Promise<void> {\r\n            await rev.put(`/api/v2/scheduled-events/${eventId}/record`);\r\n        },\r\n        async stopRecord(eventId: string): Promise<void> {\r\n            await rev.delete(`/api/v2/scheduled-events/${eventId}/record`);\r\n        },\r\n        async linkVideo(eventId: string, videoId: string, autoRedirect: boolean = true) {\r\n            const payload = {\r\n                videoId,\r\n                redirectVod: autoRedirect\r\n            };\r\n            return rev.put(`/api/v2/scheduled-events/${eventId}/linked-video`, payload);\r\n        },\r\n        async unlinkVideo(eventId: string) {\r\n            return rev.delete(`/api/v2/scheduled-events/${eventId}/linked-video`);\r\n        },\r\n        /**\r\n         * Retrieve details of a specific guest user Public webcast registration.\r\n         * @param eventId - Id of the Public webcast\r\n         * @param registrationId - Id of guest user's registration to retrieve\r\n         * @returns\r\n         */\r\n        async guestRegistration(eventId: string, registrationId: string): Promise<GuestRegistration.Details> {\r\n            return rev.get(`/api/v2/scheduled-events/${eventId}/registrations/${registrationId}`);\r\n        },\r\n        /**\r\n         * Mute attendee for a specified webcast\r\n         */\r\n        async muteAttendee(eventId: string, userId: string, runNumber?: number): Promise<void> {\r\n            const query = (runNumber ?? -1) >= 0 ? { runNumber } : {};\r\n            await rev.put(`/api/v2/scheduled-events/${eventId}/users/${userId}/mute`, query);\r\n        },\r\n        /**\r\n         * Unmute attendee for a specified webcast\r\n         */\r\n        async unmuteAttendee(eventId: string, userId: string, runNumber?: number): Promise<void> {\r\n            const query = (runNumber ?? -1) >= 0 ? { runNumber } : {};\r\n            await rev.delete(`/api/v2/scheduled-events/${eventId}/users/${userId}/mute`, query);\r\n        },\r\n        /**\r\n         * Hide specific comment for a specified webcast\r\n         */\r\n        async hideComment(eventId: string, commentId: string, runNumber?: number): Promise<void> {\r\n            const query = (runNumber ?? -1) >= 0 ? { runNumber } : {};\r\n            await rev.put(`/api/v2/scheduled-events/${eventId}/comments/${commentId}/hide`, query);\r\n        },\r\n        /**\r\n         * Unhide specific comment for a specified webcast\r\n         */\r\n        async unhideComment(eventId: string, commentId: string, runNumber?: number): Promise<void> {\r\n            const query = (runNumber ?? -1) >= 0 ? { runNumber } : {};\r\n            await rev.delete(`/api/v2/scheduled-events/${eventId}/comments/${commentId}/hide`, query);\r\n        },\r\n        /**\r\n         * Register one attendee/guest user for an upcoming Public webcast. Make sure you first enable Public webcast pre-registration before adding registrations.\r\n         * @param eventId\r\n         * @param registration\r\n         * @returns\r\n         */\r\n        async createGuestRegistration(eventId: string, registration: GuestRegistration.Request): Promise<GuestRegistration.Details> {\r\n            return rev.post(`/api/v2/scheduled-events/${eventId}/registrations`, registration);\r\n        },\r\n        listGuestRegistrations(\r\n            eventId: string,\r\n            query: GuestRegistration.SearchRequest = {},\r\n            options?: Rev.SearchOptions<GuestRegistration>\r\n        ): Rev.ISearchRequest<GuestRegistration> {\r\n            const searchDefinition: Rev.SearchDefinition<GuestRegistration> = {\r\n                endpoint: `/api/v2/scheduled-events/${eventId}/registrations`,\r\n                /** NOTE: this API doesn't actually return a total, so this will always be undefined */\r\n                totalKey: 'total',\r\n                hitsKey: 'guestUsers'\r\n            };\r\n            return new SearchRequest<GuestRegistration>(rev, searchDefinition, query, options);\r\n        },\r\n        updateGuestRegistration(eventId: string, registrationId: string, registration: GuestRegistration.Request): Promise<void> {\r\n            return rev.put(`/api/v2/scheduled-events/${eventId}/registrations/${registrationId}`, registration);\r\n        },\r\n        patchGuestRegistration(eventId: string, registrationId: string, registration: Partial<GuestRegistration.Request>): Promise<void> {\r\n            const operations = Object.entries(registration)\r\n                .map(([key, value]) => {\r\n                    let path = `/${titleCase(key)}`;\r\n                    return { op: 'replace', path, value };\r\n                });\r\n            return rev.put(`/api/v2/scheduled-events/${eventId}/registrations/${registrationId}`, operations);\r\n        },\r\n        deleteGuestRegistration(eventId: string, registrationId: string): Promise<void> {\r\n            return rev.delete(`/api/v2/scheduled-events/${eventId}/registrations/${registrationId}`);\r\n        },\r\n        /**\r\n         * Resend email to external presenters for Producer type webcast.\r\n         * @param eventId id of the webcast\r\n         * @param email Email of the external presenter.\r\n         */\r\n        resendEmailToExternalPresenter(eventId: string, email: string): Promise<void> {\r\n            return rev.post(`/api/v2/scheduled-events/${eventId}/presenter-resend-email?email=${encodeURIComponent(email)}`);\r\n        },\r\n        async listEmbeddedEngagements(eventId: string): Promise<Webcast.ContentLink[]> {\r\n            const {contentLinks} = await rev.get(`/api/v2/scheduled-events/${eventId}/embedded-content/links`);\r\n            return contentLinks || [];\r\n        },\r\n        addEmbeddedEngagement(eventId: string, contentLink: Webcast.ContentLink.Request): Promise<Webcast.ContentLink> {\r\n            return rev.post(`/api/v2/scheduled-events/${eventId}/embedded-content/link`, contentLink);\r\n        },\r\n        setEmbeddedEngagementStatus(eventId: string, linkId: string, isEnabled: boolean): Promise<void> {\r\n            return rev.put(`/api/v2/scheduled-events/${eventId}/embedded-content/links/${linkId}/status`, {isEnabled});\r\n        },\r\n        updateEmbeddedEngagement(eventId: string, contentLink: Webcast.ContentLink): Promise<Webcast.ContentLink> {\r\n            const {id, ...payload} = contentLink;\r\n            return rev.put(`/api/v2/scheduled-events/${eventId}/embedded-content/links/${id}`, payload);\r\n        },\r\n        deleteEmbeddedEngagement(eventId: string, linkId: string) {\r\n            return rev.delete(`/api/v2/scheduled-events/${eventId}/embedded-content/links/${linkId}`);\r\n        },\r\n        async listBanners(eventId: string): Promise<WebcastBanner[]> {\r\n            const {banners} = await rev.get(`/api/v2/scheduled-events/${eventId}/banners`);\r\n            return banners || [];\r\n        },\r\n        addBanner(eventId: string, banner: WebcastBanner.Request): Promise<WebcastBanner> {\r\n            return rev.post(`/api/v2/scheduled-events/${eventId}/banner`, banner);\r\n        },\r\n        setBannerStatus(eventId: string, bannerId: string, isEnabled: boolean): Promise<void> {\r\n            return rev.put(`/api/v2/scheduled-events/${eventId}/banner/${bannerId}/status`, {isEnabled});\r\n        },\r\n        updateBanner(eventId: string, banner: WebcastBanner): Promise<WebcastBanner> {\r\n            // separate id from the banner data\r\n            const {id, ...payload} = banner;\r\n            return rev.put(`/api/v2/scheduled-events/${eventId}/banner/${id}`, payload);\r\n        },\r\n        deleteBanner(eventId: string, bannerId: string): Promise<void> {\r\n            return rev.delete(`/api/v2/scheduled-events/${eventId}/banner/${bannerId}`);\r\n        },\r\n        get uploadBranding() {\r\n            return rev.upload.webcastBranding;\r\n        },\r\n        get uploadPresentation() {\r\n            return rev.upload.webcastPresentation;\r\n        },\r\n        get uploadBackgroundImage() {\r\n            return rev.upload.webcastBackground;\r\n        },\r\n        deleteBackgroundImage(eventId: string) {\r\n            return rev.delete(`/api/v2/scheduled-events/${eventId}/background-image`);\r\n        },\r\n        get uploadProducerLayoutBackground() {\r\n            return rev.upload.webcastProducerLayoutBackground;\r\n        },\r\n        deleteProducerLayoutBackground(eventId: string) {\r\n            return rev.delete(`/api/v2/scheduled-events/${eventId}/webcast-producer-bgimage`);\r\n        }\r\n    };\r\n\r\n    return webcastAPI;\r\n}\r\n","import type { RevClient } from '../rev-client';\r\nimport type { Zone } from '../types/zone';\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport type API = ReturnType<typeof zonesAPIFactory>;\r\n\r\n/**\r\n * Zone-related API methods\r\n * @category Administration\r\n * @group API\r\n * @see [Zones API Docs](https://revdocs.vbrick.com/reference/getzones)\r\n */\r\nexport interface ZoneAPI extends API {}\r\n\r\n/** @ignore */\r\nexport default function zonesAPIFactory(rev: RevClient) {\r\n    const zonesAPI = {\r\n        async list(): Promise<{ defaultZone: Zone, zones: Zone[]; }> {\r\n            return rev.get(`/api/v2/zones`, undefined, { responseType: 'json' });\r\n        },\r\n        async flatList(): Promise<Zone.FlatZone[]> {\r\n            const {\r\n                defaultZone,\r\n                zones\r\n            } = await zonesAPI.list();\r\n            const flatZones: Omit<Zone, 'childZones'>[] = [defaultZone];\r\n            function recursiveAdd(inZone: Zone) {\r\n                const {\r\n                    childZones = [],\r\n                    ...zone\r\n                } = inZone;\r\n\r\n                flatZones.push(zone);\r\n                childZones.forEach(recursiveAdd);\r\n            }\r\n            zones.forEach(recursiveAdd);\r\n            return flatZones;\r\n        },\r\n        async create(zone: Zone.CreateRequest): Promise<string> {\r\n            const { zoneId } = await rev.post(`/api/v2/zones`, zone, { responseType: 'json' });\r\n            return zoneId;\r\n        },\r\n        async edit(zoneId: string, zone: Zone.CreateRequest): Promise<void> {\r\n            return rev.put(`/api/v2/zones/${zoneId}`, zone);\r\n        },\r\n        delete(zoneId: string) {\r\n            return rev.delete(`/api/v2/zones/${zoneId}`);\r\n        },\r\n        get devices() {\r\n            return rev.device.listZoneDevices;\r\n        }\r\n    };\r\n    return zonesAPI;\r\n}\r\n","import type { AccountBasicInfo } from '../types/index';\r\nimport type { RevClient } from '../rev-client';\r\n\r\n/** @ignore */\r\nexport type API = ReturnType<typeof environmentAPIFactory>;\r\n/**\r\n * @see [Environment API Docs](https://revdocs.vbrick.com/reference/user-location)\r\n * @category Utilities\r\n * @group API\r\n */\r\nexport interface EnvironmentAPI extends API {};\r\n\r\n/** @ignore */\r\nexport default function environmentAPIFactory(rev: RevClient) {\r\n    let accountId = '';\r\n    let version = '' as AccountBasicInfo['environment']['version'];\r\n    let ulsInfo: undefined | { enabled: boolean, locationUrls: string[] } = undefined;\r\n    let bootstrap: undefined | Promise<AccountBasicInfo> = undefined;\r\n\r\n    async function fallbackGetAccountId(forceRefresh = false): Promise<string> {\r\n        if (!accountId || forceRefresh) {\r\n            const text = await rev.get<string>('/', undefined, { responseType: 'text' }).catch(error => '');\r\n            accountId = (/(['\"])account\\1[:{\\s\\n]*\\1id\\1[\\s\\n:]+\\1([0-9a-f-]{36})\\1/m.exec(text) || [])[2] || '';\r\n        }\r\n        return accountId;\r\n    }\r\n\r\n    async function fallbackGetRevVersion(forceRefresh = false) {\r\n        if (!version || forceRefresh) {\r\n            const text = await rev.get<string>('/js/version.js', undefined, { responseType: 'text' }).catch(error => '');\r\n            version = (/buildNumber['\":\\s\\n]*([\\d.]+)/m.exec(text) || [])[1] || '' as any;\r\n        }\r\n        return version;\r\n    }\r\n\r\n    async function getBootstrapImpl(forceRefresh = false): Promise<AccountBasicInfo> {\r\n        try {\r\n            return await rev.get<AccountBasicInfo>('/api/v2/accounts/bootstrap', undefined, { responseType: 'json' });\r\n        } catch (error) {\r\n            const [id, version] = await Promise.all([\r\n                fallbackGetAccountId(forceRefresh),\r\n                fallbackGetRevVersion(forceRefresh)\r\n            ]);\r\n            return {\r\n                account: { id },\r\n                environment: { version }\r\n            }\r\n        }\r\n    }\r\n\r\n    const environmentAPI = {\r\n        /**\r\n         * Does not require authentication for use\r\n         * get base information about a Rev account. This is a useful call when first initalizing a rev client, in order to ensure connectivity to Rev, as well as for getting the AccountID for use with some APIs\r\n         */\r\n        async bootstrap(forceRefresh = false): Promise<AccountBasicInfo> {\r\n            if (!bootstrap || forceRefresh) {\r\n                bootstrap = getBootstrapImpl(forceRefresh)\r\n                // don't cache errors\r\n                bootstrap.catch((err) => { bootstrap = undefined; });\r\n            }\r\n            return await bootstrap;\r\n        },\r\n        /**\r\n         * Get's the accountId embedded in Rev's main entry point\r\n         * @param forceRefresh ignore cached value if called previously\r\n         * @param useLegacyApi force using regex-based discovery before dedicated API endpoint introduced in Rev 8.0\r\n         */\r\n        async getAccountId(forceRefresh = false, useLegacyApi = false): Promise<string> {\r\n            if (!accountId || forceRefresh) {\r\n                accountId = useLegacyApi\r\n                    ? await fallbackGetAccountId(forceRefresh)\r\n                    : (await getBootstrapImpl(forceRefresh)).account.id;\r\n            }\r\n            return accountId;\r\n        },\r\n        /**\r\n         * Get's the version of Rev returned by /js/version.js\r\n         * @param forceRefresh ignore cached value if called previously\r\n         * @param useLegacyApi force using regex-based discovery before dedicated API endpoint introduced in Rev 8.0\r\n         */\r\n        async getRevVersion(forceRefresh = false, useLegacyApi = false): Promise<string> {\r\n            if (!version || forceRefresh) {\r\n                version = useLegacyApi\r\n                    ? await fallbackGetRevVersion(forceRefresh)\r\n                    : (await getBootstrapImpl(forceRefresh)).environment.version;\r\n            }\r\n            return version;\r\n        },\r\n        /**\r\n         * Use the Get User Location Service API to get a user's IP address for zoning purposes\r\n         * Returns the IP if ULS enabled and one successfully found, otherwise undefined.\r\n         * undefined response indicates Rev should use the user's public IP for zoning.\r\n         * @param timeoutMs    - how many milliseconds to wait for a response (if user is not)\r\n         *                       on VPN / intranet with ULS DME then DNS lookup or request\r\n         *                       can time out, so don't set this too long.\r\n         *                       Default is 10 seconds\r\n         * @param forceRefresh   By default the User Location Services settings is cached\r\n         *                       (not the user's detected IP). Use this to force reloading\r\n         *                       the settings from Rev.\r\n         * @returns\r\n         */\r\n        async getUserLocalIp(timeoutMs = 10 * 1000, forceRefresh = false): Promise<string | undefined> {\r\n            if (!ulsInfo || forceRefresh) {\r\n                ulsInfo = await rev.get('/api/v2/user-location');\r\n            }\r\n            // if User Location Services isn't enabled then return undefined, meaning Rev will just use user's public IP for zoning\r\n            if (!ulsInfo?.enabled || ulsInfo.locationUrls.length === 0) {\r\n                return undefined;\r\n            }\r\n            const controller = new AbortController();\r\n            const getIp = async function (ulsUrl: string) {\r\n                try {\r\n                    let {ip = ''} = await rev.get<{ ip: string }>(ulsUrl, {}, {\r\n                        headers: { Authorization: '' },\r\n                        responseType: 'json',\r\n                        signal: controller.signal\r\n                    });\r\n                    ip = `${ip}`.split(',')[0].trim();\r\n                    if (ip) {\r\n                        // cancel any other requests early\r\n                        controller.abort();\r\n                    }\r\n                    return ip;\r\n                } catch (error) {\r\n                    rev.log('debug', `ULS URL Failed: ${ulsUrl}`, error);\r\n                    return undefined;\r\n                }\r\n            }\r\n\r\n            const timer = setTimeout(() => controller.abort(), timeoutMs);\r\n            try {\r\n                // collect all returned IPs...first response will abort others early\r\n                const ips = await Promise.all(ulsInfo.locationUrls.map(getIp));\r\n                return ips.find(ip => !!ip);\r\n            } finally {\r\n                clearTimeout(timer);\r\n            }\r\n        }\r\n    };\r\n\r\n    return environmentAPI;\r\n}\r\n","import type { RevClient } from './rev-client';\r\nimport type { Rev } from './types';\r\nimport { isPlainObject, sleep } from './utils';\r\nimport interop from './interop/polyfills';\r\nimport { RateLimitEnum, type RateLimitQueues, clearQueues, makeQueues } from './utils/rate-limit-queues';\r\n\r\nconst ONE_MINUTE = 1000 * 60;\r\n// if no expiration default to expiring in 10 minutes\r\nconst DEFAULT_EXPIRE_MINUTES = 10;\r\n\r\n// obsfucate credentials to avoid accidental disclosure\r\nconst _credentials = Symbol('credentials');\r\n\r\ninterface LoginResponse {\r\n    token: string,\r\n    expiration: string,\r\n    userId?: string,\r\n    refreshToken?: string,\r\n    apiKey?: string;\r\n}\r\n\r\nclass SessionKeepAlive {\r\n    private readonly _session!: SessionBase;\r\n    private controller?: AbortController;\r\n    extendOptions: Required<Rev.KeepAliveOptions>;\r\n    error?: undefined | Error;\r\n    private _isExtending: boolean = false;\r\n    constructor(session: SessionBase, options: Rev.KeepAliveOptions = { }) {\r\n        // TODO verify values?\r\n        this.extendOptions = {\r\n            extendThresholdMilliseconds: 3 * ONE_MINUTE,\r\n            keepAliveInterval: 10 * ONE_MINUTE,\r\n            verify: true,\r\n            ...options\r\n        };\r\n\r\n        Object.defineProperties(this, {\r\n            _session: {\r\n                get: () => session,\r\n                enumerable: false\r\n            }\r\n        });\r\n    }\r\n    getNextExtendTime() {\r\n        const { expires } = this._session;\r\n        if (!expires) {\r\n            return 0;\r\n        }\r\n        const {\r\n            keepAliveInterval: interval,\r\n            extendThresholdMilliseconds: threshold\r\n        } = this.extendOptions;\r\n\r\n        // ensure poll isn't repeatedly triggered - 5 seconds min\r\n        const MIN_INTERVAL_MS = 5 * 1000;\r\n\r\n        const timeTillExpiration = expires.getTime() - Date.now();\r\n        // clamp range to within short timespan and max interval\r\n        return Math.max(MIN_INTERVAL_MS, Math.min(timeTillExpiration - threshold, interval));\r\n    }\r\n    private async _poll() {\r\n        const { _session: session } = this;\r\n        // force stop other poll process if already polling\r\n        // keep reference to controller in case of reset\r\n        const controller = this._reset();\r\n        const { signal } = controller;\r\n\r\n        while (session.isConnected && !signal.aborted) {\r\n            const nextExtendTime = this.getNextExtendTime();\r\n            await sleep(nextExtendTime, signal);\r\n\r\n            // check if poll was aborted. if so don't try to extend\r\n            if (signal.aborted) {\r\n                break;\r\n            }\r\n\r\n            // extend session\r\n            // possible this can throw an error\r\n            try {\r\n                // extending may re-login, so pause poll resets for now\r\n                this._isExtending = true;\r\n                await session.lazyExtend(this.extendOptions);\r\n            } catch (err: any) {\r\n                // swallow error, but signal stopped using abort controller\r\n                controller.abort();\r\n                this.error = err;\r\n            } finally {\r\n                this._isExtending = false;\r\n            }\r\n        }\r\n    }\r\n    start() {\r\n        if (this._isExtending) {\r\n            return;\r\n        }\r\n        this._poll();\r\n    }\r\n    stop() {\r\n        if (this._isExtending) {\r\n            return;\r\n        }\r\n        if (this.controller) {\r\n            this.controller.abort();\r\n        }\r\n    }\r\n    private _reset() {\r\n        this.error = undefined;\r\n        this._isExtending = false;\r\n        const oldController = this.controller;\r\n        this.controller = new interop.AbortController();\r\n\r\n        // stop previous poll\r\n        if (oldController) {\r\n            oldController.abort();\r\n        }\r\n        return this.controller;\r\n    }\r\n    get isAlive() {\r\n        return this.controller && !this.controller.signal.aborted;\r\n    }\r\n}\r\n\r\nabstract class SessionBase implements Rev.IRevSession {\r\n    token?: string;\r\n    expires: Date;\r\n    protected readonly rev!: RevClient;\r\n    protected readonly [_credentials]!: Rev.Credentials;\r\n    readonly keepAlive?: SessionKeepAlive;\r\n    readonly _rateLimits?: Partial<RateLimitQueues>;\r\n    constructor(rev: RevClient, credentials: Rev.Credentials, keepAliveOptions?: boolean | Rev.KeepAliveOptions, rateLimits?: boolean | Rev.RateLimits) {\r\n        this.expires = new Date();\r\n\r\n        if (keepAliveOptions === true) {\r\n            this.keepAlive = new SessionKeepAlive(this);\r\n        } else if (isPlainObject(keepAliveOptions)) {\r\n            this.keepAlive = new SessionKeepAlive(this, keepAliveOptions);\r\n        }\r\n\r\n        let rateLimitQueues: undefined | Partial<RateLimitQueues> = undefined;\r\n        if (rateLimits) {\r\n            rateLimitQueues = makeQueues(isPlainObject(rateLimits) ? rateLimits : undefined);\r\n        }\r\n\r\n        // add as private member\r\n        Object.defineProperties(this, {\r\n            rev: {\r\n                get() { return rev; },\r\n                enumerable: false\r\n            },\r\n            [_credentials]: {\r\n                get() { return credentials; },\r\n                enumerable: false\r\n            },\r\n            _rateLimits: {\r\n                get() { return rateLimitQueues; },\r\n                enumerable: false\r\n            }\r\n        });\r\n    }\r\n    async login() {\r\n        this.token = undefined;\r\n        this.expires = new Date();\r\n\r\n        const {\r\n            expiration,\r\n            ...session\r\n        } = await this._login();\r\n\r\n        Object.assign(this, session);\r\n\r\n        const expires = new Date(expiration);\r\n        // if invalid date or date in past returned - just assume 10 min expiration\r\n        if (isNaN(expires.getTime()) || expires.getTime() < this.expires.getTime()) {\r\n            this.expires.setUTCMinutes(this.expires.getUTCMinutes() + DEFAULT_EXPIRE_MINUTES);\r\n        } else {\r\n            this.expires = expires;\r\n        }\r\n\r\n        if (this.keepAlive) {\r\n            this.keepAlive.start();\r\n        }\r\n    }\r\n    async extend() {\r\n        const { expiration } = await this._extend();\r\n        this.expires = new Date(expiration);\r\n    }\r\n    async logoff() {\r\n        if (this.keepAlive) {\r\n            this.keepAlive.stop();\r\n        }\r\n        try {\r\n            await this._logoff();\r\n        } finally {\r\n            this.token = undefined;\r\n            this.expires = new Date();\r\n        }\r\n    }\r\n    async verify() {\r\n        try {\r\n            await this.rev.auth.verifySession();\r\n            return true;\r\n        } catch (err) {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     *\r\n     * @returns wasExtended - whether session was extended / re-logged in\r\n     */\r\n    async lazyExtend(options: Rev.KeepAliveOptions = { }) {\r\n        const {\r\n            extendThresholdMilliseconds: threshold = 3 * ONE_MINUTE,\r\n            verify: shouldVerify = true\r\n        } = options;\r\n\r\n        const { expires } = this;\r\n        const timeLeft = expires\r\n            ? expires.getTime() - Date.now()\r\n            : -1;\r\n\r\n        // login if session expired\r\n        if (timeLeft <= 0) {\r\n            await this.login();\r\n            return true;\r\n        }\r\n\r\n        // extend if within extend window\r\n        if (timeLeft > threshold) {\r\n            try {\r\n                await this.extend();\r\n                // successful extend, nothing more to do\r\n                return true;\r\n            } catch (error) {\r\n                this.rev.log('warn', 'Error extending session - re-logging in', error);\r\n            }\r\n            // check if valid session if plenty of time left\r\n        } else if (!shouldVerify || await this.verify()) {\r\n            // valid, no change\r\n            return false;\r\n        }\r\n\r\n        // if reached here then need to re-login\r\n        await this.login();\r\n        return true;\r\n    }\r\n    async queueRequest(queue: `${RateLimitEnum}`) {\r\n        await this._rateLimits?.[queue]?.();\r\n    }\r\n    /**\r\n     * Abort pending executions. All unresolved promises are rejected with a `AbortError` error.\r\n     * @param {string} [message] - message parameter for rejected AbortError\r\n     */\r\n    async clearQueues(message?: string) {\r\n        await clearQueues(this._rateLimits ?? {}, message);\r\n    }\r\n    /**\r\n     * check if expiration time of session has passed\r\n     */\r\n    get isExpired() {\r\n        const { expires } = this;\r\n        if (!expires) {\r\n            return true;\r\n        }\r\n        return Date.now() > expires.getTime();\r\n    }\r\n    /**\r\n     * returns true if session isn't expired and has a token\r\n     */\r\n    get isConnected() {\r\n        return !!this.token && !this.isExpired;\r\n    }\r\n    get username() {\r\n        return this[_credentials].username;\r\n    }\r\n    get hasRateLimits() {\r\n        return !!this._rateLimits;\r\n    }\r\n    protected abstract _login(): Promise<LoginResponse>;\r\n    protected abstract _extend(): Promise<{ expiration: string; }>;\r\n    protected abstract _logoff(): Promise<void>;\r\n    public abstract toJSON(): Rev.IRevSessionState;\r\n}\r\n\r\n/**\r\n * Use OAuth2Session instead if possible\r\n * @deprecated\r\n */\r\nexport class OAuthSession extends SessionBase {\r\n    refreshToken?: string;\r\n    async _login() {\r\n        const { oauthConfig, authCode } = this[_credentials];\r\n        if (!oauthConfig || !authCode) {\r\n            throw new TypeError('OAuth Config / auth code not specified');\r\n        }\r\n        const {\r\n            accessToken: token,\r\n            expiration,\r\n            refreshToken,\r\n            userId\r\n        } = await this.rev.auth.loginOAuth(oauthConfig, authCode);\r\n        return { token, expiration, refreshToken, userId };\r\n    }\r\n    async _extend() {\r\n        const { [_credentials]: { oauthConfig } } = this;\r\n\r\n        const {\r\n            // other API calls call this \"token\" instead of \"accessToken\", hence the rename\r\n            accessToken: token,\r\n            expiration,\r\n            refreshToken\r\n        } = await this.rev.auth.extendSessionOAuth(oauthConfig as any, <string>this.refreshToken);\r\n\r\n        // unlike other extend methods this updates the token + refreshToken each time\r\n        Object.assign(this, { token, refreshToken });\r\n        return { expiration };\r\n    }\r\n    async _logoff() {\r\n        // nothing to do\r\n        return;\r\n    }\r\n    public toJSON(): Rev.IRevSessionState {\r\n        return {\r\n            token: this.token || '',\r\n            expiration: this.expires,\r\n            refreshToken: this.refreshToken\r\n        };\r\n    }\r\n}\r\n\r\nexport class OAuth2Session extends SessionBase {\r\n    refreshToken?: string;\r\n    async _login() {\r\n        const { oauthConfig, code, codeVerifier } = this[_credentials];\r\n        if (!oauthConfig || !code || !codeVerifier) {\r\n            throw new TypeError('OAuth Config / auth code / verifier not specified');\r\n        }\r\n        const {\r\n            access_token: token,\r\n            expires_in,\r\n            refresh_token: refreshToken,\r\n            userId\r\n        } = await this.rev.auth.loginOAuth2(oauthConfig, code, codeVerifier);\r\n        const expiresTime = Date.now() + parseInt(expires_in, 10) * 1000;\r\n        const expiration = new Date(expiresTime).toISOString();\r\n        return { token, expiration, refreshToken, userId };\r\n    }\r\n    async _extend() {\r\n        return this.rev.auth.extendSession();\r\n    }\r\n    async _logoff() {\r\n        return;\r\n    }\r\n    public toJSON(): Rev.IRevSessionState {\r\n        return {\r\n            token: this.token || '',\r\n            expiration: this.expires\r\n        };\r\n    }\r\n}\r\n\r\nexport class UserSession extends SessionBase {\r\n    userId?: string;\r\n    async _login() {\r\n        const { username, password } = this[_credentials];\r\n        if (!username || !password) {\r\n            throw new TypeError('username/password not specified');\r\n        }\r\n        const {\r\n            token,\r\n            expiration,\r\n            id: userId\r\n        } = await this.rev.auth.loginUser(username, password);\r\n        return { token, expiration, userId };\r\n    }\r\n    async _extend() {\r\n        const { userId } = this;\r\n\r\n        return this.rev.auth.extendSessionUser(<string>userId);\r\n    }\r\n    async _logoff() {\r\n        const { userId } = this;\r\n\r\n        return this.rev.auth.logoffUser(<string>userId);\r\n    }\r\n    public toJSON(): Rev.IRevSessionState {\r\n        return {\r\n            token: this.token || '',\r\n            expiration: this.expires,\r\n            userId: this.userId\r\n        };\r\n    }\r\n}\r\n\r\nexport class ApiKeySession extends SessionBase {\r\n    async _login() {\r\n        const { apiKey, secret } = this[_credentials];\r\n        if (!apiKey || !secret) {\r\n            throw new TypeError('apiKey/secret not specified');\r\n        }\r\n        return this.rev.auth.loginToken(apiKey, secret);\r\n    }\r\n    async _extend() {\r\n        const { apiKey } = this[_credentials];\r\n        return this.rev.auth.extendSessionToken(<string>apiKey);\r\n    }\r\n    async _logoff() {\r\n        const { apiKey } = this[_credentials];\r\n        return this.rev.auth.logoffToken(<string>apiKey);\r\n    }\r\n    public toJSON(): Rev.IRevSessionState {\r\n        return {\r\n            token: this.token || '',\r\n            expiration: this.expires,\r\n            apiKey: this[_credentials].apiKey\r\n        };\r\n    }\r\n}\r\n\r\nexport class JWTSession extends SessionBase {\r\n    async _login() {\r\n        const { jwtToken } = this[_credentials];\r\n        if (!jwtToken) {\r\n            throw new TypeError('JWT Token not specified');\r\n        }\r\n        const {accessToken: token, expiration} = await this.rev.auth.loginJWT(jwtToken);\r\n        return { token, expiration, issuer: 'vbrick' };\r\n    }\r\n    async _extend() {\r\n        return this.rev.auth.extendSession();\r\n    }\r\n    async _logoff() {\r\n        return;\r\n    }\r\n    public toJSON(): Rev.IRevSessionState {\r\n        return {\r\n            token: this.token || '',\r\n            expiration: this.expires\r\n        };\r\n    }\r\n}\r\n\r\nexport class GuestRegistrationSession extends SessionBase {\r\n    async _login() {\r\n        const { webcastId, guestRegistrationToken } = this[_credentials];\r\n        if (!guestRegistrationToken || !webcastId) {\r\n            throw new TypeError('Guest Registration Token or Webcast ID not specified');\r\n        }\r\n        const {accessToken: token} = await this.rev.auth.loginGuestRegistration(webcastId, guestRegistrationToken);\r\n\r\n        // expires time is not sent, so just assume 15 minutes\r\n        const expiresTime = Date.now() + 1000 * 60 * 15;\r\n        const expiration = new Date(expiresTime).toISOString();\r\n\r\n        return { token, expiration, issuer: 'vbrick' };\r\n    }\r\n    async _extend() {\r\n        return this.rev.auth.extendSession();\r\n    }\r\n    async _logoff() {\r\n        return;\r\n    }\r\n    public toJSON(): Rev.IRevSessionState {\r\n        return {\r\n            token: this.token || '',\r\n            expiration: this.expires\r\n        };\r\n    }\r\n}\r\n\r\nexport class AccessTokenSession extends SessionBase {\r\n    // just verify user on login\r\n    async _login() {\r\n        const {token} = this[_credentials].session ?? {};\r\n\r\n        // restore token if set to undefined\r\n        this.token ||= token;\r\n\r\n        const {expiration} = await this.rev.auth.extendSession();\r\n\r\n        return {\r\n            token: this.token || '',\r\n            expiration,\r\n            issuer: 'vbrick'\r\n        };\r\n    }\r\n    async _extend() {\r\n        return this.rev.auth.extendSession();\r\n    }\r\n    async _logoff() {\r\n        return;\r\n    }\r\n    public toJSON(): Rev.IRevSessionState {\r\n        return {\r\n            token: this.token || '',\r\n            expiration: this.expires\r\n        };\r\n    }\r\n    override get isConnected() {\r\n        return true;\r\n    }\r\n    override get isExpired() {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport class PublicOnlySession extends SessionBase {\r\n    async _login() {\r\n        this.rev.log('debug', 'Using client with no authentication (publicOnly) - non-public endpoints will return 401');\r\n        // no verify\r\n        return {\r\n            token: this.token || '',\r\n            // very long expiration\r\n            expiration: new Date(Date.now() + 24 * 60 * ONE_MINUTE).toISOString(),\r\n            issuer: 'vbrick'\r\n        };\r\n    }\r\n    async _extend() {\r\n        return {\r\n            expiration: new Date(Date.now() + 24 * 60 * ONE_MINUTE).toISOString()\r\n        }\r\n    }\r\n    async _logoff() {\r\n        return;\r\n    }\r\n    public toJSON(): Rev.IRevSessionState {\r\n        return {\r\n            token: this.token || '',\r\n            expiration: this.expires\r\n        };\r\n    }\r\n    override get isConnected() {\r\n        return true;\r\n    }\r\n    override get isExpired() {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function createSession(rev: RevClient, credentials: Rev.Credentials, keepAliveOptions?: boolean | Rev.KeepAliveOptions, rateLimits?: boolean | Rev.RateLimits) {\r\n    let session: Rev.IRevSession;\r\n\r\n    const {\r\n        session: sessionState = {} as Rev.IRevSessionState,\r\n        publicOnly,\r\n        ...creds\r\n    } = credentials;\r\n\r\n    const {\r\n        token,\r\n        expiration,\r\n        refreshToken,\r\n        userId\r\n    } = sessionState;\r\n\r\n    const now = Date.now();\r\n    const expires = new Date(expiration || now);\r\n    const hasSession = (token && typeof token === 'string') && (expires.getTime() > now);\r\n\r\n    const isOAuth2Login = credentials.oauthConfig && (credentials.code && credentials.codeVerifier);\r\n    const isLegacyOauthLogin = credentials.oauthConfig && (credentials.authCode || (hasSession && refreshToken));\r\n    const isApiKeyLogin = credentials.apiKey && (credentials.secret || (hasSession && !userId));\r\n    const isUsernameLogin = credentials.username && (credentials.password || (hasSession && userId));\r\n    const isJWTLogin = credentials.jwtToken;\r\n    const isGuestRegistration = credentials.webcastId && credentials.guestRegistrationToken;\r\n\r\n    // prefer oauth first, then apikey then username if multiple params specified\r\n    if (isOAuth2Login) {\r\n        session = new OAuth2Session(rev, creds, keepAliveOptions, rateLimits);\r\n    } else if (isLegacyOauthLogin) {\r\n        session = new OAuthSession(rev, creds, keepAliveOptions, rateLimits);\r\n        if (refreshToken) {\r\n            (session as OAuthSession).refreshToken = refreshToken;\r\n        }\r\n    } else if (isApiKeyLogin) {\r\n        session = new ApiKeySession(rev, creds, keepAliveOptions, rateLimits);\r\n    } else if (isJWTLogin) {\r\n        session = new JWTSession(rev, creds, keepAliveOptions, rateLimits);\r\n    } else if (isGuestRegistration) {\r\n        session = new GuestRegistrationSession(rev, creds, keepAliveOptions, rateLimits);\r\n    } else if (isUsernameLogin) {\r\n        session = new UserSession(rev, creds, keepAliveOptions, rateLimits);\r\n        if (userId) {\r\n            (session as UserSession).userId = userId;\r\n        }\r\n    } else if (publicOnly) {\r\n        session = new PublicOnlySession(rev, creds, false, rateLimits);\r\n    } else if (hasSession) {\r\n        session = new AccessTokenSession(rev, { session: sessionState }, keepAliveOptions, rateLimits);\r\n    } else {\r\n        throw new TypeError('Must specify credentials (username+password, apiKey+secret or oauthConfig+authCode)');\r\n    }\r\n\r\n    if (hasSession) {\r\n        session.token = token;\r\n        session.expires = expires;\r\n    }\r\n    return session;\r\n}\r\n","import * as api from './api';\r\nimport polyfills, { onInitialize, shouldInitialize } from './interop/polyfills';\r\nimport { RevError } from './rev-error';\r\nimport { createSession } from './rev-session';\r\nimport type { Rev } from './types';\r\nimport { RateLimitEnum, isPlainObject, retry } from './utils';\r\nimport { decodeBody } from './utils/request-utils';\r\n\r\n/**\r\n * @categoryDescription Getting Started\r\n * @see {@link RevClient}, the main entry point for using this library\r\n */\r\n\r\n/** @inline */\r\ntype PayloadType = { [key: string]: any; } | Record<string, any> | any[];\r\n\r\n/**\r\n * All API interactions are wrapped up in the `RevClient` class.\r\n *\r\n * @example\r\n * ```js\r\nimport {RevClient} from '/path/to/rev-client.js';\r\n\r\n// create client object\r\nconst rev = new RevClient({\r\n    url: 'https://my.rev.url',\r\n    apiKey: 'my.user.apikey',\r\n    secret: 'my.user.secret',\r\n    // or can login via username + password\r\n    // username: 'my.username',\r\n    // password: 'my.password',\r\n    logEnabled: true, // turn on debug logging\r\n    keepAlive: true // automatically extend session\r\n    rateLimits: true // automatically enforce rate limiting (avoid 429 error responses)\r\n});\r\n\r\n(async () => {\r\n    // call login api and start session. will throw error if invalid login\r\n    await rev.connect();\r\n\r\n    // get details of current user\r\n    const currentUser = await rev.user.details('me');\r\n    console.log(currentUser);\r\n});\r\n```\r\n *\r\n * @category Getting Started\r\n *\r\n * @groupDescription APIs\r\n * Methods to call the Rev APIs  are broken up into namespaces.\r\n * They roughly match up to the categories in the [Rev API Docs](https://revdocs.vbrick.com/reference/developer-hub)\r\n * Documentation for the individual api namespaces are broken out into separate pages:\r\n * * `.admin`: {@link AdminAPI | admin api}\r\n *\r\n * * **`.admin`**: {@link AdminAPI | Admin Methods}\r\n * * **`.audit`**: {@link AuditAPI | Audit Methods}\r\n * * **`.auth`**: {@link AuthAPI | Auth Methods}\r\n * * **`.category`**: {@link CategoryAPI | Category Methods}\r\n * * **`.channel`**: {@link ChannelAPI | Channel Methods}\r\n * * **`.device`**: {@link DeviceAPI | Device Methods}\r\n * * **`.environment`**: {@link EnvironmentAPI | Environment Methods}\r\n * * **`.group`**: {@link GroupAPI | Group Methods}\r\n * * **`.playlist`**: {@link PlaylistAPI | Playlist Methods}\r\n * * **`.recording`**: {@link RecordingAPI | Recording Methods}\r\n * * **`.upload`**: {@link UploadAPI | Upload Methods}\r\n * * **`.user`**: {@link UserAPI | User Methods}\r\n * * **`.video`**: {@link VideoAPI | Video Methods}\r\n * * **`.webcast`**: {@link WebcastAPI | Webcast Methods}\r\n * * **`.zones`**: {@link ZoneAPI | Zone Methods}\r\n *\r\n *\r\n * @groupDescription Session\r\n * Methods to maintain the authentication session (accessToken)\r\n *\r\n * @groupDescription Request\r\n * Methods to directly make (authenticated) HTTP requests\r\n *\r\n * @groupDescription Properties\r\n * instance properties\r\n *\r\n * @groupDescription Internal\r\n * for internal use\r\n *\r\n */\r\nexport class RevClient {\r\n    /**\r\n     * The Rev tenant url (i.e. https://my.rev.url)\r\n     * @group Properties\r\n     */\r\n    url: string;\r\n    /**\r\n     * turns on/off debug logging to console\r\n     * @group Internal\r\n     */\r\n    logEnabled: boolean;\r\n    /**\r\n     ** This is an internal class that handles authentication and maintaining the session. It should not be used directly.\r\n     * @group Internal\r\n     */\r\n    session: Rev.IRevSession;\r\n    /**\r\n     * @group APIs\r\n     */\r\n    readonly admin!: api.AdminAPI;\r\n    /**\r\n     * @group APIs\r\n     */\r\n    readonly audit!: api.AuditAPI;\r\n    /**\r\n     * @group APIs\r\n     */\r\n    readonly auth!: api.AuthAPI;\r\n    /**\r\n     * @group APIs\r\n     */\r\n    readonly category!: api.CategoryAPI;\r\n    /**\r\n     * @group APIs\r\n     */\r\n    readonly channel!: api.ChannelAPI;\r\n    /**\r\n     * @group APIs\r\n     */\r\n    readonly device!: api.DeviceAPI;\r\n    /**\r\n     * @group APIs\r\n     */\r\n    readonly environment!: api.EnvironmentAPI;\r\n    /**\r\n     * @group APIs\r\n     */\r\n    readonly group!: api.GroupAPI;\r\n    /**\r\n     * @group APIs\r\n     */\r\n    readonly playlist!: api.PlaylistAPI;\r\n    /**\r\n     *\r\n     * @group APIs\r\n     */\r\n    readonly recording!: api.RecordingAPI;\r\n    /**\r\n     * @group APIs\r\n     */\r\n    readonly upload!: api.UploadAPI;\r\n    /**\r\n     * @group APIs\r\n     */\r\n    readonly user!: api.UserAPI;\r\n    /**\r\n     * @group APIs\r\n     */\r\n    readonly video!: api.VideoAPI;\r\n    /**\r\n     * @group APIs\r\n     */\r\n    readonly webcast!: api.WebcastAPI;\r\n    /**\r\n     * @group APIs\r\n     */\r\n    readonly zones!: api.ZoneAPI;\r\n    /**\r\n     * @internal\r\n     */\r\n    private _streamPreference: Rev.RequestOptions['responseType'];\r\n    /**\r\n     *\r\n     * @param options The configuration options including target Rev URL and authentication credentials\r\n     */\r\n    constructor(options: Rev.Options) {\r\n        if (!isPlainObject(options) || !options.url) {\r\n            throw new TypeError('Missing configuration options for client - url and username/password or apiKey/secret');\r\n        }\r\n        const {\r\n            url,\r\n            log,\r\n            logEnabled = false,\r\n            keepAlive = true,\r\n            // NOTE default to false rate limiting for now. In future this may change\r\n            rateLimits = false,\r\n            defaultStreamPreference = 'stream',\r\n            ...credentials\r\n        } = options;\r\n\r\n        // get just the origin of provided url\r\n        const urlObj = new URL(url);\r\n        this.url = urlObj.origin;\r\n\r\n        // will throw error if credentials are invalid\r\n        this.session = createSession(this, credentials, keepAlive, rateLimits);\r\n\r\n        // add logging functionality\r\n        this.logEnabled = !!logEnabled;\r\n        if (log) {\r\n            this.log = (severity: Rev.LogSeverity, ...args: any[]) => {\r\n                if (!this.logEnabled) {\r\n                    return;\r\n                }\r\n                log(severity, ...args);\r\n            };\r\n        }\r\n        this._streamPreference = defaultStreamPreference;\r\n\r\n        // add all API endpoints\r\n        Object.defineProperties(this, {\r\n            admin: { value: api.admin(this), writable: false },\r\n            // NOTE rate limiting option passed into api factory since its\r\n            audit: { value: api.audit(this, rateLimits), writable: false },\r\n            auth: { value: api.auth(this), writable: false },\r\n            category: { value: api.category(this), writable: false },\r\n            channel: { value: api.channel(this), writable: false },\r\n            device: { value: api.device(this), writable: false },\r\n            environment: { value: api.environment(this), writable: false },\r\n            group: { value: api.group(this), writable: false },\r\n            playlist: { value: api.playlist(this), writable: false },\r\n            recording: { value: api.recording(this), writable: false },\r\n            upload: { value: api.upload(this), writable: false },\r\n            user: { value: api.user(this), writable: false },\r\n            video: { value: api.video(this), writable: false },\r\n            webcast: { value: api.webcast(this), writable: false },\r\n            // COMBAK - DEPRECATED\r\n            webcasts: { get: () => {\r\n                this.log('debug', 'webcasts is deprecated - use rev.webcast instead');\r\n                return this.webcast;\r\n            }, enumerable: false },\r\n            zones: { value: api.zones(this), writable: false }\r\n        });\r\n    }\r\n    /**\r\n     * make a REST request.\r\n     * The Authorization http header for the current session will automatically be added.\r\n     *\r\n     * @group Request\r\n     * @param method HTTP Method\r\n     * @param endpoint API endpoint path\r\n     * @param data Request body if PUT/POST/PATCH or query parameters object if GET/DELETE/HEAD. objects/arrays are automatically stringified\r\n     * @param options additional request options, including additional HTTP Headers if necessary.\r\n     * @returns the decoded response body as well as statuscode/headers/and raw response\r\n     *\r\n     */\r\n    async request<T = any>(method: Rev.HTTPMethod, endpoint: string, data: any = undefined, options: Rev.RequestOptions = { }): Promise<Rev.Response<T>> {\r\n        // support for dynamically loading fetch polyfill\r\n        if (shouldInitialize()) await onInitialize();\r\n\r\n        const url = new URL(endpoint, this.url);\r\n        // ensure url matches Rev url, to avoid sending authorization header elsewhere\r\n        if (url.origin !== this.url) {\r\n            throw new TypeError(`Invalid endpoint - must be relative to ${this.url}`);\r\n        }\r\n\r\n        let {\r\n            headers: optHeaders,\r\n            responseType,\r\n            throwHttpErrors = true,\r\n            ...requestOpts\r\n        } = options;\r\n\r\n        // setup headers for JSON communication (by default)\r\n        const headers = new polyfills.Headers(optHeaders);\r\n\r\n        // add authorization header from stored token\r\n        if (this.session.token && !headers.has('Authorization')) {\r\n            headers.set('Authorization', `VBrick ${this.session.token}`);\r\n        }\r\n        if (headers.get('Authorization') === '') {\r\n            // if Auth is explicitly set to '' then remove from list\r\n            headers.delete('Authorization');\r\n        }\r\n\r\n        const fetchOptions: RequestInit = {\r\n            mode: 'cors',\r\n            method,\r\n            ...requestOpts,\r\n            headers\r\n        };\r\n\r\n        // default to JSON request payload, but allow it to be overridden\r\n        let shouldSetAsJSON = !headers.has('Content-Type');\r\n        const normalizedMethod = method.toUpperCase();\r\n\r\n        // add provided data to request body or as query string parameters\r\n        if (data) {\r\n            if (['POST', 'PUT', 'PATCH'].includes(normalizedMethod)) {\r\n                if (typeof data === 'string') {\r\n                    fetchOptions.body = data;\r\n                } else if (data instanceof polyfills.FormData) {\r\n                    shouldSetAsJSON = false;\r\n                    fetchOptions.body = data;\r\n                } else if (isPlainObject(data) || Array.isArray(data)) {\r\n                    fetchOptions.body = JSON.stringify(data);\r\n                } else {\r\n                    fetchOptions.body = data;\r\n                }\r\n            } else if (isPlainObject(data)) {\r\n                // add values to query string of URL\r\n                for (let [key, value] of Object.entries(data)) {\r\n                    if (value instanceof Date) value = value.toISOString();\r\n                    url.searchParams.append(key, value);\r\n                }\r\n            } else {\r\n                throw new TypeError(`Invalid payload for request to ${method} ${endpoint}`);\r\n            }\r\n        }\r\n\r\n        // default to JSON communication\r\n        if (!headers.has('Accept')) {\r\n            headers.set('Accept', 'application/json');\r\n        }\r\n        // set to JSON payload\r\n        if (shouldSetAsJSON && fetchOptions.body) {\r\n            headers.set('Content-Type', 'application/json');\r\n        }\r\n\r\n        // OPTIONAL log request and response\r\n        this.log('debug', `Request ${method} ${endpoint}`);\r\n\r\n        if (this.session.hasRateLimits) {\r\n            switch (normalizedMethod) {\r\n                case 'GET':\r\n                    await this.session.queueRequest(RateLimitEnum.Get);\r\n                    break;\r\n                case 'POST':\r\n                case 'PATCH':\r\n                case 'PUT':\r\n                case 'DELETE':\r\n                    await this.session.queueRequest(RateLimitEnum.Post);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // NOTE: will throw error on AbortError or client fetch errors\r\n        const response = await polyfills.fetch(`${url}`, {\r\n            ...fetchOptions,\r\n            method,\r\n            headers\r\n        });\r\n\r\n        const {\r\n            ok,\r\n            status: statusCode,\r\n            statusText,\r\n            headers: responseHeaders\r\n        } = response;\r\n\r\n        // check for error response code\r\n        if (!ok) {\r\n            if (throwHttpErrors) {\r\n                const err = await RevError.create(response);\r\n                this.log('debug', `Response ${method} ${endpoint} ${statusCode} ${err.code || statusText}`);\r\n                throw err;\r\n            }\r\n            // if not throwwing then force responseType to auto (could be text or json)\r\n            responseType = undefined;\r\n        }\r\n\r\n        this.log('debug', `Response ${method} ${endpoint} ${statusCode} ${statusText}`);\r\n\r\n        let body: any = response.body;\r\n\r\n        switch (responseType) {\r\n            case 'json':\r\n                // safety check for empty response\r\n                if (`${responseHeaders.get('content-length')}` === '0') {\r\n                    body = null;\r\n                } else {\r\n                    body = await response.json();\r\n                }\r\n                break;\r\n            case 'text':\r\n                body = await response.text();\r\n                break;\r\n            case 'blob':\r\n                body = await response.blob();\r\n                break;\r\n            case 'stream':\r\n                switch (this._streamPreference) {\r\n                    case 'webstream': body = polyfills.asWebStream(response.body); break;\r\n                    case 'nativestream': body = polyfills.asPlatformStream(response.body); break;\r\n                    default: body = response.body;\r\n                }\r\n                body = response.body;\r\n                break;\r\n            case 'webstream':\r\n                body = polyfills.asWebStream(response.body);\r\n                break;\r\n            case 'nativestream':\r\n                body = polyfills.asPlatformStream(response.body);\r\n                break;\r\n            default:\r\n                // if no mimetype in response then assume JSON unless otherwise specified\r\n                body = await decodeBody(response, headers.get('Accept'));\r\n        }\r\n\r\n        return {\r\n            statusCode,\r\n            headers: responseHeaders,\r\n            body,\r\n            response\r\n        };\r\n    }\r\n    /**\r\n     *\r\n     * Make a GET Request\r\n     * @group Request\r\n     * @param endpoint API path\r\n     * @param data Query parameters as json object\r\n     * @param options Additional request options\r\n     * @returns Depends on options.responseType/API response - usually JSON object except for binary download endpoints\r\n     */\r\n    async get<T = any>(endpoint: string, data?: PayloadType, options?: Rev.RequestOptions): Promise<T> {\r\n        const { body } = await this.request('GET', endpoint, data, options);\r\n        return body;\r\n    }\r\n    /**\r\n     *\r\n     * Make a POST Request\r\n     * @group Request\r\n     * @param endpoint API path\r\n     * @param data Request body\r\n     * @param options Additional request options\r\n     * @returns Depends on options.responseType/API response - usually JSON object\r\n     */\r\n    async post<T = any>(endpoint: string, data?: PayloadType, options?: Rev.RequestOptions): Promise<T> {\r\n        const { body } = await this.request('POST', endpoint, data, options);\r\n        return body;\r\n    }\r\n    /**\r\n     *\r\n     * Make a GET Request\r\n     * @group Request\r\n     * @param endpoint API path\r\n     * @param data Request body\r\n     * @param options Additional request options\r\n     * @returns Depends on options.responseType/API response - usually JSON object or void\r\n     */\r\n    async put<T = any>(endpoint: string, data?: PayloadType, options?: Rev.RequestOptions): Promise<T> {\r\n        const { body } = await this.request('PUT', endpoint, data, options);\r\n        return body;\r\n    }\r\n    /**\r\n     *\r\n     * Make a PATCH Request\r\n     * @group Request\r\n     * @param endpoint API path\r\n     * @param data Request body\r\n     * @param options Additional request options\r\n     * @returns\r\n     */\r\n    async patch(endpoint: string, data?: PayloadType, options?: Rev.RequestOptions): Promise<void> {\r\n        await this.request('PATCH', endpoint, data, options);\r\n    }\r\n    /**\r\n     *\r\n     * Make a DELETE Request\r\n     * @group Request\r\n     * @param endpoint API path\r\n     * @param data query parameters as JSON object\r\n     * @param options Additional request options\r\n     * @returns\r\n     */\r\n    async delete(endpoint: string, data?: PayloadType, options?: Rev.RequestOptions): Promise<void> {\r\n        await this.request('DELETE', endpoint, data, options);\r\n    }\r\n    /**\r\n     *\r\n     * authenticate with Rev\r\n     * @group Session\r\n     */\r\n    async connect() {\r\n\r\n        // Rarely the login call will fail on first attempt, therefore this code attempts to login\r\n        // multiple times\r\n        await retry(\r\n            () => this.session.login(),\r\n            // Do not re-attempt logins with invalid user/password or rate limiting - it can lock out the user\r\n            (err: RevError) => ![401, 429].includes(err.status));\r\n    }\r\n    /**\r\n     *\r\n     * end rev session\r\n     * @group Session\r\n     */\r\n    async disconnect() {\r\n        try {\r\n            await this.session.logoff();\r\n        } catch (error) {\r\n            this.log('warn', `Error in logoff, ignoring: ${error}`);\r\n        }\r\n    }\r\n    /**\r\n     *\r\n     * Call the Extend Session API to maintain the current session's expiration time\r\n     * Note that this API call is automatically handled unless `keepAlive: false` was specified in configuring the client.\r\n     * @group Session\r\n     */\r\n    async extendSession() {\r\n        return this.session.extend();\r\n    }\r\n    /**\r\n     *\r\n     * Returns true/false based on if the session is currently valid\r\n     * @group Session\r\n     * @returns Promise<boolean>\r\n     */\r\n    async verifySession() {\r\n        return this.session.verify();\r\n    }\r\n    /**\r\n     *\r\n     * Returns true if session is connected and token's expiration date is in the future\r\n     * @group Properties\r\n     */\r\n    get isConnected() {\r\n        return this.session.isConnected;\r\n    }\r\n    /**\r\n     *\r\n     * the current session's `accessToken`\r\n     * @group Properties\r\n     */\r\n    get token() {\r\n        return this.session.token;\r\n    }\r\n    /**\r\n     *\r\n     * `Date` value when current `accessToken` will expire\r\n     * @group Properties\r\n     */\r\n    get sessionExpires() {\r\n        return this.session.expires;\r\n    }\r\n    /**\r\n     *\r\n     * get/set serialized session state (accessToken, expiration, and userId/apiKey)\r\n     * Useful if you need to create a new RevClient instance with the same accessToken\r\n     * @group Properties\r\n     */\r\n    get sessionState() {\r\n        return this.session.toJSON();\r\n    }\r\n    /**\r\n     *\r\n     * get/set serialized session state (accessToken, expiration, and userId/apiKey)\r\n     * Useful if you need to create a new RevClient instance with the same accessToken\r\n     * @group Properties\r\n     */\r\n    set sessionState(state: Rev.IRevSessionState) {\r\n        this.session.token = `${state.token}`;\r\n        this.session.expires = new Date(state.expiration);\r\n        for (let key of ['apiKey', 'refreshToken', 'userId'] as (keyof Rev.IRevSessionState)[]) {\r\n            if (key in state) {\r\n                (this.session as any)[key] = `${state[key] || ''}`;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     *\r\n     * used internally to write debug log entries. Does nothing if `logEnabled` is `false`\r\n     * @group Internal\r\n     * @param severity\r\n     * @param args\r\n     * @returns\r\n     */\r\n    log(severity: Rev.LogSeverity, ...args: any[]) {\r\n        if (!this.logEnabled) {\r\n            return;\r\n        }\r\n\r\n        const ts = (new Date()).toJSON().replace('T', ' ').slice(0, -5);\r\n        console.debug(`${ts} REV-CLIENT [${severity}]`, ...args);\r\n    }\r\n}\r\n","export * from './rev-client';\r\nexport * from './rev-error';\r\nexport type * from './types';\r\n\r\nimport {rateLimit} from './utils';\r\nimport {getExtensionForMime, getMimeForExtension} from './utils/file-utils';\r\nimport { setPolyfills } from './interop/polyfills';\r\n/**\r\n * Includes some helper utilities that may be useful when using this library\r\n * @category Utilities\r\n * @interface\r\n */\r\nexport const utils = {\r\n    /**\r\n     * Rate-limit a function - useful to throttle the number of API requests made in a minute\r\n     * @example\r\n     * ```js\r\n     * const {utils} = import '@vbrick/rev-client'\r\n     * const lock = utils.rateLimit(() => {}, { perSecond: 1 });\r\n     * for (let i = 0; i < 10; i++) {\r\n     *   await lock();\r\n     *   console.log(`${i}: this will only be called once per second`);\r\n     * }\r\n     * ```\r\n     */\r\n    rateLimit,\r\n    /**\r\n     * Get a valid file extension for a given mimetype (used for uploading videos/transcriptions/etc)\r\n     */\r\n    getExtensionForMime,\r\n    /**\r\n     * Get a valid mimetype for a given file extension (used for uploading videos/transcriptions/etc)\r\n     */\r\n    getMimeForExtension,\r\n    /**\r\n     * ADVANCED - Override the underlying classes used in making requests. This is for internal use only and shouldn't typically be used.\r\n     */\r\n    setPolyfills\r\n};\r\n\r\nimport { RevClient } from './rev-client';\r\nexport default RevClient;\r\n","import { FormDataEncoder } from 'form-data-encoder';\r\nimport { FormData } from 'node-fetch';\r\nimport { createHash, createHmac, randomBytes } from 'node:crypto';\r\nimport { Readable } from 'node:stream';\r\nimport { ReadableStream } from 'node:stream/web';\r\nimport type { RequestInit } from 'undici-types';\r\nimport type { Rev } from '../types/rev';\r\nimport { uploadParser } from './node-multipart-utils';\r\nimport type { RevPolyfills } from './polyfills';\r\nimport { pathToFileURL } from 'node:url';\r\n\r\nfunction randomValues(byteLength: number) {\r\n    return randomBytes(byteLength).toString('base64url');\r\n}\r\n\r\n/**\r\n * sha256 hash function for oauth2 pkce\r\n * @param value\r\n * @returns\r\n */\r\nasync function sha256Hash(value: string) {\r\n    return createHash('sha256')\r\n        .update(value)\r\n        .digest()\r\n        .toString('base64url');\r\n}\r\n\r\nasync function hmacSign(message: string, secret: string) {\r\n    const hmac = createHmac('sha256', secret);\r\n    const signature = hmac.update(message).digest('base64');\r\n    return signature;\r\n}\r\n\r\nclass AbortError extends Error {\r\n    type: string = 'aborted';\r\n    code: number = 20;\r\n    ABORT_ERR: number = 20;\r\n    constructor(message?: string) {\r\n        super(message);\r\n        Error.captureStackTrace(this, this.constructor);\r\n    }\r\n    override get name() {\r\n        return this.constructor.name;\r\n    }\r\n    get [Symbol.toStringTag]() {\r\n        return this.constructor.name;\r\n    }\r\n}\r\n\r\nexport default (polyfills: RevPolyfills) => {\r\n    Object.assign(polyfills, {\r\n        createAbortError(message: string): Error { return new AbortError(message); },\r\n        fetch(...args: Parameters<typeof fetch>) {\r\n            return globalThis.fetch(...args)\r\n                .catch(err => {\r\n                    // node.js native fetch (undici) wraps undelying errors in TypeError\r\n                    // unwrapping to maintain compatibility with node-fetch and Deno behaviors\r\n                    if (err instanceof TypeError && err.cause instanceof Error) {\r\n                        throw err.cause;\r\n                    }\r\n                    throw err;\r\n                });\r\n        },\r\n        FormData,\r\n        randomValues,\r\n        sha256Hash,\r\n        hmacSign,\r\n        parseUrl(value: string | URL) {\r\n            return value instanceof URL\r\n                ? value\r\n                : URL.canParse(value) && !/^[a-z]:[\\\\\\/]/i.test(value)\r\n                ? new URL(value)\r\n                : pathToFileURL(value);\r\n        },\r\n        uploadParser,\r\n        beforeFileUploadRequest(form: FormData, headers: Headers, uploadOptions: Rev.UploadFileOptions, options: Rev.RequestOptions) {\r\n            /** Encodes formdata as stream, rather than use builtin formdata processing - this is to allow streaming upload files without having to load into memory first */\r\n            const encoder = new FormDataEncoder(form);\r\n\r\n            Object.assign(options, {\r\n                body: encoder,\r\n                // needed for undici error thrown when body is stream\r\n                // https://fetch.spec.whatwg.org/#dom-requestinit-duplex\r\n                duplex: 'half'\r\n            } as RequestInit);\r\n\r\n            // set content-type and possibly content-length from form encoder\r\n            for (let [key, value] of Object.entries(encoder.headers)) {\r\n                headers.set(key, value);\r\n            }\r\n            headers.delete('transfer-encoding');\r\n            return undefined;\r\n        },\r\n        asPlatformStream(stream: NodeJS.ReadableStream | Readable | ReadableStream<any>): NodeJS.ReadableStream {\r\n            if (!stream) return stream;\r\n            return (stream instanceof ReadableStream)\r\n                ? Readable.fromWeb(stream)\r\n                : stream;\r\n        },\r\n        asWebStream(stream: NodeJS.ReadableStream | Readable | ReadableStream<any>): ReadableStream {\r\n            return (!stream || (stream instanceof ReadableStream))\r\n                ? stream\r\n                : Readable.toWeb(Readable.from(stream));\r\n        }\r\n    });\r\n};\r\n","import type { FileLike } from \"form-data-encoder\";\r\nimport { Stats, createReadStream, promises as fs } from \"node:fs\";\r\nimport path from \"node:path\";\r\nimport { Readable } from 'node:stream';\r\nimport { ReadableStream } from \"node:stream/web\";\r\nimport { RevError } from \"../rev-error\";\r\nimport type { Rev } from \"../types/rev\";\r\nimport { isBlobLike } from \"../utils\";\r\nimport { sanitizeUploadOptions } from \"../utils/file-utils\";\r\nimport { uploadParser as baseUploadParser } from \"../utils/multipart-utils\";\r\nimport polyfills from \"./polyfills\";\r\nimport { finished } from \"node:stream/promises\";\r\n\r\nconst LOCAL_PROTOCOLS = ['blob:', 'data:'];\r\nconst FETCH_PROTOCOLS = ['http:', 'https:', ...LOCAL_PROTOCOLS];\r\n\r\nexport const uploadParser = {\r\n    async string(value: string | URL, options: Rev.UploadFileOptions) {\r\n        const url = polyfills.parseUrl(value);\r\n\r\n        if (options.disableExternalResources && !LOCAL_PROTOCOLS.includes(url.protocol)) {\r\n            throw new Error(`${url.protocol} protocol not allowed`);\r\n        }\r\n\r\n        if (FETCH_PROTOCOLS.includes(url.protocol)) {\r\n            return uploadParser.response(\r\n                await polyfills.fetch(url, options),\r\n                options\r\n            );\r\n        }\r\n\r\n        return uploadParser.localFile(url, options);\r\n    },\r\n    async localFile(url: URL, options: Rev.UploadFileOptions) {\r\n        // use FS reader to read files\r\n        const readStream = createReadStream(url);\r\n        // pass through contentType of file based on filename, even if overridden in options\r\n        const {filename, contentType} = sanitizeUploadOptions(getFilename(url.pathname), '', options.contentType);\r\n\r\n        return Promise.race([\r\n            uploadParser.stream(\r\n                readStream,\r\n                {\r\n                    filename,\r\n                    ...options,\r\n                    contentType\r\n                }\r\n            ),\r\n            // will throw error if filepath cannot be accessed\r\n            finished(readStream)\r\n        ]);\r\n    },\r\n    async blob(value: Blob | File, options: Rev.UploadFileOptions) {\r\n        return baseUploadParser.blob(value, {\r\n            filename: getFilename(value),\r\n            ...options\r\n        });\r\n    },\r\n    async stream(value: AsyncIterable<Uint8Array> | ReadableStream<Uint8Array>, options: Rev.UploadFileOptions) {\r\n        let {\r\n            filename = getFilename(value),\r\n            contentType,\r\n            contentLength,\r\n            defaultContentType,\r\n            useChunkedTransfer = false\r\n        } = options;\r\n\r\n        const sanitized = sanitizeUploadOptions(filename, contentType, defaultContentType);\r\n\r\n        // only try to get length if not already specified, or useChunkedTransfer is set\r\n        if (!useChunkedTransfer) {\r\n            contentLength ||= await getLengthFromStream(value);\r\n        }\r\n\r\n        const file = new FileFromStream(value, sanitized.filename, {\r\n            type: sanitized.contentType,\r\n            size: contentLength\r\n        });\r\n        return {\r\n            file,\r\n            options: {\r\n                ...options,\r\n                contentLength,\r\n                ...sanitized\r\n            }\r\n        };\r\n    },\r\n    async response(response: Response, options: Rev.UploadFileOptions) {\r\n        const { body, headers, url } = response;\r\n        if (!response.ok || !body) {\r\n            const err = await RevError.create(response);\r\n            throw err;\r\n        }\r\n        let {\r\n            contentLength,\r\n            filename = getFilename(url)\r\n        } = options;\r\n\r\n        // ignore length of compressed inputs\r\n        if (!headers.get('content-encoding')) {\r\n            contentLength ||= parseInt(headers.get('content-length') || '') || undefined;\r\n        }\r\n\r\n        const contentType = headers.get('content-type');\r\n        const opts = {\r\n            ...options,\r\n            filename,\r\n            ...contentType && { contentType },\r\n            ...(contentLength\r\n                ? { contentLength }\r\n                : { useChunkedTransfer: true }\r\n            )\r\n        }\r\n\r\n        return uploadParser.stream(body as ReadableStream<Uint8Array>, opts);\r\n    },\r\n    async parse(value: Rev.FileUploadType, options: Rev.UploadFileOptions) {\r\n        if (typeof value === 'string' || value instanceof URL) {\r\n            return uploadParser.string(value, options);\r\n        }\r\n        if (value instanceof polyfills.Response) {\r\n            return uploadParser.response(value, options);\r\n        }\r\n        if (isBlobLike(value) && !(value as any)[Symbol.asyncIterator]) {\r\n            return uploadParser.blob(value, options);\r\n        }\r\n        return uploadParser.stream(value as AsyncIterable<any>, options);\r\n    }\r\n}\r\n\r\n\r\nexport class FileFromStream implements FileLike {\r\n    #stream: Readable | ReadableStream | AsyncIterable<Uint8Array>;\r\n\r\n    constructor(stream: Readable | ReadableStream | AsyncIterable<Uint8Array>, fileName: string = '', options?: FilePropertyBag & { size?: number, lastModified?: number }) {\r\n        this.#stream = stream;\r\n        this.name = fileName;\r\n        this.type = options?.type ?? ''\r\n        this.size = options?.size ?? NaN;\r\n        this.lastModified = options?.lastModified ?? Date.now();\r\n    }\r\n    name: string;\r\n    type: string;\r\n    size: number;\r\n    lastModified: number;\r\n    stream(): ReadableStream<Uint8Array> | AsyncIterable<Uint8Array> {\r\n        return this.#stream;\r\n    }\r\n    [Symbol.toStringTag] = 'File';\r\n}\r\n\r\n\r\nasync function getLengthFromStream(source: Record<string, any>, timeoutSeconds = 15) {\r\n    const {\r\n        length,\r\n        contentLength,\r\n        headers = {},\r\n        path: filepath\r\n    } = source;\r\n\r\n    if (isFinite(length)) {\r\n        return length;\r\n    }\r\n    if (isFinite(contentLength)) {\r\n        return contentLength;\r\n    }\r\n    // a HTTP Response object\r\n    if (headers?.['content-length']) {\r\n        const headerLength = parseInt(headers['content-length'], 10);\r\n        if (isFinite(headerLength)) {\r\n            return headerLength;\r\n        }\r\n    }\r\n\r\n    // try to get size from a fs stream's path parameter\r\n    if (filepath) {\r\n        return statFile(filepath, timeoutSeconds);\r\n    }\r\n}\r\n\r\nexport async function statFile(filepath: string | URL, timeoutSeconds = 15) {\r\n    // sanity check timeout\r\n    let timer;\r\n    const timeout = new Promise<Stats>(done => {\r\n        timer = setTimeout(done, timeoutSeconds * 1000, {});\r\n    });\r\n\r\n    try {\r\n        const stat = await Promise.race([\r\n            fs.stat(filepath),\r\n            timeout\r\n        ]);\r\n\r\n        return stat?.size;\r\n    } catch (err) {\r\n    } finally {\r\n        clearTimeout(timer);\r\n    }\r\n}\r\n\r\n/**\r\n * try to get the filename from input (filepath/File/Fs.ReadStream/Response)\r\n * @param file\r\n * @returns\r\n */\r\nfunction getFilename(file: Rev.FileUploadType) {\r\n    if (typeof file === 'string') {\r\n        return path.basename(file);\r\n    }\r\n    const { path: _path, filename, name } = file as Record<string, any>;\r\n    // try to get filename from stream/File\r\n    const streamPath = _path || filename || name;\r\n    if (streamPath && typeof streamPath === 'string') {\r\n        return path.basename(streamPath);\r\n    }\r\n}\r\n"],"mappings":"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","names":["RevClient","fn","fn","fn","roles","customFields","field","i","hmacSign","query","options","query","options","ONE_MINUTE","getSummaryFromResponse","query","options","query","options","path","version","ONE_MINUTE","RevClient","import_node_stream","import_web","LOCAL_PROTOCOLS","uploadParser","fs","path","randomValues","sha256Hash","hmacSign","polyfills","uploadParser"]}